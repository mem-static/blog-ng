{"version":3,"file":"component---src-pages-index-tsx-699c492e821d6c5d0234.js","mappings":"0MAAA,MAAMA,EAAa,CAAC,MAAO,QCwB3B,eAAgB,GAAsB,IAAZ,MAAEC,GAAO,EACjC,OACEC,EAAAA,cAACC,EAAAA,EAAG,KACDF,EAAMG,KAAIC,IAAe,IAAD,MAAb,KAAEC,GAAM,EAClB,MAAMC,ED1BC,SAAuBC,GACpC,IAAK,MAAMC,KAAOT,EAChB,GAAIQ,EAASE,SAASD,GACpB,OAAOD,EAASG,MAAM,EAAGH,EAASI,OAASH,EAAIG,QAGnD,OAAOJ,CACT,CCmBqBK,CAAcP,EAAKQ,OAAOC,cAEvC,OACEb,EAAAA,cAAAA,MAAAA,CAAKc,IAAKV,EAAKW,IACbf,EAAAA,cAAAA,KAAAA,KACEA,EAAAA,cAACgB,EAAAA,EAAI,CAACC,GAAIZ,GAAuB,QAAlB,EAAED,EAAKc,mBAAW,aAAhBC,EAAkBC,OACnCpB,EAAAA,cAAAA,OAAAA,CAAMqB,MAAO,CAAEC,MAAO,SAAU,KAAGlB,EAAKc,aAAed,EAAKc,YAAYK,OAE1EvB,EAAAA,cAAAA,IAAAA,KAAII,EAAKoB,SACL,IAKf,ECnCc,SAASC,EAAU,GAA6C,IAA7C,KAAEC,GAAyC,EAC3E,MAAM,MAAEN,EAAK,YAAEO,GAAgBD,EAAKE,KAAMC,aAE1C,OACE7B,EAAAA,cAAC8B,EAAAA,EAAY,KACX9B,EAAAA,cAACC,EAAAA,EAAG,KACFD,EAAAA,cAAC+B,EAAW,CAAChC,MAAO2B,EAAKM,kBAAmBC,SAIpD,C","sources":["webpack://memset0-blog/./src/utils/removeExtname.ts","webpack://memset0-blog/./src/components/page/BlogArchive.tsx","webpack://memset0-blog/./src/pages/index.tsx"],"sourcesContent":["const targetExts = ['.md', '.mdx'];\n\nexport default function removeExtname(filename: string) {\n  for (const ext of targetExts) {\n    if (filename.endsWith(ext)) {\n      return filename.slice(0, filename.length - ext.length);\n    }\n  }\n  return filename;\n}\n","import React from 'react';\n\nimport Box from '@mui/joy/Box';\nimport Link from '../Link';\nimport removeExtname from '../../utils/removeExtname';\n\nexport interface PostType {\n  readonly node: {\n    readonly id: string;\n    readonly excerpt: string;\n    readonly frontmatter: {\n      readonly title: string;\n      readonly date: string;\n    };\n    readonly parent: {\n      readonly relativePath: string;\n    };\n  };\n}\n\ninterface BlogArchiveProps {\n  posts: Array<PostType>;\n}\n\nexport default (function ({ posts }) {\n  return (\n    <Box>\n      {posts.map(({ node }) => {\n        const slug = removeExtname(node.parent.relativePath);\n\n        return (\n          <div key={node.id}>\n            <h3>\n              <Link to={slug}>{node.frontmatter?.title}</Link>\n              <span style={{ color: '#bbb' }}>â€” {node.frontmatter && node.frontmatter.date}</span>\n            </h3>\n            <p>{node.excerpt}</p>\n          </div>\n        );\n      })}\n    </Box>\n  );\n} as React.FC<BlogArchiveProps>);\n","import React from 'react';\nimport { graphql, PageProps } from 'gatsby';\n\nimport Box from '@mui/joy/Box';\nimport AppContainer from '../layouts/AppContainer';\nimport BlogArchive, { PostType } from '../components/page/BlogArchive';\n\nexport default function IndexPage({ data }: PageProps<Queries.IndexPageQuery>) {\n  const { title, description } = data.site!.siteMetadata!;\n\n  return (\n    <AppContainer>\n      <Box>\n        <BlogArchive posts={data.allMarkdownRemark!.edges! as unknown as Array<PostType>} />\n      </Box>\n    </AppContainer>\n  );\n}\n\nexport const query = graphql`\n  query IndexPage {\n    allMarkdownRemark(sort: { frontmatter: { date: DESC } }, filter: { frontmatter: { publish: { eq: true } } }) {\n      totalCount\n      edges {\n        node {\n          id\n          excerpt\n          frontmatter {\n            title\n            date(formatString: \"DD MMMM, YYYY\")\n          }\n          parent {\n            ... on File {\n              relativePath\n            }\n          }\n        }\n      }\n    }\n    site {\n      siteMetadata {\n        title\n        description\n      }\n    }\n  }\n`;\n"],"names":["targetExts","posts","React","Box","map","_ref2","node","slug","filename","ext","endsWith","slice","length","removeExtname","parent","relativePath","key","id","Link","to","frontmatter","_node$frontmatter","title","style","color","date","excerpt","IndexPage","data","description","site","siteMetadata","AppContainer","BlogArchive","allMarkdownRemark","edges"],"sourceRoot":""}