{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/problem/cf1336e2/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>给定 $n$ 个整数 $\\langle a_1, a_2 ... a_n \\rangle$，在 $[0; 2^m)$ 的范围内。对于 $k \\in [0; m]$，求选出一个子集使得异或和的二进制表示有 $k$ 个 $1$ 的方案数。</p>\n<p>$1 \\leq n \\leq 2 \\times 10^5,\\ 0 \\leq m \\leq 53$。</p>\n</blockquote>\n<!--more-->\n<h2>0x01</h2>\n<p>定义：</p>\n<ul>\n<li>$\\operatorname{popcount}(x)$ 表示 $x$ 的二进制表示下 $1$ 的个数</li>\n<li>$\\langle i, j \\rangle = \\operatorname{popcount(i\\ &#x26;\\ j)}$</li>\n</ul>\n<p>对于线性基 $S$，定义：</p>\n<ul>\n<li>$\\operatorname{span}(S)$ 表示 $S$ 张成的向量空间</li>\n<li>$F(S) = \\sum_{x \\in \\operatorname{span}(S)} z^x$</li>\n<li>$P(S) = \\sum_{x \\in \\operatorname{span}(S)} z^{\\operatorname{popcount}(x)}$</li>\n</ul>\n<p>对于此题，定义</p>\n<ul>\n<li>$A$ 为由题中给定数得到的线性基</li>\n</ul>\n<p>首先你已经会了一个 $O(2^{\\operatorname{rank}(A)})$ 的暴力，下文我们介绍一种 $O(2^{m-\\operatorname{rank}(A)})$ 的算法，就可以通过分治在 $O(2^{m/2})$ 的时间复杂度内通过本题。</p>\n<h2>0x02</h2>\n<p>由线性基的基本性质，可以得到：</p>\n<p>$$\n(z^x) * F(A) = F(A)\n$$</p>\n<p>在此基础上枚举 $x \\in \\operatorname{span}(A)$ 有</p>\n<p>$$\n\\begin{aligned}\nF(A) * F(A) &#x26;= F(A) \\cdot 2^{\\operatorname{rank}(A)} \\\n\\operatorname{FWT}(F(A)) \\cdot \\operatorname{FWT}(F(A)) &#x26;= \\operatorname{FWT}(F(A)) \\cdot 2^{\\operatorname{rank}(A)}\n\\end{aligned}\n$$</p>\n<p>由于是按位相乘，考虑方程 $x^2=x+1$ 的实根仅有</p>\n<p>$$\n\\left{ \\begin{aligned} x_1 &#x26;= 0 \\ x_2 &#x26;= 2^{\\operatorname{rank}(A)} \\end{aligned} \\right.\n$$</p>\n<p>故 $[z^i] \\operatorname{FWT}(F(A))  \\in {0, 2^{\\operatorname{rank}(A)}}$。</p>\n<h2>0x03</h2>\n<p>让我们再回到 $\\operatorname{FWT}$ 运算本身的意义：</p>\n<p>$$\n\\begin{aligned}\n[z^i] \\operatorname{FWT}(F(A))\n&#x26;= \\sum_{x \\in \\operatorname{span}(A)} (-1)^{\\langle i,x \\rangle} \\\n&#x26;\\in { 0, 2^{\\operatorname{rank}(A)} } \\\n\\end{aligned}\n$$</p>\n<p>如果存在 $x$ 使得 $(-1)^{\\langle i,x \\rangle} = -1$，则 $\\operatorname{FWT}(A)_i$ 只能为 $0$。</p>\n<p>$\\langle x,y \\rangle$ 和 $\\oplus$ 运算满足结合律：</p>\n<p>$$\n\\langle i,x \\rangle \\oplus \\langle j,x \\rangle = \\langle i \\oplus j, x \\rangle\n$$</p>\n<p>可以通过把 $&#x26;$ 理解为二进制按位乘法，$\\oplus$ 理解为二进制不进位加法来证明。</p>\n<p>故我们只需检验 $A$ 中的每个基底而非 $\\operatorname{span}(A)$ 即可判断这一位的值。</p>\n<h2>0x04</h2>\n<p>定义 $A$ 的正交线性基为 $B$，使得对于所有 $x \\in \\operatorname{span}(A), y \\in \\operatorname{span}(B)$，满足 $\\operatorname{popcount(x &#x26; y)}$ 是偶数，且 $\\operatorname{rank}(A) + \\operatorname{rank}(B) = m$。</p>\n<p>根据前面的引理，有</p>\n<p>$$\nB \\cdot 2^{\\operatorname{rank}(A)} = \\operatorname{FWT} (A) \\Leftrightarrow \\operatorname{IFWT}(B \\cdot 2^{\\operatorname{rank}(A)}) = A\n$$</p>\n<p>一种简单的正交线性基构造方式是</p>\n<img src=\"https://i.loli.net/2020/04/26/wKc3le9s8vBzQYr.png\" style=\"margin: auto;\" />\n<p>用高斯消元整理关键位，旋转右上角到左下角得到。</p>\n<img src=\"https://i.loli.net/2020/04/26/QckSaT4BjewVXNE.png\" style=\"margin: auto;\" />\n<p>证明可以考虑图中圈出矩形的左上角和右上角一定为 $1$，而两向量的异或的 $\\operatorname{popcount}$ 为偶数，那么左下角和右上角的数要么全为 $0$，要么全为 $1$。</p>\n<h2>0x05</h2>\n<p>知道了正交线性基怎么求，如何计算答案呢？</p>\n<p>考虑用 $\\operatorname{FWT}$ 表示答案统计：</p>\n<p>$$\n[z^c]P(A) = [z^0] (A * G^c) = [z^0] \\operatorname{IFWT}(\\operatorname{FWT}(F(A)) \\cdot \\operatorname{FWT}(G^c))\n$$</p>\n<p>其中 $G^c$ 表示 $\\sum_{x \\geq 0} z^x [\\operatorname{popcount}(x)=c]$。</p>\n<p>其中：</p>\n<p>$$\n[z^0] \\operatorname{IFWT}(X) = 2^{-m} [z^0] \\operatorname{FWT}(X) = 2^{-m} \\sum_{i \\geq 0} [z^i] X\n$$</p>\n<p>由于 $\\operatorname{FWT}(F(A)) = F(B) \\cdot 2^k$，而 $B$ 中的元素只有 $2^{\\operatorname{rank}(B)} = 2^{m - \\operatorname{rank}(A)}$ 个。故通过暴力得到 $P(B)$，即可通过组合数计算得 $P(A)$。</p>\n<p>$$\n[z^c]P(A) = 2^{k-m} \\sum_{d \\geq 0} [z^d] P(B) \\sum_{i \\geq 0} (-1)^i \\binom d i \\binom {m-d} {c-i}\n$$</p>\n<h2>0x06</h2>\n<p>代码</p>\n<pre><code class=\"language-cpp\">#include&#x3C;bits/stdc++.h>\ntemplate&#x3C;class T> inline void read(T &#x26;x){\n\tx=0; register char c=getchar(); register bool f=0;\n\twhile(!isdigit(c))f^=c=='-',c=getchar();\n\twhile(isdigit(c))x=x*10+c-'0',c=getchar(); if(f)x=-x;\n}\nconst int N=60,mod=998244353;\nint n,m,k,t,c[N];\nlong long f[N],g[N];\nstruct z {\n\tint x;\n\tz(int x=0):x(x){}\n\tfriend inline z operator*(z a,z b){return (long long)a.x*b.x%mod;}\n\tfriend inline z operator-(z a,z b){return (a.x-=b.x)&#x3C;0?a.x+mod:a.x;}\n\tfriend inline z operator+(z a,z b){return (a.x+=b.x)>=mod?a.x-mod:a.x;}\n}p[N],q[N],fac[N],ifac[N];\ninline z C(int n,int m){return n&#x3C;m?0:fac[n]*ifac[m]*ifac[n-m];}\ninline z fpow(z a,int b){z s=1;for(;b;b>>=1,a=a*a)if(b&#x26;1)s=s*a;return s;}\ninline void insert(long long x){for(int i=m-1;i>=0;i--)if((x>>i)&#x26;1){if(f[i])x^=f[i]; else {f[i]=x; return;}}}\nint main(){\n\tread(n),read(m);\n\tfor(int i=1;i&#x3C;=n;i++){long long x; read(x),insert(x);}\n\tfor(int i=0;i&#x3C;m;i++)for(int j=i+1;j&#x3C;m;j++)if((f[j]>>i)&#x26;1)f[j]^=f[i];\n\tfor(int i=0;i&#x3C;m;i++)if(f[i])c[i]=k++;\n\tfor(int i=0;i&#x3C;m;i++)if(!f[i])c[i]=k+(t++);\n\tfor(int i=0;i&#x3C;m;i++)if(f[i])for(int j=0;j&#x3C;m;j++)if((f[i]>>j)&#x26;1)g[c[i]]|=1ll&#x3C;&#x3C;c[j];\n\tfor(int i=0;i&#x3C;k;i++)for(int j=k;j&#x3C;m;j++)if((g[i]>>j)&#x26;1)g[j]|=1ll&#x3C;&#x3C;i;\n\tfor(int i=k;i&#x3C;m;i++)g[i]|=1ll&#x3C;&#x3C;i;\n\tif(k&#x3C;=((m+1)>>1)){\n\t\tstd::function&#x3C;void(int,long long)> dfs=[&#x26;](int i,long long s){\n\t\t\tif(i>=k){p[__builtin_popcountll(s)].x++;return;}\n\t\t\tdfs(i+1,s),dfs(i+1,s^g[i]);\n\t\t};\n\t\tdfs(0,0ll);\n\t}else{\n\t\tstd::function&#x3C;void(int,long long)> dfs=[&#x26;](int i,long long s){\n\t\t\tif(i>=m){q[__builtin_popcountll(s)].x++;return;}\n\t\t\tdfs(i+1,s),dfs(i+1,s^g[i]);\n\t\t};\n\t\tdfs(k,0ll);\n\t\tfac[0]=ifac[0]=ifac[1]=1;\n\t\tfor(int i=1;i&#x3C;=m;i++)fac[i]=fac[i-1]*i;\n\t\tfor(int i=2;i&#x3C;=m;i++)ifac[i]=(mod-mod/i)*ifac[mod%i];\n\t\tfor(int i=1;i&#x3C;=m;i++)ifac[i]=ifac[i-1]*ifac[i];\n\t\tfor(int c=0;c&#x3C;=m;c++)for(int d=0;d&#x3C;=m;d++)for(int i=0;i&#x3C;=c;i++){\n\t\t\tp[c]=p[c]+fpow(2,mod-1+k-m)*q[d]*(i&#x26;1?mod-1:1)*C(d,i)*C(m-d,c-i);\n\t\t}\n\t}\n\tfor(int i=0;i&#x3C;=m;i++)printf(\"%d%c\",(p[i]*fpow(2,n-k)).x,\" \\n\"[i==m]);\n}\n</code></pre>","frontmatter":{"date":"April 26, 2020","title":"「CF1336E2」Chiori and Doll Picking (hard version)","cover":"/cover/1.png"}}},"pageContext":{"id":"64d1157a-9c04-5644-8ced-5ee009687075","slug":"blog/problem/cf1336e2"}},"staticQueryHashes":[],"slicesMap":{}}