{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/problem/hdu6810/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>给定 $n$ 个点的树，定义 $m$ 个人的约会点 $x$ 为使得 $m$ 个人所在的点到 $x$ 的距离之和最小的点。</p>\n<p>$m$ 个人所在位置在 $n$ 个点中随机选择（即总方案数 $\\binom nm$），问所有方案到约会点距离之和的和。</p>\n<p>$n \\leq 10^6$，答案对 $10^9 + 7$ 取模。</p>\n</blockquote>\n<!--more-->\n<h2>题解</h2>\n<p>考虑确定 $m$ 个点后，所有人到某个点的距离和是单调的，也就是说可能称为约会点的点一定是一个联通块。</p>\n<p>我们预处理出所有点到某个点的距离和，因为稍后我们选点时，（某一选点范围内）每个点被选中的概率是均等的。</p>\n<p>「Part1」一个点能够成为约会点当且仅当每棵子树内选的点个数都 $\\leq \\frac m 2$，我们枚举点 $u$ 和其一个子树 $v$，使得 $v$ 内选的点的个数 $> \\frac m 2$（对于一种方案和固定的 $u$，这样的 $v$ 至多只有一个）。贡献形如\n$$\n\\sum_{\\frac m 2 &#x3C; i \\leq m} \\binom {siz_v} {i} \\binom {n - siz_v} {m - i} \\left( \\frac {i} {siz_v} \\cdot (sumsub_v + siz_v) + \\frac {m - i} {n - siz_v} \\cdot (sumall_u - sumsub_v - siz_v)\\right)\n$$\n这个分数可以合到组合数里，也就是瓶颈为\n$$\n\\sum_{\\frac m2 &#x3C; i \\leq m} \\binom si \\binom {n-s} {m-i}\n$$\n这个东西我们考虑组合意义，容易从 $f_s$ 递推到 $f_{s-1}$。</p>\n<p>「Part2」一条边上的两个点能同时成为约会点当且仅当两侧被选中的点的个数都恰为 $\\frac m 2$，这一部分容易直接计算。</p>\n<p>于是点减边就做完了，时间复杂度 $O(n)$。</p>\n<h2>代码</h2>\n<pre><code class=\"language-cpp\">#include&#x3C;bits/stdc++.h>\nconst int S=1&#x3C;&#x3C;21; char ibuf[S],*iS,*iT;\n#define getchar() (iS==iT?(iT=(iS=ibuf)+fread(ibuf,1,S,stdin),(iS==iT?EOF:*iS++)):*iS++)\ntemplate&#x3C;class T> inline void read(T &#x26;x){\n  x=0; register char c=getchar();\n  while(!isdigit(c))c=getchar();\n  while(isdigit(c))x=x*10+c-'0',c=getchar();\n}\ntemplate&#x3C;class T> inline void print(T x){\n  if(x&#x3C;0)putchar('-'),x=-x;\n  if(x>9)print(x/10); putchar(x%10+'0');\n}\ntemplate&#x3C;class T> inline void print(T x,char c){print(x),putchar(c);}\nconst int N=1e6+10,mod=1e9+7;\nint T,n,m,fa[N],siz[N];\nstd::vector&#x3C;int> G[N];\nstruct z{\n  int x;\n  z(int x=0):x(x){}\n  friend inline z operator*(z a,z b){return (long long)a.x*b.x%mod;}\n  friend inline z operator-(z a,z b){return (a.x-=b.x)&#x3C;0?a.x+mod:a.x;}\n  friend inline z operator+(z a,z b){return (a.x+=b.x)>=mod?a.x-mod:a.x;}\n}F0[N],F1[N],fac[N],inv[N],ifac[N],sumall[N],sumsub[N];\ninline z fpow(z a,int b){z s=1;for(;b;b>>=1,a=a*a)if(b&#x26;1)s=s*a;return s;}\ninline z finv(z a){return fpow(a,mod-2);}\ninline z C(int n,int m){return n&#x3C;m?0:fac[n]*ifac[m]*ifac[n-m];}\nstruct atom{int siz; z sum;};\nstd::vector&#x3C;atom> A[N];\nvoid dfs(int u){\n  siz[u]=1;\n  sumsub[u]=0;\n  for(int v:G[u]){\n    fa[v]=u,dfs(v),siz[u]+=siz[v];\n    sumsub[u]=sumsub[u]+sumsub[v]+siz[v];\n  }\n}\nvoid dfs2(int u,z fr){\n  sumall[u]=fr+sumsub[u],fr=fr+n;\n  for(int v:G[u]){\n    fr=fr+sumsub[v]+siz[v];\n  }\n  for(int v:G[u]){\n    dfs2(v,fr-sumsub[v]-siz[v]-siz[v]);\n  }\n}\nvoid sol0(int n,int m,int l,int r,z *F){\n  if(l>m||l>r){\n    memset(F,0,(n+1)&#x3C;&#x3C;2);\n  }else{\n    F[n]=C(n,m);\n    for(int i=n-1;i>=0;i--)F[i]=F[i+1]-C(i,l-1)*C(n-i-1,m-l);\n    for(int j=m+1;j&#x3C;=r;j++)for(int i=0;i&#x3C;=n;i++)F[i]=F[i]+C(i,j)*C(n-i,m-j);\n  }\n}\nz sol1(){\n  z res=0;\n  for(int u=1;u&#x3C;=n;u++){\n    res=res+C(n-1,m-1)*sumall[u];\n    for(auto &#x26;x:A[u]){\n      res=res-F0[x.siz-1]*(x.sum+x.siz)-F1[x.siz]*(sumall[u]-x.sum-x.siz);\n    }\n  }\n  return res;\n}\nz sol2(){\n  if(m&#x26;1)return 0;\n  z res=0;\n  for(int u=1;u&#x3C;=n;u++)\n    for(auto &#x26;x:A[u]){\n      res=res+C(x.siz,m>>1)*C(n-x.siz,m>>1)*(inv[x.siz]*(x.sum+x.siz)+inv[n-x.siz]*(sumall[u]-x.sum-x.siz));\n    }\n  return res*(m>>1)*finv(2);\n}\nint main(){\n#ifdef memset0\n  freopen(\"2.in\",\"r\",stdin);\n#endif\n  fac[0]=ifac[0]=inv[0]=inv[1]=1;\n  for(int i=1;i&#x3C;N;i++)fac[i]=fac[i-1]*i;\n  for(int i=2;i&#x3C;N;i++)inv[i]=(mod-mod/i)*inv[mod%i];\n  for(int i=1;i&#x3C;N;i++)ifac[i]=ifac[i-1]*inv[i];\n  for(read(T);T--;){\n    read(n),read(m);\n    for(int i=1;i&#x3C;=n;i++)G[i].clear(),A[i].clear();\n    for(int fa,i=2;i&#x3C;=n;i++){\n      read(fa);\n      G[fa].push_back(i);\n    }\n    dfs(1);\n    dfs2(1,0);\n    for(int u=1;u&#x3C;=n;u++){\n      for(int v:G[u])A[u].push_back({siz[v],sumsub[v]});\n      A[u].push_back({n-siz[u],sumall[fa[u]]-sumsub[u]-siz[u]});\n    }\n    int l=(m>>1)+1;\n    sol0(n-1,m-1,l-1,m-1,F0);\n    sol0(n-1,m-1,l,m,F1);\n    printf(\"%d\\n\",(sol1()-sol2()).x);\n  }\n}\n</code></pre>","frontmatter":{"date":"July 30, 2020","title":"「HDU6810」Imperative Meeting","cover":"/cover/33.webp"}}},"pageContext":{"id":"c54714f3-96ed-51bf-8f96-37707d7ce9c1","slug":"blog/problem/hdu6810"}},"staticQueryHashes":[],"slicesMap":{}}