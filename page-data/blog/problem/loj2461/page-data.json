{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/problem/loj2461/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>你有 $n$ 个队列，每个队列有 $a_i$ 的容量。</p>\n<p>$Q$ 次操作，每次给定队列的区间 $[l,r]$，push 一个 $x$。如果第 $i$ 个队列的元素个数 $>a_i$，会自动 pop。</p>\n<p>要求每次操作后求出所有序列中本质不同的元素个数。</p>\n<p>$n,m,a_i,x \\leq 10^5$。</p>\n</blockquote>\n<!--more-->\n<h2>题解</h2>\n<p>建出线段树，那么一个区间操作 $[l,r]$ 能恰好覆盖 $O(\\log n)$ 条线段。对于每条线段，考虑统计操作加入的点何时被完全移出该区间。</p>\n<p>由于我们只把完全覆盖该线段的操作丢入改线段处理，那么操作的进入和弹出符合单调队列的性质，我们通过一条线段维护。每次对线段进行修改后，我们不断判断并弹出队列头即可保证复杂度。</p>\n<p>那么如何判断呢，考虑一个操作插入一条线段 $[l;r]$ 时，初始的限制是形如这一段 $a_{l\\ldots r}$。进行别的操作经过这条线段时就是把限制的区间或整体 $-1$。如果限制全部 $\\leq 0$，这次操作添加的所有元素被完全弹出改线段对应的队列中。</p>\n<p>显然对于每一个（操作，线段）二元组开线段树维护限制，注意到前面说的单调队列性质，一个操作在固定线段上，影响限制的操作可以看做是经过该线段所形成的操作序列的一个区间。我们对线段开线段树（哎妈呀真绕），刚说的操作序列区间的左右端点都是单调增的，维护较为平凡。</p>\n<p>还有个复杂度上的小问题，对于每次操作，恰好覆盖一条线段的时候我们就 return 了，而对于该线段树节点的子树内单调队列，可能是有贡献的。需要维护单调队列距离下次弹出需要的懒标记个数，也是较为平凡的。</p>\n<h2>代码</h2>\n<pre><code class=\"language-cpp\">// n log^2 n solution\n#include&#x3C;bits/stdc++.h>\ntemplate&#x3C;class T> inline void read(T &#x26;x){\n  x=0; char c=getchar(); bool f=0;\n  while(!isdigit(c))f^=c=='-',c=getchar();\n  while(isdigit(c))x=x*10+c-'0',c=getchar(); if(f)x=-x;\n}\nconst int N=1e5+10;\nint n,m,nod,ans,a[N],col[N];\nnamespace SEG{\n  const int M=N*40;\n  int nod,lc[M],rc[M],max[M],tag[M];\n  inline void up(int u,int x){max[u]+=x,tag[u]+=x;}\n  inline void down(int u){if(tag[u])up(lc[u],tag[u]),up(rc[u],tag[u]),tag[u]=0;}\n  void build(int &#x26;u,int l,int r){\n    u=++nod;\n    if(l==r){max[u]=a[l]; return;}\n    int mid=(l+r)>>1;\n    build(lc[u],l,mid);\n    build(rc[u],mid+1,r);\n    max[u]=std::max(max[lc[u]],max[rc[u]]);\n  }\n  void modify(int u,int ql,int qr,int x,int l,int r){\n    down(u);\n    if(ql==l&#x26;&#x26;qr==r){up(u,x); return;}\n    int mid=(l+r)>>1;\n    if(qr&#x3C;=mid)modify(lc[u],ql,qr,x,l,mid);\n    else if(ql>mid)modify(rc[u],ql,qr,x,mid+1,r);\n    else modify(lc[u],ql,mid,x,l,mid),modify(rc[u],mid+1,qr,x,mid+1,r);\n    max[u]=std::max(max[lc[u]],max[rc[u]]);\n  }\n}\nstruct node{\n  int l,r,mid,rt,d,k,tag,lc,rc;\n  std::pair&#x3C;int,int> todo,item;\n  std::queue&#x3C;std::tuple&#x3C;int,int,int>> q;\n  std::vector&#x3C;std::pair&#x3C;int,int>> opt;\n}p[N&#x3C;&#x3C;1];\ninline void pushup(int u,int x){\n  p[u].d+=x,p[u].tag+=x,p[u].todo.first-=x;\n}\ninline void pushdown(int u){\n  if(p[u].tag&#x26;&#x26;p[u].l!=p[u].r){\n    pushup(p[u].lc,p[u].tag);\n    pushup(p[u].rc,p[u].tag);\n    p[u].tag=0;\n  }\n}\ninline void maintain(int u){\n  p[u].todo=p[u].item;\n  if(p[u].l!=p[u].r){\n    pushdown(u);\n    if(p[p[u].lc].todo.first&#x3C;p[u].todo.first)p[u].todo=p[p[u].lc].todo;\n    if(p[p[u].rc].todo.first&#x3C;p[u].todo.first)p[u].todo=p[p[u].rc].todo;\n  }\n}\nint build(int l,int r){\n  int u=++nod;\n  p[u].l=l,p[u].r=r,p[u].mid=(l+r)>>1;\n  SEG::build(p[u].rt,l,r);\n  p[u].item=p[u].todo={114514,u};\n  if(l!=r){\n    p[u].lc=build(l,p[u].mid);\n    p[u].rc=build(p[u].mid+1,r);\n  }\n  return u;\n}\nvoid update(int u){\n  static int c,k,d,l,r;\n  // printf(\"update %d [%d %d]\\n\",u,p[u].l,p[u].r);\n  while(p[u].q.size()){\n    std::tie(c,k,d)=p[u].q.front();\n    while(p[u].k&#x3C;k){\n      std::tie(l,r)=p[u].opt[p[u].k++];\n      SEG::modify(p[u].rt,l,r,1,p[u].l,p[u].r);\n    }\n    // printf(\"%d [%d %d] c=%d k=%d d=%d => [%d %d]\\n\",u,p[u].l,p[u].r,c,k,d,p[u].d-d,SEG::max[p[u].rt]);\n    if(p[u].d-d>=SEG::max[p[u].rt]){\n      col[c]--,ans-=!col[c];\n      p[u].q.pop();\n    }else{\n      p[u].item={SEG::max[p[u].rt]+d-p[u].d,u};\n      maintain(u);\n      return;\n    }\n  }\n  p[u].item={114514,u};\n  maintain(u);\n}\nvoid modify(int u,int l,int r,int c){\n  // printf(\"modify %d %d %d %d\\n\",u,l,r,c);\n  if(p[u].l==l&#x26;&#x26;p[u].r==r){\n    ans+=!col[c],col[c]++;\n    pushup(u,1);\n    p[u].q.push({c,(int)p[u].opt.size(),p[u].d});\n  }else{\n    pushdown(u);\n    p[u].opt.push_back({l,r});\n    SEG::modify(p[u].rt,l,r,-1,p[u].l,p[u].r);\n    if(r&#x3C;=p[u].mid)modify(p[u].lc,l,r,c);\n    else if(l>p[u].mid)modify(p[u].rc,l,r,c);\n    else modify(p[u].lc,l,p[u].mid,c),modify(p[u].rc,p[u].mid+1,r,c);\n    maintain(u);\n  }\n  update(u);\n  // printf(\"end modify %d todo=[%d %d,%d]\\n\",u,p[u].todo.first,p[p[u].todo.second].l,p[p[u].todo.second].r);\n}\nvoid resolve(int u,int v){\n  // printf(\"resolve %d %d\\n\",u,v);\n  pushdown(u);\n  if(u==v){\n    update(u);\n    return;\n  }\n  resolve(p[v].r&#x3C;=p[u].mid?p[u].lc:p[u].rc,v);\n  update(u);\n  maintain(u);\n  // printf(\"end resolve todo=[%d %d,%d]\\n\",p[u].todo.first,p[p[u].todo.second].l,p[p[u].todo.second].r);\n}\nint main(){\n#ifdef memset0\n  freopen(\"2.in\",\"r\",stdin);\n#endif\n  read(n),read(m);\n  for(int i=1;i&#x3C;=n;i++)read(a[i]);\n  build(1,n);\n  for(int i=1,l,r,x;i&#x3C;=m;i++){\n    read(l),read(r),read(x);\n    modify(1,l,r,x);\n    while(!p[1].todo.first)resolve(1,p[1].todo.second);\n    printf(\"%d\\n\",ans);\n  }\n}\n</code></pre>","frontmatter":{"date":"August 08, 2020","title":"「集训队互测2018」完美的队列","cover":"/cover/18.webp"}}},"pageContext":{"id":"9f584c00-abb0-5771-90ff-1019dd67e2aa","slug":"blog/problem/loj2461"}},"staticQueryHashes":[],"slicesMap":{}}