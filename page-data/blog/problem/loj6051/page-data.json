{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/problem/loj6051/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>给定 $ n $ 和 $ {a_i} $，满足 $ a_0 \\geq a_1 \\geq \\cdots \\geq a_{n - 1} \\geq 0 $，求出在 $ n $ 维空间中从 $ (0, 0, \\ldots, 0) $ 走到 $ (a_0, a_1, \\ldots, a_{n - 1}) $，每一步使某一维坐标增加 $ 1 $ 的方案中随机选出一种，满足经过的所有点 $ (x_0, x_1, \\ldots, x_{n - 1}) $ 都满足 $ x_0 \\geq x_1 \\geq \\cdots \\geq x_{n - 1} $ 的概率，答案模 $ 1004535809 $ 输出。</p>\n<p>$n, a_i \\leq 5\\times 10^5$。</p>\n</blockquote>\n<!--more-->\n<h2>题解</h2>\n<p>利用钩子定理相关知识我们可以直接得到</p>\n<p>$$\nans = \\frac { \\displaystyle \\frac {m!} { \\prod\\limits_{(i, j) \\in \\lambda} h(i, j)}} { \\displaystyle \\frac {m!} {\\prod\\limits_{i=1}^n a_i} }\n$$</p>\n<p>其中 $m = \\sum\\limits_{i=1}^n a_i$，$\\lambda$ 是第 $i$ 行长度为 $a_i$ 的杨表，$h_\\lambda(i, j)$ 表示杨表 $\\lambda$ 中第 $i$ 行第 $j$ 个元素的钩子长度。</p>\n<p>根据</p>\n<p>$$\n\\prod\\limits_{(i, j) \\in \\lambda} h_\\lambda(i, j)\n= \\frac { \\prod\\limits_{i=1}^n (a_i + n - i)! } { \\prod\\limits_{1 \\leq i &#x3C; j \\leq n} \\left((a_i - i) - (a_j - j)\\right)}\n$$</p>\n<p>那么</p>\n<p>$$\n\\begin{aligned}\nans\n&#x26;= \\frac { \\displaystyle \\frac {m! \\prod\\limits_{1 \\leq i &#x3C; j \\leq n} \\left((a_i - i) - (a_j - j)\\right)} { \\prod\\limits_{i=1}^n (a_i + n - i)! }} { \\displaystyle \\frac {m!} {\\prod\\limits_{i=1}^n a_i} } \\\n&#x26;= \\frac { \\prod\\limits_{i=1}^n a_i} { \\prod\\limits_{i=1}^n (a_i + n - i)! } \\times \\prod\\limits_{1 \\leq i &#x3C; j \\leq n} \\left((a_i - i) - (a_j - j)\\right)\n\\end{aligned}\n$$</p>\n<p>发现处理的瓶颈在于右半部分。</p>\n<p>注意到 ${a_i}_{i=1}^n$ 为仅为 $O(n)$ 级别。并且由于 $\\forall i &#x3C; j ,; a_i \\geq a_j$ ，可得 $\\forall i &#x3C; j, (a_i - i) > (a_j - j)$ 。考虑卷积优化。</p>\n<p>可以开两个多项式，一个幂次为 $(a_i - i)$ 一个幂次为 $-(a_i - i)$ ，卷积一波只取幂次为整数的即可。（如果由 $i \\geq j$ 的贡献而成，一定满足幂次 $\\leq 0$）。</p>\n<p>时间复杂度 $O(n \\log n)$ 。</p>\n<!--more-->\n<h2>代码</h2>\n<pre><code class=\"language-cpp\">// =================================\n//   author: memset0\n//   date: 2019.07.20 18:22:18\n//   website: https://memset0.cn/\n// =================================\n#include &#x3C;bits/stdc++.h>\n#define ll long long\n#define rep(i, l, r) for (int i = (l), i##ed = (r); i &#x3C;= i##ed; ++i)\n#define for_each(i, a) for (size_t i = 0, i##ed = a.size(); i &#x3C; i##ed; ++i)\nnamespace ringo {\n\ntemplate &#x3C;class T> inline void read(T &#x26;x) {\n\tx = 0; char c = getchar(); bool f = 0;\n\twhile (!isdigit(c)) f ^= c == '-', c = getchar();\n\twhile (isdigit(c)) x = x * 10 + c - '0', c = getchar();\n\tif (f) x = -x;\n}\ntemplate &#x3C;class T> inline void print(T x) {\n\tif (x &#x3C; 0) putchar('-'), x = -x;\n\tif (x > 9) print(x / 10);\n\tputchar('0' + x % 10);\n}\ntemplate &#x3C;class T> inline void print(T x, char c) { print(x), putchar(c); }\ntemplate &#x3C;class T> inline void print(T a, int l, int r, std::string s = \"\") {\n\tif (s != \"\") std::cout &#x3C;&#x3C; s &#x3C;&#x3C; \": \";\n\tfor (int i = l; i &#x3C;= r; i++) print(a[i], \" \\n\"[i == r]);\n}\n\nconst int N = 4e6 + 10, mod = 1004535809;\nint n, l, tn, tm, ans = 1;\nint a[N], f[N], g[N], h[N], w[N], rev[N], fac[N], ifac[N];\n\nvoid setup(int *a, int &#x26;l, int n) { ++a[n], l = std::max(l, n); }\ninline int dec(int a, int b) { a -= b; return a &#x3C; 0 ? a + mod : a; }\ninline int inc(int a, int b) { a += b; return a >= mod ? a - mod : a; }\ninline int mul(int a, int b) { return (ll)a * b - (ll)a * b / mod * mod; }\ninline int inv(int x) { return x &#x3C; 2 ? 1 : mul(mod - mod / x, inv(mod % x)); }\ninline int fpow(int a, int b) { int s = 1; for (; b; b >>= 1, a = mul(a, a)) if (b &#x26; 1) s = mul(s, a); return s; }\n\nvoid init_fac(int n) {\n\tfac[0] = fac[1] = ifac[0] = ifac[1] = 1;\n\tfor (int i = 2; i &#x3C;= n; i++) fac[i] = mul(fac[i - 1], i);\n\tfor (int i = 2; i &#x3C;= n; i++) ifac[i] = mul(mod - mod / i, ifac[mod % i]);\n\tfor (int i = 2; i &#x3C;= n; i++) ifac[i] = mul(ifac[i - 1], ifac[i]);\n}\n\nvoid ntt(int *a, int l) {\n\tfor (int i = 0; i &#x3C; l; i++) if (i &#x3C; rev[i]) std::swap(a[i], a[rev[i]]);\n\tfor (int len = 1; len &#x3C; l; len &#x3C;&#x3C;= 1)\n\t\tfor (int i = 0; i &#x3C; l; i += (len &#x3C;&#x3C; 1))\n\t\t\tfor (int j = 0; j &#x3C; len; j++) {\n\t\t\t\tint x = a[i + j], y = mul(a[i + j + len], w[j + len]);\n\t\t\t\ta[i + j] = inc(x, y), a[i + j + len] = dec(x, y);\n\t\t\t}\n}\n\nvoid mul(int *a, int *b, int *c, int n, int m, int &#x26;l) {\n\tl = 1; int k = 0; while (l &#x3C; n + m - 1) l &#x3C;&#x3C;= 1, ++k;\n\tfor (int i = 0; i &#x3C; l; i++) rev[i] = (rev[i >> 1] >> 1) | ((i &#x26; 1) &#x3C;&#x3C; (k - 1));\n\tfor (int wn, len = 1; len &#x3C; l; len &#x3C;&#x3C;= 1) {\n\t\twn = fpow(3, (mod - 1) / (len &#x3C;&#x3C; 1)), w[len] = 1;\n\t\tfor (int i = 1; i &#x3C; len; i++) w[i + len] = mul(w[i + len - 1], wn);\n\t} int inv_l = inv(l);\n\tntt(a, l), ntt(b, l);\n\tfor (int i = 0; i &#x3C; l; i++) c[i] = mul(a[i], b[i]);\n\tstd::reverse(c + 1, c + l), ntt(c, l);\n\tfor (int i = 0; i &#x3C; l; i++) c[i] = mul(c[i], inv_l);\n}\n\nvoid main() {\n\tread(n);\n\tfor (int i = 1; i &#x3C;= n; i++) read(a[i]);\n\tinit_fac(n + a[1]);\n\tfor (int i = 1; i &#x3C;= n; i++) {\n\t\tans = mul(ans, mul(fac[a[i]], ifac[a[i] + n - i]));\n\t\tsetup(f, tn, a[i] - i + n);\n\t\tsetup(g, tm, -a[i] + i + a[1]);\n\t\t// printf(\"%d &#x3C;&#x3C; %d %d : %d %d\\n\", ans, a[i], a[i] + n - i, fac[a[i]], mul(ifac[a[i] + n - i], fac[a[i] + n - i]));\n\t}\n\tmul(f, g, h, tn + 1, tm + 1, l);\n\tfor (int i = 1, d = n + a[1]; i + d &#x3C; l; i++) {\n\t\t// if (h[i + d]) printf(\"%d %d : %d\\n\", i, i + d, h[i + d]);\n\t\tans = mul(ans, fpow(i, h[i + d]));\n\t}\n\tprint(ans, '\\n');\n}\n\n} signed main() {\n#ifdef memset0\n\tfreopen(\"1.in\", \"r\", stdin);\n#endif\n\treturn ringo::main(), 0;\n}\n</code></pre>","frontmatter":{"date":"July 20, 2019","title":"「雅礼集训2017」PATH","cover":"/cover/7.png"}}},"pageContext":{"id":"77314719-2d15-56fc-bc6e-c174b20c69a5","slug":"blog/problem/loj6051"}},"staticQueryHashes":[],"slicesMap":{}}