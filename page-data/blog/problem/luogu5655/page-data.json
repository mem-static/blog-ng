{"componentChunkName":"component---src-templates-blog-post-tsx","path":"/blog/problem/luogu5655/","result":{"data":{"markdownRemark":{"html":"<blockquote>\n<p>给定一个长度为 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span> 的数组 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><msub><mi>a</mi><mi>i</mi></msub><msubsup><mo stretchy=\"false\">}</mo><mrow><mi>i</mi><mo>=</mo><mn>1</mn></mrow><mi>n</mi></msubsup></mrow><annotation encoding=\"application/x-tex\">\\{a_i\\}_{i=1}^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0087em;vertical-align:-0.2587em;\"></span><span class=\"mopen\">{</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">}</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-2.4413em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mtight\">1</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">n</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2587em;\"><span></span></span></span></span></span></span></span></span></span></span>，<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>Q</mi></mrow><annotation encoding=\"application/x-tex\">Q</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">Q</span></span></span></span></span> 次询问，每次给定 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi></mrow><annotation encoding=\"application/x-tex\">l</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span></span></span></span></span> 和 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>r</mi></mrow><annotation encoding=\"application/x-tex\">r</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span></span></span></span></span> 查询 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi mathvariant=\"normal\">lcm</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><mo stretchy=\"false\">{</mo><msub><mi>a</mi><mi>i</mi></msub><msubsup><mo stretchy=\"false\">}</mo><mrow><mi>i</mi><mo>=</mo><mi>l</mi></mrow><mi>r</mi></msubsup><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\operatorname{lcm}(\\{a_i\\}_{i=l}^r)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0331em;vertical-align:-0.2831em;\"></span><span class=\"mop\"><span class=\"mord mathrm\">lcm</span></span><span class=\"mopen\">({</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mclose\"><span class=\"mclose\">}</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.6644em;\"><span style=\"top:-2.4169em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mathnormal mtight\">i</span><span class=\"mrel mtight\">=</span><span class=\"mord mathnormal mtight\" style=\"margin-right:0.01968em;\">l</span></span></span></span><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.02778em;\">r</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2831em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span>，答案对 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><msup><mn>0</mn><mn>9</mn></msup><mo>+</mo><mn>7</mn></mrow><annotation encoding=\"application/x-tex\">10^9+7</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8974em;vertical-align:-0.0833em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">9</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">7</span></span></span></span></span> 取模。</p>\n<p><strong>多组数据</strong>，<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi><mo separator=\"true\">,</mo><mi>n</mi><mo separator=\"true\">,</mo><mi>Q</mi><mo>≤</mo><mn>300</mn><mo separator=\"true\">,</mo><mtext> </mtext><msub><mi>a</mi><mi>i</mi></msub><mo>≤</mo><mn>1</mn><msup><mn>0</mn><mn>18</mn></msup></mrow><annotation encoding=\"application/x-tex\">T,n,Q \\leq 300,\\ a_i \\leq 10^{18}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">Q</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8389em;vertical-align:-0.1944em;\"></span><span class=\"mord\">300</span><span class=\"mpunct\">,</span><span class=\"mspace\"> </span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">18</span></span></span></span></span></span></span></span></span></span></span></span></span>。</p>\n</blockquote>\n<!--more-->\n<h2>题解</h2>\n<p>把 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>&#x3C;</mo><mn>1</mn><msup><mn>0</mn><mn>4.5</mn></msup></mrow><annotation encoding=\"application/x-tex\">&#x3C; 10^{4.5}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5782em;vertical-align:-0.0391em;\"></span><span class=\"mrel\">&#x3C;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4.5</span></span></span></span></span></span></span></span></span></span></span></span></span> 的质数分开来处理，这样剩余每个数至多剩余 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span></span> 个不同的质因子。考虑我们不需把每个数分解质因数，只需要能够构造一个等价的质数集合即可。构造方法如下：</p>\n<p>对于所有 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn><mo>≤</mo><mi>i</mi><mo>&#x3C;</mo><mi>j</mi><mo>≤</mo><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">1 \\leq i &#x3C; j \\leq n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7804em;vertical-align:-0.136em;\"></span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6986em;vertical-align:-0.0391em;\"></span><span class=\"mord mathnormal\">i</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">&#x3C;</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.854em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05724em;\">j</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span>，将 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>gcd</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>j</mi></msub><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>i</mi></msub><mi mathvariant=\"normal\">/</mi><mi>gcd</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>j</mi></msub><mo stretchy=\"false\">)</mo><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>j</mi></msub><mi mathvariant=\"normal\">/</mi><mi>gcd</mi><mo>⁡</mo><mo stretchy=\"false\">(</mo><msub><mi>a</mi><mi>i</mi></msub><mo separator=\"true\">,</mo><msub><mi>a</mi><mi>j</mi></msub><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">\\gcd(a_i, a_j), a_i / \\gcd(a_i, a_j), a_j / \\gcd(a_i, a_j)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0361em;vertical-align:-0.2861em;\"></span><span class=\"mop\"><span style=\"margin-right:0.01389em;\">g</span>cd</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span style=\"margin-right:0.01389em;\">g</span>cd</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mord\">/</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\"><span style=\"margin-right:0.01389em;\">g</span>cd</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.05724em;\">j</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span> 加入到集合 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span></span> 中。将其中存在 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>S</mi></mrow><annotation encoding=\"application/x-tex\">S</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span></span></span></span></span> 中的数作为因数的数删掉，剩下的集合就是一个合法的质数集合。</p>\n<p>接下来的一个朴素做法是莫队，需要一些精妙的实现使得那个 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>log</mi><mo>⁡</mo></mrow><annotation encoding=\"application/x-tex\">\\log</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span></span></span></span></span> 是加上去的而不是乘上去的。</p>\n<ol>\n<li>会用到质数的快速幂，这个可以预处理</li>\n<li>相当于对于每个质数维护一个出现次数集合，支持加减和查询最大的出现次数。首先维护一个桶来去重，然后开一个 long long，并每次查询最高的 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></span> 出现的位置。</li>\n</ol>\n<p>时间复杂度近似于 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msup><mi>n</mi><mn>3</mn></msup><mi>log</mi><mo>⁡</mo><mi>n</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n^3 \\log n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0641em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord\"><span class=\"mord mathnormal\">n</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">3</span></span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mclose\">)</span></span></span></span></span>，需要一些精细的实现。</p>\n<h2>代码</h2>\n<p>一度 TLE，后来被 zx2003 哥哥卡了半天卡进去了。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-cpp line-numbers\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ll</span> <span class=\"token expression\"><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">ull</span> <span class=\"token expression\"><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">pair</span> <span class=\"token expression\">std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N<span class=\"token operator\">=</span><span class=\"token number\">310</span><span class=\"token punctuation\">,</span>M<span class=\"token operator\">=</span><span class=\"token number\">32000</span><span class=\"token punctuation\">,</span>L<span class=\"token operator\">=</span><span class=\"token number\">5000</span><span class=\"token punctuation\">,</span>mod<span class=\"token operator\">=</span><span class=\"token number\">1e9</span><span class=\"token operator\">+</span><span class=\"token number\">7</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">namespace</span> io <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> SIZE <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">21</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">char</span> ibuf<span class=\"token punctuation\">[</span>SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>iS<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>iT<span class=\"token punctuation\">,</span> obuf<span class=\"token punctuation\">[</span>SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>oS <span class=\"token operator\">=</span> obuf<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>oT <span class=\"token operator\">=</span> oS <span class=\"token operator\">+</span> SIZE <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">,</span> qu<span class=\"token punctuation\">[</span><span class=\"token number\">55</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">int</span> f<span class=\"token punctuation\">,</span> qr<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// getchar</span>\n\t<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">gc</span><span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>iS <span class=\"token operator\">==</span> iT <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>iT <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>iS <span class=\"token operator\">=</span> ibuf<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">fread</span> <span class=\"token punctuation\">(</span>ibuf<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> SIZE<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>iS <span class=\"token operator\">==</span> iT <span class=\"token operator\">?</span> <span class=\"token constant\">EOF</span> <span class=\"token operator\">:</span> <span class=\"token operator\">*</span>iS <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token operator\">*</span>iS <span class=\"token operator\">++</span><span class=\"token punctuation\">)</span></span></span>\n\t<span class=\"token comment\">// print the remaining part</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">flush</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">fwrite</span> <span class=\"token punctuation\">(</span>obuf<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> oS <span class=\"token operator\">-</span> obuf<span class=\"token punctuation\">,</span> <span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\toS <span class=\"token operator\">=</span> obuf<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// putchar</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">putc</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token operator\">*</span>oS <span class=\"token operator\">++</span> <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oS <span class=\"token operator\">==</span> oT<span class=\"token punctuation\">)</span> <span class=\"token function\">flush</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// input a signed integer</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">char</span> <span class=\"token function\">gch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span><span class=\"token function\">gc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token function\">isspace</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>c<span class=\"token operator\">=</span><span class=\"token function\">gc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> c<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">gs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">char</span> x<span class=\"token operator\">=</span><span class=\"token function\">gc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token function\">isspace</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>x<span class=\"token operator\">=</span><span class=\"token function\">gc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token operator\">!</span><span class=\"token function\">isspace</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>x<span class=\"token operator\">=</span><span class=\"token function\">gc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>c<span class=\"token operator\">++</span><span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span><span class=\"token operator\">*</span>c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">I</span><span class=\"token operator\">></span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">gi</span> <span class=\"token punctuation\">(</span>I <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>f <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> c <span class=\"token operator\">=</span> <span class=\"token function\">gc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> c <span class=\"token operator\">&lt;</span> <span class=\"token char\">'0'</span> <span class=\"token operator\">||</span> c <span class=\"token operator\">></span> <span class=\"token char\">'9'</span><span class=\"token punctuation\">;</span> c <span class=\"token operator\">=</span> <span class=\"token function\">gc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> <span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span> f <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> c <span class=\"token operator\">&lt;=</span> <span class=\"token char\">'9'</span> <span class=\"token operator\">&amp;&amp;</span> c <span class=\"token operator\">>=</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">;</span> c <span class=\"token operator\">=</span> <span class=\"token function\">gc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> x <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">&amp;</span> <span class=\"token number\">15</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> x <span class=\"token operator\">*=</span> f<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// print a signed integer</span>\n\t<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">I</span><span class=\"token operator\">></span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span> <span class=\"token punctuation\">(</span>I x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>x<span class=\"token punctuation\">)</span> <span class=\"token function\">putc</span> <span class=\"token punctuation\">(</span><span class=\"token char\">'0'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>x <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">putc</span> <span class=\"token punctuation\">(</span><span class=\"token char\">'-'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> x <span class=\"token operator\">=</span> <span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span> qu<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span> qr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> x <span class=\"token operator\">%</span> <span class=\"token number\">10</span> <span class=\"token operator\">+</span> <span class=\"token char\">'0'</span><span class=\"token punctuation\">,</span>  x <span class=\"token operator\">/=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>qr<span class=\"token punctuation\">)</span> <span class=\"token function\">putc</span> <span class=\"token punctuation\">(</span>qu<span class=\"token punctuation\">[</span>qr <span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//no need to call flush at the end manually!</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Flusher_</span> <span class=\"token punctuation\">{</span><span class=\"token operator\">~</span><span class=\"token function\">Flusher_</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>io_flusher_<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">ExactDiv</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token function\">ExactDiv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n  <span class=\"token function\">ExactDiv</span><span class=\"token punctuation\">(</span>ull n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  \t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>z<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>z<span class=\"token punctuation\">,</span>n<span class=\"token operator\">>>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \tt<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ull<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> n<span class=\"token punctuation\">;</span>\n\ti<span class=\"token operator\">=</span><span class=\"token function\">mul_inv</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  ull <span class=\"token function\">mul_inv</span><span class=\"token punctuation\">(</span>ull n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    ull x <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> x <span class=\"token operator\">*=</span> <span class=\"token number\">2</span> <span class=\"token operator\">-</span> n <span class=\"token operator\">*</span> x<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ull<span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">>></span>z<span class=\"token operator\">&lt;&lt;</span>z<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>n<span class=\"token operator\">>></span>z<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>i<span class=\"token operator\">&lt;=</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>t<span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">ck</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> ll<span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  \t<span class=\"token keyword\">return</span> n<span class=\"token operator\">>=</span><span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  ull t<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span>z<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>ediv<span class=\"token punctuation\">[</span>M<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>el<span class=\"token punctuation\">[</span>L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> T<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>tl<span class=\"token punctuation\">,</span>pc<span class=\"token punctuation\">,</span>sqn<span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">[</span>L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>vis<span class=\"token punctuation\">[</span>M<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>bln<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>pri<span class=\"token punctuation\">[</span>M<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>ll a<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ls<span class=\"token punctuation\">[</span>L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>pw<span class=\"token punctuation\">[</span>L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">65</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>ipw<span class=\"token punctuation\">[</span>L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">65</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>ll<span class=\"token operator\">></span> fac<span class=\"token punctuation\">;</span>\nstd<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">></span> v<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> Z<span class=\"token operator\">=</span><span class=\"token number\">1005</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> gg<span class=\"token punctuation\">[</span>Z<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>Z<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> C<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> T <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>T x<span class=\"token punctuation\">,</span>T y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token operator\">++</span>C<span class=\"token punctuation\">;</span><span class=\"token keyword\">return</span> x<span class=\"token operator\">&lt;</span>Z <span class=\"token operator\">&amp;&amp;</span> y<span class=\"token operator\">&lt;</span>Z<span class=\"token operator\">?</span>gg<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>y<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">?</span><span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span>x<span class=\"token operator\">%</span>y<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">query</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>id<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">&lt;</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> query <span class=\"token operator\">&amp;</span>other<span class=\"token punctuation\">)</span><span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> bln<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>bln<span class=\"token punctuation\">[</span>other<span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">?</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">&lt;</span>other<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token punctuation\">(</span>bln<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>l<span class=\"token operator\">&lt;</span>other<span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">;</span>\n<span class=\"token comment\">//\t\treturn bln[l]==bln[other.l]?r&lt;other.r:l&lt;other.l;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>q<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">fpow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> s<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>b<span class=\"token punctuation\">;</span>b<span class=\"token operator\">>>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ll<span class=\"token punctuation\">)</span>a<span class=\"token operator\">*</span>a<span class=\"token operator\">%</span>mod<span class=\"token punctuation\">)</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>s<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>ll<span class=\"token punctuation\">)</span>s<span class=\"token operator\">*</span>a<span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> buc<span class=\"token punctuation\">[</span>L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">65</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>mx<span class=\"token punctuation\">[</span>L<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> tot<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>zcnt<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>vet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it<span class=\"token operator\">:</span>vet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\t\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>tot<span class=\"token operator\">=</span>tot<span class=\"token operator\">*</span>ipw<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>mx<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">else</span> <span class=\"token operator\">--</span>zcnt<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token operator\">++</span>buc<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tmx<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>it<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\t\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>tot<span class=\"token operator\">=</span>tot<span class=\"token operator\">*</span>pw<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>mx<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">else</span> <span class=\"token operator\">++</span>zcnt<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">del</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>pair<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>vet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> it<span class=\"token operator\">:</span>vet<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\t\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>tot<span class=\"token operator\">=</span>tot<span class=\"token operator\">*</span>ipw<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>mx<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">else</span> <span class=\"token operator\">--</span>zcnt<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token operator\">--</span>buc<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>p<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>mx<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>buc<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>mx<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token operator\">--</span>mx<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mx<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\t\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>tot<span class=\"token operator\">=</span>tot<span class=\"token operator\">*</span>pw<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>mx<span class=\"token punctuation\">[</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">else</span> <span class=\"token operator\">++</span>zcnt<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> ll <span class=\"token function\">fpow2</span><span class=\"token punctuation\">(</span>ll x<span class=\"token punctuation\">,</span>ll y<span class=\"token punctuation\">,</span>ll mo<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\tll ans<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>y<span class=\"token punctuation\">;</span>y<span class=\"token operator\">>>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>x<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>__int128<span class=\"token punctuation\">)</span>x<span class=\"token operator\">*</span>x<span class=\"token operator\">%</span>mo<span class=\"token punctuation\">)</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>y<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>ans<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>__int128<span class=\"token punctuation\">)</span>x<span class=\"token operator\">*</span>x<span class=\"token operator\">%</span>mo<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> ans<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">ck</span><span class=\"token punctuation\">(</span>ll x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>pri<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">fpow2</span><span class=\"token punctuation\">(</span>pri<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>x<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">hmp</span><span class=\"token punctuation\">{</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> mo<span class=\"token operator\">=</span><span class=\"token number\">1999</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> h<span class=\"token punctuation\">[</span>mo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>nxt<span class=\"token punctuation\">[</span>mo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>xb<span class=\"token punctuation\">;</span>ll v<span class=\"token punctuation\">[</span>mo<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>ll x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> z<span class=\"token operator\">=</span>x<span class=\"token operator\">%</span>mo<span class=\"token punctuation\">,</span>i<span class=\"token operator\">=</span>h<span class=\"token punctuation\">[</span>z<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>i <span class=\"token operator\">&amp;&amp;</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">!=</span>x<span class=\"token punctuation\">;</span>i<span class=\"token operator\">=</span>nxt<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>i<span class=\"token punctuation\">)</span>nxt<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>xb<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>h<span class=\"token punctuation\">[</span>z<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">[</span>z<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>xb<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">[</span>xb<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>ss<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>M<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>vis<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>pri<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>pc<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>pc<span class=\"token operator\">&amp;&amp;</span>i<span class=\"token operator\">*</span>pri<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>M<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tvis<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span>pri<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">%</span>pri<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>pc<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>ediv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>pri<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>Z<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;</span>Z<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span>gg<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">!</span>i <span class=\"token operator\">||</span> <span class=\"token operator\">!</span>j<span class=\"token operator\">?</span>i<span class=\"token operator\">+</span>j<span class=\"token operator\">:</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span>j<span class=\"token operator\">?</span>gg<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">:</span>gg<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token operator\">-</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>io<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">gi</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>T<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\tio<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">gi</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>io<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">gi</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>sqn<span class=\"token operator\">=</span><span class=\"token function\">sqrt</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>l<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>fac<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>io<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">gi</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>bln<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token operator\">/</span>sqn<span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>io<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">gi</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>io<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">gi</span><span class=\"token punctuation\">(</span>q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token operator\">=</span>i<span class=\"token punctuation\">,</span>ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span> id<span class=\"token punctuation\">[</span>M<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>id<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>pc<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>cnt<span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>pc<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ediv<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tcnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">%</span>pri<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">/=</span>pri<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>id<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>ls<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token operator\">++</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>pri<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>el<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ls<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t\t\tv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>id<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span>id<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\tss<span class=\"token punctuation\">.</span>xb<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span> ss<span class=\"token punctuation\">.</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> step<span class=\"token operator\">=</span><span class=\"token number\">8</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">static</span> ll aa<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">int</span> nn<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>aa<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>nn<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>nn<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>ss<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>aa<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>nn<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>nn<span class=\"token punctuation\">;</span>j<span class=\"token operator\">+=</span>step<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tll pi<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span>step <span class=\"token operator\">&amp;&amp;</span> j<span class=\"token operator\">+</span>k<span class=\"token operator\">&lt;=</span>nn<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span>pi<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>__int128<span class=\"token punctuation\">)</span>pi<span class=\"token operator\">*</span>aa<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">%</span>aa<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>pi<span class=\"token punctuation\">,</span>aa<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>k<span class=\"token operator\">&lt;</span>step <span class=\"token operator\">&amp;&amp;</span> j<span class=\"token operator\">+</span>k<span class=\"token operator\">&lt;=</span>nn<span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\t\tll x<span class=\"token operator\">=</span><span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>aa<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>aa<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t\tss<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>ss<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>aa<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>ss<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>aa<span class=\"token punctuation\">[</span>j<span class=\"token operator\">+</span>k<span class=\"token punctuation\">]</span><span class=\"token operator\">/</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t\t<span class=\"token punctuation\">}</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\tfac<span class=\"token operator\">=</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>ll<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>ss<span class=\"token punctuation\">.</span>v<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>ss<span class=\"token punctuation\">.</span>v<span class=\"token operator\">+</span>ss<span class=\"token punctuation\">.</span>xb<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>fac<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>fac<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>fac<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">unique</span><span class=\"token punctuation\">(</span>fac<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>fac<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>fac<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\ttl<span class=\"token operator\">=</span>l<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>fac<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>fac<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token operator\">?</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>fl<span class=\"token punctuation\">;</span>fl<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">&lt;</span>fac<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\tfl<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>fl<span class=\"token punctuation\">)</span>ls<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>fac<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>el<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ls<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span>tl<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>cnt<span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>l<span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>el<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t\tcnt<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">%</span>ls<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token operator\">++</span>cnt<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">/=</span>ls<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t\tv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">make_pair</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>p<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>cnt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>l<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">&lt;=</span>p<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>ipw<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">fpow</span><span class=\"token punctuation\">(</span>pw<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">fpow</span><span class=\"token punctuation\">(</span>ls<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">%</span>mod<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>mod<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tstd<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">stable_sort</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>q<span class=\"token operator\">+</span>m<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">int</span> ul<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>ur<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ul<span class=\"token operator\">></span>q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">)</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span><span class=\"token operator\">--</span>ul<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ur<span class=\"token operator\">&lt;</span>q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">)</span><span class=\"token function\">add</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>ur<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ul<span class=\"token operator\">&lt;</span>q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">)</span><span class=\"token function\">del</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>ul<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ur<span class=\"token operator\">></span>q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">)</span><span class=\"token function\">del</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>ur<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tans<span class=\"token punctuation\">[</span>q<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>id<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>tot<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ul<span class=\"token operator\">&lt;=</span>ur<span class=\"token punctuation\">)</span><span class=\"token function\">del</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>ur<span class=\"token operator\">--</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>io<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>io<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">putc</span><span class=\"token punctuation\">(</span><span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>","frontmatter":{"date":"November 21, 2019","title":"「洛谷5655」基础数论函数练习题","cover":"/cover/4.png","tags":["数论","莫队"]}}},"pageContext":{"id":"0656fa9b-3a8c-52da-88bb-27eca69f48f9","slug":"blog/problem/luogu5655"}},"staticQueryHashes":[],"slicesMap":{}}