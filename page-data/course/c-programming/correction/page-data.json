{"componentChunkName":"component---src-templates-post-js","path":"/course/c-programming/correction/","result":{"data":{"site":{"siteMetadata":{"title":"mem 的小站"}},"post":{"id":"41272d87-22df-58ab-8df3-7e0b17326880","excerpt":"1. 语法基础 1.1. for 和 while 循环 设两循环内省略的代码片段相同，则以上用 for 实现的循环和 while 实现的循环效果一定相同。（F）  错因 \n没有考虑到省略代码中含  的情况。如果有  则用  实现的版本会直接跳到下一次循环而不执行 。其他情况下两者应等价。 1.2. sizeof…","html":"<h2 id=\"anchor-c0fb4af329f425bb\" style=\"position: relative;\"><a href=\"#anchor-c0fb4af329f425bb\" aria-label=\"anchor c0fb4af329f425bb permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 语法基础</h2>\n<h3 id=\"anchor-de20f8083410778b\" style=\"position: relative;\"><a href=\"#anchor-de20f8083410778b\" aria-label=\"anchor de20f8083410778b permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1. for 和 while 循环</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// for 版本</span>\n<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 此处省略代码若干行</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// while 版本</span>\n<span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// 此处省略代码若干行</span>\n  i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>设两循环内省略的代码片段相同，则以上用 for 实现的循环和 while 实现的循环效果一定相同。（<mark>F</mark>）</p>\n<p><details open class=\"callout callout-type-warning\"><summary style=\"pointer-events: none;\"> 错因</summary><div class=\"callout-content\"><p>\n没有考虑到省略代码中含 <code class=\"language-text\">continue</code> 的情况。如果有 <code class=\"language-text\">continue</code> 则用 <code class=\"language-text\">while</code> 实现的版本会直接跳到下一次循环而不执行 <code class=\"language-text\">i++</code>。其他情况下两者应等价。</p></div></details></p>\n<h3 id=\"anchor-9a3b47a58761cf7f\" style=\"position: relative;\"><a href=\"#anchor-9a3b47a58761cf7f\" aria-label=\"anchor 9a3b47a58761cf7f permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2. sizeof</h3>\n<p>假设 int 类型变量占用 4 个字节，定义 <code class=\"language-text\">int a = 10, b = sizeof(a++);</code> 表达式 <code class=\"language-text\">!b&lt;a ? a+b : a-b</code> 的值为（<mark>14</mark>）。</p>\n<p><details open class=\"callout callout-type-warning\"><summary style=\"pointer-events: none;\"> 错因</summary><div class=\"callout-content\"><p>\n<code class=\"language-text\">sizeof</code> 操作符（或者 <code class=\"language-text\">typeid</code> 操作符）会在编译器推断出括号内的类型，而并不会真的执行括号内的语句。</p><p>同时注意 <code class=\"language-text\">!</code> 的优先级比 <code class=\"language-text\">&lt;</code> 高，故三目运算符的判断条件可以写为 <code class=\"language-text\">(!b)&lt;a</code>。</p></div></details></p>\n<h2 id=\"anchor-2b1dd356aed53846\" style=\"position: relative;\"><a href=\"#anchor-2b1dd356aed53846\" aria-label=\"anchor 2b1dd356aed53846 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 数据类型、表达式</h2>\n<h3 id=\"anchor-15ef88924adbbf0d\" style=\"position: relative;\"><a href=\"#anchor-15ef88924adbbf0d\" aria-label=\"anchor 15ef88924adbbf0d permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1. 赋值运算符和逗号运算符的优先级</h3>\n<p>定义 <code class=\"language-text\">int a = 5, b = 2;</code>，则表达式 <code class=\"language-text\">b += a > b + 2 || --a, a * 10 + b</code> 值为 <mark>54</mark>。</p>\n<p><details open class=\"callout callout-type-warning\"><summary style=\"pointer-events: none;\"> 错因</summary><div class=\"callout-content\"><p>\n<code class=\"language-text\">+=</code> 运算符的优先级比 <code class=\"language-text\">,</code> 高，所以会先计算 <code class=\"language-text\">+=</code> 操作，此时 <code class=\"language-text\">b</code> 的值为 <code class=\"language-text\">3</code>，再计算 <code class=\"language-text\">a * 10 + b</code> 作为返回值，故答案为 <code class=\"language-text\">53</code>。</p></div></details></p>\n<h2 id=\"anchor-ff2e836cf09dffee\" style=\"position: relative;\"><a href=\"#anchor-ff2e836cf09dffee\" aria-label=\"anchor ff2e836cf09dffee permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 数组、指针</h2>\n<h3 id=\"anchor-62b40c5ec06e5db5\" style=\"position: relative;\"><a href=\"#anchor-62b40c5ec06e5db5\" aria-label=\"anchor 62b40c5ec06e5db5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1. 数组指针</h3>\n<p>对于以下程序，能够正确表示二维数组 <code class=\"language-text\">t</code> 的元素地址的表达式是（ ）。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>pt<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  pt<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> t<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>A. <code class=\"language-text\">&amp;t[3][2]</code>。B. <code class=\"language-text\">*pt[0]</code>。<mark>C.</mark> <code class=\"language-text\">*(pt+1)</code>。D. <code class=\"language-text\">&amp;pt[2]</code>。</p>\n<p><details open class=\"callout callout-type-warning\"><summary style=\"pointer-events: none;\"> A 选项错因</summary><div class=\"callout-content\"><p>\n<code class=\"language-text\">t[3][2]</code> 数组越界，读到的地址不属于二维数组 <code class=\"language-text\">t</code> 中的元素。</p></div></details></p>\n<p><details open class=\"callout callout-type-warning\"><summary style=\"pointer-events: none;\"> B 选项错因</summary><div class=\"callout-content\"><p>\n<code class=\"language-text\">*(pt[0])</code> <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⇔</mo></mrow><annotation encoding=\"application/x-tex\">\\Leftrightarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.3669em;\"></span><span class=\"mrel\">⇔</span></span></span></span></span> <code class=\"language-text\">*t[0]</code> <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>⇔</mo></mrow><annotation encoding=\"application/x-tex\">\\Leftrightarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.3669em;\"></span><span class=\"mrel\">⇔</span></span></span></span></span> <code class=\"language-text\">t[0][0]</code>，不是地址。</p><p>注意若 <code class=\"language-text\">typeof a == int[5]</code>，则 <code class=\"language-text\">*a</code> 类似于相当于 <code class=\"language-text\">a[0]</code> 即 <code class=\"language-text\">*(a+0)</code>。</p></div></details></p>\n<h3 id=\"anchor-7c1be2c6e1a31e3b\" style=\"position: relative;\"><a href=\"#anchor-7c1be2c6e1a31e3b\" aria-label=\"anchor 7c1be2c6e1a31e3b permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2. 注意细节</h3>\n<p>执行语句 <code class=\"language-text\">int a[10], *p = a;</code> 后，<code class=\"language-text\">*p</code> 被赋初值为数组元素 <code class=\"language-text\">a[0]</code> 的地址。（<mark>F</mark>）</p>\n<p><details open class=\"callout callout-type-warning\"><summary style=\"pointer-events: none;\"> 错因</summary><div class=\"callout-content\"><p>\n看清楚题目，应该是 <code class=\"language-text\">p</code> 被赋初值为数组元素 <code class=\"language-text\">a[0]</code> 的地址而不是 <code class=\"language-text\">*p</code>。</p></div></details></p>\n<h3 id=\"anchor-dd604c5291a962c7\" style=\"position: relative;\"><a href=\"#anchor-dd604c5291a962c7\" aria-label=\"anchor dd604c5291a962c7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.3. 高精度加法</h3>\n<p>假设变量都已被正确定义，则下面的代码片段正确实现了将数组 <code class=\"language-text\">a</code> 和 <code class=\"language-text\">b</code>（已逆序存放）表示的高精度数相加并存放到数组 <code class=\"language-text\">c</code> 中。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">lc <span class=\"token operator\">=</span> la <span class=\"token operator\">></span> lb <span class=\"token operator\">?</span> la <span class=\"token operator\">:</span> lb<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> lc<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  c<span class=\"token punctuation\">[</span>i <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">/</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n  c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">%</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><details open class=\"callout callout-type-warning\"><summary style=\"pointer-events: none;\"> 错因</summary><div class=\"callout-content\"><p>\n这段代码实际上不能正确处理进位，正确写法应将第三行改为 <code class=\"language-text\">c[i] += a[i] + b[i]</code> 来保留贡献上来的进位。</p></div></details></p>\n<h2 id=\"anchor-e93d1070437031d5\" style=\"position: relative;\"><a href=\"#anchor-e93d1070437031d5\" aria-label=\"anchor e93d1070437031d5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 函数</h2>\n<h3 id=\"anchor-6698c872a4d161e6\" style=\"position: relative;\"><a href=\"#anchor-6698c872a4d161e6\" aria-label=\"anchor 6698c872a4d161e6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1. P1</h3>\n<p>有序表如果不使用全局变量 <code class=\"language-text\">Count</code>，而在 <code class=\"language-text\">main</code> 函数中定义自动变量 <code class=\"language-text\">int count;</code>，同时 <code class=\"language-text\">input_array</code>，<code class=\"language-text\">print_array</code>，<code class=\"language-text\">insert</code>，<code class=\"language-text\">remove</code> 和 <code class=\"language-text\">query</code> 函数都需要增加形参 <code class=\"language-text\">int count</code>，例如 <code class=\"language-text\">void insert(int a[], int value, int count)</code> 来支持有序表的创建、插入、删除和查询。（<mark>F</mark>）</p>\n<p><details open class=\"callout callout-type-warning\"><summary style=\"pointer-events: none;\"> 错因</summary><div class=\"callout-content\"><p>\n如 <code class=\"language-text\">insert</code> 函数内部可能修改 <code class=\"language-text\">count</code> 变量的值，如果使用 <code class=\"language-text\">int count</code> 而不是 <code class=\"language-text\">int *count</code> 的方式传入，则无法在函数内修改。</p></div></details></p>\n<h2 id=\"anchor-23720d7f3a4535d5\" style=\"position: relative;\"><a href=\"#anchor-23720d7f3a4535d5\" aria-label=\"anchor 23720d7f3a4535d5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 文件操作、多文件编程</h2>\n<h3 id=\"anchor-60ccb6633cfcbf02\" style=\"position: relative;\"><a href=\"#anchor-60ccb6633cfcbf02\" aria-label=\"anchor 60ccb6633cfcbf02 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.1. P1</h3>\n<p>下面说法中正确的是（<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mspace width=\"1em\"></mspace></mrow><annotation encoding=\"application/x-tex\">\\quad</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0em;\"></span><span class=\"mspace\" style=\"margin-right:1em;\"></span></span></span></span></span>）。</p>\n<p><mark>A. 若全局变量仅在单个 C 文件中访问，则可以将这个变量修改为静态全局变量，以降低模块间的耦合度。</mark></p>\n<p>B. 若全局变量仅由单个函数访问，则可以将这个变量改为该函数的静态局部变量，以降低模块间的耦合度。</p>\n<p>C. 设计和使用访问动态全局变量、静态全局变量、静态局部变量的函数时，需要考虑变量生命周期问题。</p>\n<p>D. 静态全局变量使用过多，可那会导致动态存储区（堆栈）溢出。</p>\n<p><details open class=\"callout callout-type-warning\"><summary style=\"pointer-events: none;\"> B 选项错因</summary><div class=\"callout-content\"><p>\n???</p></div></details></p>\n<h2 id=\"anchor-d089f6ad54d40f79\" style=\"position: relative;\"><a href=\"#anchor-d089f6ad54d40f79\" aria-label=\"anchor d089f6ad54d40f79 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 读程序写结果</h2>\n<h3 id=\"anchor-2e36f21ec112823c\" style=\"position: relative;\"><a href=\"#anchor-2e36f21ec112823c\" aria-label=\"anchor 2e36f21ec112823c permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.1. 注意细节之循环次数</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">N</span> <span class=\"token expression\"><span class=\"token number\">8</span></span></span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> r <span class=\"token operator\">=</span> N<span class=\"token punctuation\">,</span> m <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> p <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">!=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      m<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">%</span> <span class=\"token number\">3</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        r<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    p <span class=\"token operator\">=</span> p <span class=\"token operator\">==</span> a <span class=\"token operator\">+</span> N <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> a <span class=\"token operator\">:</span> p <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d#\"</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>输入：<code class=\"language-text\">10 21 3 6 9 0 100 1</code>；输出：<mark>6#</mark>。</p>\n<p><details open class=\"callout callout-type-warning\"><summary style=\"pointer-events: none;\"> 错因</summary><div class=\"callout-content\"><p>\n注意在 <code class=\"language-text\">r=N</code> 时 <code class=\"language-text\">a</code> 中的非零元素只有 N-1 个（输入的时候有一个已经是 0），所以当 <code class=\"language-text\">r==2</code> 时 <code class=\"language-text\">a</code> 中的非零元素应该是 1 个而不是 2 个。否则会得到错误输出 <code class=\"language-text\">10#6#</code>。</p></div></details></p>\n<h3 id=\"anchor-6f6b51fcd5ee7602\" style=\"position: relative;\"><a href=\"#anchor-6f6b51fcd5ee7602\" aria-label=\"anchor 6f6b51fcd5ee7602 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.2. 注意细节之 do-while 判断时机</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>a <span class=\"token operator\">%</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>a<span class=\"token operator\">++</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">f</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> s <span class=\"token operator\">+=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>输出：<mark>19</mark>。</p>\n<p><details open class=\"callout callout-type-warning\"><summary style=\"pointer-events: none;\"> 错因</summary><div class=\"callout-content\"><p>\n注意 do-while 循环的判断语句是在循环体结束之后才调用，而 <code class=\"language-text\">*a</code> 的值可能在循环体内发生改变。故 <code class=\"language-text\">a</code> 中最后两项 <code class=\"language-text\">-1</code> 和 <code class=\"language-text\">-2</code> 实际上都会被 <code class=\"language-text\">++</code>。另外还需要注意 <code class=\"language-text\">for</code> 循环的循环次数是元素个数减 1 而不是元素个数。</p></div></details></p>\n<h3 id=\"anchor-f9c4680b85c4d6cf\" style=\"position: relative;\"><a href=\"#anchor-f9c4680b85c4d6cf\" aria-label=\"anchor f9c4680b85c4d6cf permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.3. P3</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">st</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">st</span> a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token punctuation\">.</span>x <span class=\"token operator\">=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span>a<span class=\"token punctuation\">.</span>y<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">st</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">-></span>x <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span><span class=\"token operator\">++</span>a<span class=\"token operator\">-></span>y <span class=\"token operator\">=</span> <span class=\"token number\">6</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">st</span> s1 <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> s2 <span class=\"token operator\">=</span> s1<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">f1</span><span class=\"token punctuation\">(</span>s1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d#%d#%d#%d\"</span><span class=\"token punctuation\">,</span> s1<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>s1<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">f2</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d#%d#%d#%d\"</span><span class=\"token punctuation\">,</span> s2<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>s2<span class=\"token punctuation\">.</span>y<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#anchor-c0fb4af329f425bb\">1. 语法基础</a></p>\n<ul>\n<li><a href=\"#anchor-de20f8083410778b\">1.1. for 和 while 循环</a></li>\n<li><a href=\"#anchor-9a3b47a58761cf7f\">1.2. sizeof</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#anchor-2b1dd356aed53846\">2. 数据类型、表达式</a></p>\n<ul>\n<li><a href=\"#anchor-15ef88924adbbf0d\">2.1. 赋值运算符和逗号运算符的优先级</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#anchor-ff2e836cf09dffee\">3. 数组、指针</a></p>\n<ul>\n<li><a href=\"#anchor-62b40c5ec06e5db5\">3.1. 数组指针</a></li>\n<li><a href=\"#anchor-7c1be2c6e1a31e3b\">3.2. 注意细节</a></li>\n<li><a href=\"#anchor-dd604c5291a962c7\">3.3. 高精度加法</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#anchor-e93d1070437031d5\">4. 函数</a></p>\n<ul>\n<li><a href=\"#anchor-6698c872a4d161e6\">4.1. P1</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#anchor-23720d7f3a4535d5\">5. 文件操作、多文件编程</a></p>\n<ul>\n<li><a href=\"#anchor-60ccb6633cfcbf02\">5.1. P1</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#anchor-d089f6ad54d40f79\">6. 读程序写结果</a></p>\n<ul>\n<li><a href=\"#anchor-2e36f21ec112823c\">6.1. 注意细节之循环次数</a></li>\n<li><a href=\"#anchor-6f6b51fcd5ee7602\">6.2. 注意细节之 do-while 判断时机</a></li>\n<li><a href=\"#anchor-f9c4680b85c4d6cf\">6.3. P3</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"错题集","description":null},"fields":{"cover":null,"slug":"/course/c-programming/correction/","cssclasses":null,"isDoc":true,"authors":[],"createTime":null,"updateTime":null,"category":"[{\"name\":\"课程笔记\",\"to\":\"/course/\"}]","propsJson":null}},"previous":null,"next":null},"pageContext":{"id":"41272d87-22df-58ab-8df3-7e0b17326880","previousPostId":null,"nextPostId":null,"navJson":"[{\"slug\":\"/course/c-programming\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/c-programming/index.md\",\"title\":\"课程简介\"},{\"slug\":\"/course/c-programming/note\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/c-programming/note.md\",\"title\":\"笔记\"},{\"slug\":\"/course/c-programming/correction\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/c-programming/correction.md\",\"title\":\"错题集\"}]"}},"staticQueryHashes":[],"slicesMap":{}}