{"componentChunkName":"component---src-templates-post-js","path":"/course/ca/note/1/","result":{"data":{"site":{"siteMetadata":{"title":"mem 的小站"}},"post":{"id":"3fbd83cf-bb42-5c8d-b262-3debc09e1db9","excerpt":"1. Introduction 1.1. 冯·诺依曼结构 冯·诺依曼结构(Von Neumann Structure)：  1.2. 计算机的分类 第一种分类： Desktop Computers：又称 个人电脑(Personal Computers, PC)，包括台式机和笔记本电脑，主要用于通用计算。 Servers…","html":"<p><img src=\"https://cdn.hobbitqia.cc/20230921202940.png\"alt=\"\" ></p>\n<h2 id=\"anchor-7f977bb5514b76a1\" style=\"position: relative;\"><a href=\"#anchor-7f977bb5514b76a1\" aria-label=\"anchor 7f977bb5514b76a1 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Introduction</h2>\n<h3 id=\"anchor-0a289e07dac6acca\" style=\"position: relative;\"><a href=\"#anchor-0a289e07dac6acca\" aria-label=\"anchor 0a289e07dac6acca permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1. 冯·诺依曼结构</h3>\n<p><strong>冯·诺依曼结构(Von Neumann Structure)</strong>：</p>\n<p><img src=\"https://img.memset0.cn/2025/02/25/YX9nmq2D.png\"alt=\"\" ></p>\n<h3 id=\"anchor-398c2d8afc714d77\" style=\"position: relative;\"><a href=\"#anchor-398c2d8afc714d77\" aria-label=\"anchor 398c2d8afc714d77 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2. 计算机的分类</h3>\n<p><strong>第一种分类</strong>：</p>\n<ul>\n<li><strong>Desktop Computers</strong>：又称 <strong>个人电脑(Personal Computers, PC)</strong>，包括台式机和笔记本电脑，主要用于通用计算。</li>\n<li><strong>Servers Computers</strong>：具有更强大的处理能力，更大的存储容量（可用于冗余备份），更高的稳定性。</li>\n<li><strong>Embedded Computers</strong>：不能随意安装第三方应用，与宿主系统紧密结合，服务于特定功能。</li>\n<li><strong>Personal Mobile Devices</strong>：如手机、平板电脑等。</li>\n<li><strong>Supercomputer</strong>：处理复杂的科学计算任务。</li>\n</ul>\n<p><strong>Flynn 分类法</strong>：从指令流和数据流的角度对计算机进行分类：</p>\n<p><img src=\"https://img.memset0.cn/2025/02/25/cWoK3fEE.png\"alt=\"cWoK3fEE.png\" style=\"width: 800px; \" ></p>\n<ul>\n<li><strong>单指令流单数据流(Single Instruction Stream Single Data Stream, SISD)</strong> ：早期的单核 PC 采用此架构。</li>\n<li><strong>单指令流多数据流(Single Instruction Stream Multiple Data Stream, SIMD)</strong>：一条指令可以处理多条数据流（如向量数据），便于进行流水线操作。</li>\n<li><strong>多指令流单数据流(Multiple Instruction Stream Single Data Stream, MISD)</strong> ：理论上的并行计算架构，并不实际存在。</li>\n<li><strong>多指令流多数据流(Multiple Instruction Stream Multiple Data Stream, MIMD)</strong> ：每个处理器都可以执行不同的指令流，处理不同的数据流。如多核处理器和计算机集群，能够实现真正的并行计算。</li>\n</ul>\n<p><details open class=\"callout callout-type-important\"><summary style=\"pointer-events: none;\"> Summary</summary><div class=\"callout-content\"><p></p><p>关注数据的处理，计算机的发展主要围绕以下三个方向：</p><ul>\n<li>加速 <strong>处理(process)</strong> / <strong>并行(parallel)</strong>：通过并行计算等技术提高数据处理速度。</li>\n<li>加速 <strong>传输(tarnsmission)</strong> / <strong>准确性(accuracy)</strong>：提高数据传输速度和准确性，保证数据高效可靠地流动。</li>\n<li>提高 <strong>存储容量(storage capacity)</strong> 和速度 / <strong>可靠性(reliability)</strong>：增大存储容量，提升存储速度，并确保数据存储的可靠性。</li>\n</ul></div></details></p>\n<h2 id=\"anchor-5af805f874eaa242\" style=\"position: relative;\"><a href=\"#anchor-5af805f874eaa242\" aria-label=\"anchor 5af805f874eaa242 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Performance</h2>\n<blockquote>\n<ul>\n<li>什么是 <strong>性能(Performance)</strong>？——<mark class=\"m-mark\">性能最简单的定义就是执行时间的倒数</mark>，即性能越高，执行时间越短。</li>\n<li>如何 <strong>量化分析(quantify)</strong> 性能？——只有将性能量化，才能进行有效的 trade-off。</li>\n<li>如何 <strong>优化(optimize)</strong> 性能？——分析性能瓶颈并采取相应的优化策略来。</li>\n</ul>\n</blockquote>\n<h3 id=\"anchor-532237369ea34ff5\" style=\"position: relative;\"><a href=\"#anchor-532237369ea34ff5\" aria-label=\"anchor 532237369ea34ff5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1. 衡量性能的指标</h3>\n<ul>\n<li>对于 PC 上的单用户应用，通常关注 <strong>响应时间(response time)</strong>，目标是尽可能缩短响应时间。\n<ul>\n<li><strong>延迟(latency)</strong>：指从一个事件开始到该事件完成所经历的时间。</li>\n</ul>\n</li>\n<li>对于大数据处理等任务，通常关注 <strong>吞吐量(throughput)</strong>，即单位时间内完成的任务量，目标是最大化吞吐量。\n<ul>\n<li><strong>带宽(bandwidth)</strong>：指在给定的时间范围内，系统所能完成的工作量。例如，服务器每秒处理的请求数，或者网络每秒传输的数据量。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"anchor-f154532bd20a7d5b\" style=\"position: relative;\"><a href=\"#anchor-f154532bd20a7d5b\" aria-label=\"anchor f154532bd20a7d5b permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2. 影响计算机性能的因素</h3>\n<ul>\n<li><strong>Algorithm</strong>：算法的选择直接影响解决问题的效率。</li>\n<li><strong>Programming language, compiler, architecture</strong>：编程语言的效率、编译器的优化程度以及计算机体系结构的特点都会影响程序性能。</li>\n<li><strong>Processor and memory system</strong>：处理器的运算速度和存储器系统的访问速度是影响计算机性能的关键硬件因素。</li>\n<li><strong>I/O system(including OS)</strong>：输入输出系统的速度以及操作系统的效率也会影响整体性能。</li>\n</ul>\n<h2 id=\"anchor-8e3f7a486ec63a68\" style=\"position: relative;\"><a href=\"#anchor-8e3f7a486ec63a68\" aria-label=\"anchor 8e3f7a486ec63a68 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Technology Trend</h2>\n<p>计算机体系结构的改进和发展，可以从以下几个方面来看：</p>\n<ul>\n<li><strong>输入/输出的改进(Improvement of input / output)</strong>\n<ul>\n<li>更快的 I/O 接口标准，如 PCIe Gen5、Thunderbolt 4 等，提供更高的数据传输带宽。</li>\n<li>更智能的 I/O 控制器，减轻 CPU 的 I/O 处理负担。</li>\n<li>新型存储介质的出现，如 NVMe SSD，大幅提升存储设备的读写性能。</li>\n</ul>\n</li>\n<li><strong>存储器组织结构的演进(The development of memory organization structure)</strong>\n<ul>\n<li><strong>存储器层次结构(Hierarchy of Memories)</strong> 的完善，包括高速缓存(Cache)、主存储器(Main Memory)、辅助存储器(Secondary Memory)等多层结构，利用程序访问的局部性原理，提高存储器系统的整体性能。</li>\n<li>新型存储技术的发展，如 3D 堆叠存储、持久性内存(Persistent Memory)等，提升存储密度和性能。</li>\n</ul>\n</li>\n<li><strong>指令集发展的两个方向(Two directions of instruction set development)</strong>\n<ul>\n<li><strong>复杂指令集计算机(Complex Instruction Set Computer, CISC)</strong> / <strong>精简指令集计算机(Reduced Instruction Set Computer, RISC)</strong></li>\n<li>【课件中展示了 CISC 和 RISC 指令集的对比】</li>\n<li><strong>CISC</strong> 的设计理念侧重于提供功能丰富的指令，以尽可能用较少的指令完成复杂的任务，从而缩短程序代码长度。<strong>CISC</strong> 的指令集通常包含大量指令和多种寻址方式，指令长度不固定。</li>\n<li><strong>RISC</strong> 的设计理念则相反，它追求指令集的精简和高效。<strong>RISC</strong> 通过简化指令集，将复杂的指令操作分解为一系列简单的指令组合来完成。<strong>RISC</strong> 的指令集通常指令数量较少，寻址方式简单，指令长度固定。</li>\n</ul>\n</li>\n<li><strong>并行处理技术(Parallel processing technology)</strong>\n<ul>\n<li><strong>指令级并行(Instruction-Level Parallelism, ILP)</strong>：如流水线(Pipelining)、超标量(Superscalar)技术，在指令级别实现并行。</li>\n<li><strong>线程级并行(Thread-Level Parallelism, TLP)</strong>：如多线程(Multi-threading)、多核(Multi-core)技术，在线程级别实现并行。</li>\n<li><strong>数据级并行(Data-Level Parallelism, DLP)</strong>：如 SIMD、向量处理器，在数据级别实现并行。</li>\n<li><strong>任务级并行(Task-Level Parallelism, TLP)</strong>：将一个大的任务分解成多个子任务，分配到不同的处理器上并行执行。</li>\n<li><strong>多处理器系统(Multiprocessor System)</strong> 和 <strong>计算机集群(Computer Cluster)</strong> 等系统级并行技术。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"anchor-38e23199f0112966\" style=\"position: relative;\"><a href=\"#anchor-38e23199f0112966\" aria-label=\"anchor 38e23199f0112966 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Quantitative Approaches</h2>\n<h3 id=\"anchor-6411ee08c4d484eb\" style=\"position: relative;\"><a href=\"#anchor-6411ee08c4d484eb\" aria-label=\"anchor 6411ee08c4d484eb permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1. CPU 性能公式</h3>\n<ul>\n<li>这一部分和计算机组成相同。</li>\n<li><mark class=\"m-mark\">多核运算比较难以使用上述公式衡量，一般直接比较运行时间</mark>。</li>\n<li><strong>加速比(Speedup)</strong>：衡量性能提升的指标\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>S</mi><mi>p</mi><mtext> (Speedup)</mtext><mo>:</mo><mo>=</mo><mfrac><msub><mi>f</mi><mtext>改进后</mtext></msub><msub><mi>f</mi><mtext>改进前</mtext></msub></mfrac><mo>=</mo><mfrac><msub><mi>T</mi><mtext>改进前</mtext></msub><msub><mi>T</mi><mtext>改进后</mtext></msub></mfrac></mrow><annotation encoding=\"application/x-tex\">Sp \\text{ (Speedup)} := \\dfrac{f_{\\text{改进后}}}{f_\\text{改进前}} = \\dfrac{T_{\\text{改进前}}}{T_{\\text{改进后}}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">Sp</span><span class=\"mord text\"><span class=\"mord\"> (Speedup)</span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">:=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.2519em;vertical-align:-0.8804em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord text mtight\"><span class=\"mord cjk_fallback mtight\">改进前</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.1076em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord cjk_fallback mtight\">改进后</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8804em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.1963em;vertical-align:-0.836em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3603em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord cjk_fallback mtight\">改进后</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord cjk_fallback mtight\">改进前</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.836em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></div>\n</li>\n</ul>\n<h3 id=\"anchor-40cab6f875502bb7\" style=\"position: relative;\"><a href=\"#anchor-40cab6f875502bb7\" aria-label=\"anchor 40cab6f875502bb7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.2. 阿姆达尔定律</h3>\n<p><strong>阿姆达尔定律(Amdahl's Law)</strong>：通过改进系统的某个部分获得的性能提升，将受到该部分在系统中执行时间占比的限制。</p>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mi>T</mi><mtext>improved</mtext></msub><mo>=</mo><mfrac><msub><mi>T</mi><mtext>affected</mtext></msub><mrow><mi>f</mi><mtext> (improvement factor)</mtext></mrow></mfrac><mo>+</mo><msub><mi>T</mi><mtext>unaffected</mtext></msub></mrow><annotation encoding=\"application/x-tex\">T_{\\text{improved}}=\\dfrac{T_{\\text{affected}}}{f\\text{ (improvement factor)}}+T_{\\text{unaffected}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.9694em;vertical-align:-0.2861em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">improved</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2861em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.2963em;vertical-align:-0.936em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3603em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mord text\"><span class=\"mord\"> (improvement factor)</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">affected</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.936em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8333em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">unaffected</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span></div>\n<ul>\n<li>核心思想：<em>Make the common case fast</em>！</li>\n<li>也被用来分析可行性。</li>\n<li><strong>整体加速比(Overall Speedup)</strong>：考虑到阿姆达尔定律，仅被优化部分有加速：\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mi>S</mi><msub><mi>p</mi><mtext>overall</mtext></msub><mo>=</mo><mfrac><msub><mi>T</mi><mtext>改进前</mtext></msub><msub><mi>T</mi><mtext>改进后</mtext></msub></mfrac><mo>=</mo><mfrac><mn>1</mn><mrow><mo stretchy=\"false\">(</mo><mn>1</mn><mo>−</mo><mi>f</mi><mo stretchy=\"false\">)</mo><mo>+</mo><mfrac><mi>f</mi><mrow><mi>S</mi><mi>p</mi></mrow></mfrac></mrow></mfrac></mrow><annotation encoding=\"application/x-tex\">Sp_{\\text{overall}} = \\dfrac{T_{\\text{改进前}}}{T_{\\text{改进后}}} = \\dfrac{1}{(1-f) + \\dfrac{f}{Sp}}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8778em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">S</span><span class=\"mord\"><span class=\"mord mathnormal\">p</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3361em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord mtight\">overall</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.1963em;vertical-align:-0.836em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3603em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord cjk_fallback mtight\">改进后</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-left:-0.1389em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord text mtight\"><span class=\"mord cjk_fallback mtight\">改进前</span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.836em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:3.4633em;vertical-align:-2.1419em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3214em;\"><span style=\"top:-2.11em;\"><span class=\"pstrut\" style=\"height:3.3714em;\"></span><span class=\"mord\"><span class=\"mopen\">(</span><span class=\"mord\">1</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">Sp</span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\" style=\"margin-right:0.10764em;\">f</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8804em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span><span style=\"top:-3.6014em;\"><span class=\"pstrut\" style=\"height:3.3714em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-4.0484em;\"><span class=\"pstrut\" style=\"height:3.3714em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.1419em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></div>\n</li>\n</ul>\n<h2 id=\"anchor-9568c2c3de8842fd\" style=\"position: relative;\"><a href=\"#anchor-9568c2c3de8842fd\" aria-label=\"anchor 9568c2c3de8842fd permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Great Architecture Ideas</h2>\n<ol>\n<li>\n<p><strong>Design for Moore's Law</strong>：设计紧跟 <strong>摩尔定律(Moore's Law)</strong>。</p>\n<ul>\n<li>计算机设计领域变化迅速，需要面向未来进行设计。</li>\n<li>强调做这件事情本身（<em>for where it will be</em>）。</li>\n</ul>\n</li>\n<li>\n<p><strong>Use Abstraction to Simplify Design</strong>：通过抽象简化设计。</p>\n<ul>\n<li><strong>抽象(abstraction)</strong> 强调通过隐藏低层级的具体实现细节来提升高层级的设计开发效率。</li>\n<li>【课件中举例：例如，开发自动驾驶汽车，控制系统可以依赖车辆已有的传感器系统（车道偏离、智能巡航等），开发者无需关注底层传感器模块的具体细节】。这个例子体现了抽象如何简化系统设计，使开发者可以专注于更高层次的功能实现。</li>\n</ul>\n</li>\n<li>\n<p><strong>加速大概率事件(Make the Common Case Fast)</strong> - 针对<strong>大概率事件</strong>进行优化，提高系统性能</p>\n<ul>\n<li>在计算机系统中，某些操作会比其他操作更频繁地执行。<strong>加速大概率事件</strong> 的核心思想是，<strong>投入更多资源优化那些最常见的操作，从而获得整体性能的最大提升</strong>。这与 <strong>阿姆达尔定律</strong> 的思想相符。</li>\n<li>【课件中举例：例如，高楼内设置快速电梯，以满足人们日常通勤的需求】。快速电梯满足了高楼用户最频繁的出行需求，是 <strong>加速大概率事件</strong> 思想的体现。</li>\n</ul>\n</li>\n<li>\n<p><strong>通过并行提高性能(Performance via Parallelism)</strong> - 利用<strong>并行</strong>技术提升性能</p>\n<ul>\n<li><strong>并行</strong> 是提高计算机系统性能的关键技术之一。通过 <strong>同时执行多个任务或操作</strong>，可以显著缩短程序的执行时间，提高系统吞吐量。并行可以发生在不同的层级，如指令级并行、线程级并行、数据级并行、任务级并行等。</li>\n<li>【课件中举例：例如，增加 <strong>CMOS 晶体管</strong> 的栅极面积以降低电阻，从而减少开关时间】。这个例子从硬件层面展示了如何通过 <strong>并行</strong> (增加晶体管数量) 来提高性能。</li>\n</ul>\n</li>\n<li>\n<p><strong>通过流水线提高性能(Performance via Pipelining)</strong> - 使用<strong>流水线</strong>技术提升性能</p>\n<ul>\n<li><strong>流水线</strong> 是一种将 <strong>指令执行过程分解为多个阶段，并让多条指令</strong> <strong>同时</strong> <strong>处于不同执行阶段</strong> 的技术。类似于工厂的装配流水线，可以提高指令执行的 <strong>吞吐率</strong>。</li>\n<li>【课件中展示了指令流水线的示意图】</li>\n<li>【课件中举例：例如，汽车制造中的装配线 (assembly lines)】。装配线是 <strong>流水线</strong> 思想的典型应用，通过将汽车制造过程分解为多个工序，并让不同的汽车同时处于不同的工序，提高了生产效率。</li>\n</ul>\n</li>\n<li>\n<p><strong>通过预测提高性能(Performance via Prediction)</strong> - 采用<strong>预测</strong>技术提升性能</p>\n<ul>\n<li>在某些情况下，程序需要在多个选项中进行选择，例如条件分支语句 (if-else)。<strong>预测</strong> 技术可以在 <strong>程序实际执行到分支语句之前，提前预测分支的走向</strong>，并 <strong>预取</strong> 或 <strong>预执行</strong> 后续指令，从而减少程序执行的 <strong>等待时间</strong>，提高性能。</li>\n<li>【课件中举例：例如，包含风力信息的飞机和航海导航系统】。导航系统利用风力预测等信息，提前规划航线，从而更高效地到达目的地。 又例如，<strong>分支预测器(Branch Predictor)</strong> 是处理器中常用的 <strong>预测</strong> 硬件，用于预测条件分支的跳转方向。</li>\n</ul>\n</li>\n<li>\n<p><strong>存储器层次结构(Hierarchy of Memories)</strong> - 构建<strong>多级存储器层次结构</strong></p>\n<ul>\n<li>由于不同存储介质在 <strong>速度、容量、成本</strong> 等方面存在差异，<strong>存储器层次结构</strong> 采用 <strong>多层存储器</strong> 协同工作的模式。<strong>高速、小容量、昂贵</strong> 的存储器 (如 Cache) 位于层次结构的 <strong>顶端</strong>，<strong>低速、大容量、廉价</strong> 的存储器 (如硬盘) 位于 <strong>底层</strong>。利用程序访问的 <strong>局部性原理</strong>，将 <strong>最常用的数据</strong> 存储在 <strong>高速存储器</strong> 中，从而 <strong>提高存储器系统的平均访问速度</strong>。</li>\n<li>【课件中展示了存储器层次结构的示意图】</li>\n<li>【课件中举例：例如，图书馆查书台 - 将常用的书籍放在最容易取阅的位置】。查书台上的书通常是读者经常查阅的，这类似于 <strong>Cache</strong> 的思想，将 <strong>常用数据</strong> 放在 <strong>高速访问的位置</strong>。</li>\n</ul>\n</li>\n<li>\n<p><strong>通过冗余提高可靠性(Dependability via Redundancy)</strong> - 利用<strong>冗余</strong>技术提高系统<strong>可靠性(Dependability)</strong></p>\n<ul>\n<li><strong>冗余</strong> 是提高系统可靠性的常用方法。通过 <strong>增加额外的硬件或软件资源</strong>，当系统发生故障时，<strong>冗余部件可以接替故障部件的工作</strong>，保证系统 <strong>持续</strong> 提供服务。</li>\n<li>【课件中举例：例如，使用备用处理器，如果检测到主处理器输出错误的结果，则启用备用处理器】。 又例如， <strong>RAID 磁盘阵列</strong> 使用 <strong>数据冗余</strong> 技术，当 <strong>少量磁盘</strong> 发生故障时，仍能保证数据 <strong>不丢失</strong> 和系统 <strong>正常运行</strong>。</li>\n<li>【课件中举例：例如，悬索桥的缆索】。悬索桥通常有多条缆索，即使 <strong>少量缆索</strong> 发生断裂，桥梁仍然可以 <strong>安全</strong> 运行，体现了 <strong>冗余设计</strong> 提高可靠性的思想。</li>\n</ul>\n</li>\n</ol>\n<h2 id=\"anchor-0fe57af9079c83eb\" style=\"position: relative;\"><a href=\"#anchor-0fe57af9079c83eb\" aria-label=\"anchor 0fe57af9079c83eb permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. 指令集架构(Instruction Set Architecture, ISA)</h2>\n<p><strong>指令集架构(ISA)</strong> 是计算机硬件和软件之间的接口，定义了 <strong>计算机可以执行的所有指令的集合</strong>。<strong>ISA</strong> 包含了指令的 <strong>格式、寻址方式、数据类型、操作类型</strong> 等信息。指令集是人类可读的 <strong>最低层级的计算机语言</strong>。</p>\n<ul>\n<li><strong>指令集架构(Instruction Set Architecture, ISA)</strong></li>\n</ul>\n<div align=\"center\"><img src=\"https://cdn.hobbitqia.cc/20230928223516.png\" width=\"60%\"></div>\n<p><strong>指令集设计需要考虑的关键问题(Instruction Set Design Issues)</strong></p>\n<ul>\n<li><strong>操作数(Operands)</strong><br>\n操作数可以存储在 <strong>寄存器(registers)</strong>、<strong>内存(memory)</strong>、<strong>栈(stack)</strong> 或 <strong>累加器(accumulator)</strong> 中。不同的存储位置会影响指令的 <strong>寻址方式</strong> 和指令执行的 <strong>效率</strong>。</li>\n<li><strong>显式操作数(Explicit Operands)</strong>\n根据指令中显式指定的操作数数量，可以将 <strong>ISA</strong> 分为 0-地址指令集、1-地址指令集、2-地址指令集 和 3-地址指令集。</li>\n<li><strong>如何指定操作数的位置？(How is the operand location specified?)</strong><br>\n<strong>寻址方式(Addressing Modes)</strong> 定义了如何 <strong>计算操作数在内存或寄存器中的地址</strong>。常见的寻址方式包括 <strong>寄存器寻址(register)</strong>、<strong>立即数寻址(immediate)</strong>、<strong>直接寻址(direct)</strong>、<strong>间接寻址(indirect)</strong> 等。</li>\n<li><strong>支持的操作数类型和大小？(What type &#x26; size of operands are supported?)</strong><br>\n<strong>ISA</strong> 需要定义支持的 <strong>数据类型(Data Representation)</strong>，例如 字节(byte)、整型(int)、浮点型(float)、双精度浮点型(double)、字符串(string)、向量(vector) 等，以及每种数据类型的大小和表示方式。</li>\n<li><strong>支持的操作类型？(What operations are supported?)</strong><br>\n<strong>ISA</strong> 需要定义支持的 <strong>操作类型(Types of Instructions)</strong>，例如 算术运算(add, sub, mul)、数据传输(move)、比较(compare)、逻辑运算(AND, OR, NOT)、控制流(branch, jump, call, return) 等。</li>\n</ul>\n<p><strong>指令集设计的基本原则(Basic Principles)</strong></p>\n<ul>\n<li><strong>兼容性(Compatibility)</strong>\n指令集需要 <strong>保持向后兼容性</strong>，即新的处理器架构应<strong>兼容</strong> 之前架构的指令集，以保证 <strong>软件的可移植性</strong> 和 <strong>延续性</strong>。</li>\n<li><strong>通用性(Versatility)</strong>\n指令集应 <strong>具有通用性</strong>，能够 <strong>支持各种不同的应用场景和计算任务</strong>。</li>\n<li><strong>高效率(High efficiency)</strong>\n指令集设计应 <strong>追求高效性</strong>，<strong>指令执行速度快</strong>，<strong>指令编码效率高</strong>，能够充分发挥硬件性能。</li>\n<li><strong>安全性(Security)</strong>\n现代指令集也越来越注重 <strong>安全性</strong>，提供一些 <strong>安全相关的指令</strong> 和 <strong>机制</strong>，以增强系统的安全性。</li>\n</ul>\n<h3 id=\"anchor-75db9355a88d1a21\" style=\"position: relative;\"><a href=\"#anchor-75db9355a88d1a21\" aria-label=\"anchor 75db9355a88d1a21 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.1. ISA 分类依据 (ISA Classification Basis)</h3>\n<p><strong>ISA 的分类</strong> 主要依据于指令在执行过程中，<strong>操作数从哪里获取</strong>，<strong>结果存储到哪里</strong>，以及 <strong>计算规则</strong> 是如何定义的。</p>\n<ul>\n<li><strong>栈结构(stack)</strong>\n<ul>\n<li><strong>零地址指令架构(0-address Instruction Architecture)</strong>，指令的操作数 <strong>隐式</strong> 地从 <strong>栈顶</strong> 获取，运算结果也 <strong>压回栈顶</strong>。</li>\n<li>例如，执行加法指令 <code class=\"language-text\">ADD</code> 时，栈顶的两个元素 (作为操作数) 会被弹出，相加的结果再压回栈顶。</li>\n<li>栈架构的优点是 <strong>指令简洁</strong>，代码密度高。缺点是 <strong>访存次数较多</strong>，<strong>性能相对较低</strong>。</li>\n<li>\"First operand removed from second op replaced by the result.\" - 指的是第一个操作数从栈顶弹出，第二个操作数也从栈顶弹出，运算结果替换掉第二个操作数的位置并压回栈顶。（个人理解，此处描述可能不够清晰，建议参考更详细的栈架构资料）</li>\n</ul>\n</li>\n<li><strong>累加器结构(accumulator)</strong>\n<ul>\n<li><strong>单地址指令架构(1-address Instruction Architecture)</strong>，指令中 <strong>显式</strong> 地指定一个操作数，<strong>另一个操作数</strong> 和 <strong>运算结果</strong> 都 <strong>隐式</strong> 地使用 <strong>累加器(Accumulator)</strong>。</li>\n<li>累加器既是 <strong>隐式的输入操作数</strong>，又是 <strong>结果的存储位置</strong>。早期的计算机常采用累加器架构。</li>\n<li>累加器架构的优点是 <strong>结构简单</strong>，指令格式简单。缺点是 <strong>通用性较差</strong>，<strong>程序灵活性受限</strong>。</li>\n<li>\"One implicit operand: the accumulator; one explicit operand: mem location\" - 指的是指令中显式指定一个内存位置的操作数，另一个操作数是累加器中的值，累加器同时用于存储运算结果。</li>\n<li>\"Accumulator is both an implicit input operand and a result\" - 强调累加器在运算中同时充当输入和输出的角色。</li>\n</ul>\n</li>\n<li><strong>寄存器结构(register)</strong>\n<ul>\n<li><strong>通用寄存器架构(General Purpose Register Architecture, GPR)</strong>，指令的操作数 <strong>显式</strong> 地使用 <strong>寄存器</strong> 或 <strong>内存</strong> 中的数据。现代计算机普遍采用 <strong>GPR</strong> 架构。</li>\n<li><strong>寄存器-内存架构(Register-memory architecture)</strong><br>\n指令的 <strong>操作数</strong> 可以 <strong>同时</strong> 来自 <strong>寄存器</strong> 和 <strong>内存</strong>。即 <strong>任何指令</strong> 都可以访问内存。</li>\n<li><strong>Load-store 架构(Load-store architecture)</strong><br>\n只有 <strong>load</strong> (<strong>取数</strong>) 和 <strong>store</strong> (<strong>存数</strong>) 指令可以 <strong>访问内存</strong>，其他 <strong>运算指令</strong> 的操作数 <strong>必须</strong> 来自 <strong>寄存器</strong>。<strong>RISC</strong> 架构通常采用 <strong>load-store</strong> 模式。</li>\n<li><strong>GPR</strong> 架构的优点是 <strong>灵活性高</strong>，<strong>通用性好</strong>，<strong>易于编译优化</strong>。<strong>Load-store</strong> 架构进一步简化了指令集设计，提高了指令执行效率。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"anchor-ac9fd10782c889ff\" style=\"position: relative;\"><a href=\"#anchor-ac9fd10782c889ff\" aria-label=\"anchor ac9fd10782c889ff permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.2. 通用寄存器分类 (GPR Classification)</h3>\n<div align=\"center\"><img src=\"https://cdn.hobbitqia.cc/20230928225257.png\" width=\"60%\"></div>\n<div align=\"center\"><img src=\"https://cdn.hobbitqia.cc/20230928225337.png\" width=\"60%\"></div>\n<p>!!! Example \"A+B\"</p>\n<div align=\"center\"><img src=\"https://cdn.hobbitqia.cc/20230928225409.png\" width=\"60%\"></div>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">More: try to do with $D=A*B-(A+C*B)$</code></pre></div>\n<p><strong>通用寄存器(GPR)</strong> 的优点是 访问速度快，可以有效减少访存操作，提高程序执行效率。但 <strong>GPR</strong> 的数量是有限的，<strong>过多的 GPR</strong> 会 增加硬件成本，也可能导致 <strong>寄存器查找时间增加</strong>，反而降低性能。因此，<strong>寄存器数量需要在性能和成本之间进行权衡</strong>。</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#anchor-7f977bb5514b76a1\">1. Introduction</a></p>\n<ul>\n<li><a href=\"#anchor-0a289e07dac6acca\">1.1. 冯·诺依曼结构</a></li>\n<li><a href=\"#anchor-398c2d8afc714d77\">1.2. 计算机的分类</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#anchor-5af805f874eaa242\">2. Performance</a></p>\n<ul>\n<li><a href=\"#anchor-532237369ea34ff5\">2.1. 衡量性能的指标</a></li>\n<li><a href=\"#anchor-f154532bd20a7d5b\">2.2. 影响计算机性能的因素</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#anchor-8e3f7a486ec63a68\">3. Technology Trend</a></p>\n</li>\n<li>\n<p><a href=\"#anchor-38e23199f0112966\">4. Quantitative Approaches</a></p>\n<ul>\n<li><a href=\"#anchor-6411ee08c4d484eb\">4.1. CPU 性能公式</a></li>\n<li><a href=\"#anchor-40cab6f875502bb7\">4.2. 阿姆达尔定律</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#anchor-9568c2c3de8842fd\">5. Great Architecture Ideas</a></p>\n</li>\n<li>\n<p><a href=\"#anchor-0fe57af9079c83eb\">6. 指令集架构(Instruction Set Architecture, ISA)</a></p>\n<ul>\n<li><a href=\"#anchor-75db9355a88d1a21\">6.1. ISA 分类依据 (ISA Classification Basis)</a></li>\n<li><a href=\"#anchor-ac9fd10782c889ff\">6.2. 通用寄存器分类 (GPR Classification)</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"I 计算机设计基础","description":null},"fields":{"cover":null,"slug":"/course/ca/note/1/","cssclasses":null,"isDoc":true,"authors":[],"createTime":null,"updateTime":null,"category":"[{\"name\":\"课程笔记\",\"to\":\"/course/\"}]","propsJson":null}},"previous":null,"next":null},"pageContext":{"id":"3fbd83cf-bb42-5c8d-b262-3debc09e1db9","previousPostId":null,"nextPostId":null,"navJson":"[{\"slug\":\"/course\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/index.md\",\"title\":\"导航\"},{\"title\":\"通识课程\",\"children\":[{\"slug\":\"/course/calculus\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/calculus/index.md\",\"title\":\"微积分\"},{\"slug\":\"/course/linear-algebra\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/linear-algebra/index.md\",\"title\":\"线性代数\"},{\"slug\":\"/course/physics\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/physics/index.md\",\"title\":\"工程物理学\"}]},{\"title\":\"专业必修课程\",\"children\":[{\"slug\":\"/course/dm\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/dm/index.md\",\"title\":\"离散数学及其应用\"},{\"slug\":\"/course/ptms\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/ptms/index.md\",\"title\":\"概率论与数理统计\"},{\"slug\":\"/course/ads\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/ads/index.md\",\"title\":\"高级数据结构\"},{\"slug\":\"/course/dd\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/dd/index.md\",\"title\":\"数字逻辑设计\"},{\"slug\":\"/course/co\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/co/index.md\",\"title\":\"计算机组成\"}]},{\"title\":\"专业选修课程\",\"children\":[{\"slug\":\"/course/java\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/java/index.md\",\"title\":\"Java 应用技术\"}]},{\"title\":\"个性修读课程\",\"children\":[{\"slug\":\"/course/fasm\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/fasm/index.md\",\"title\":\"汇编程序设计基础\"}]}]"}},"staticQueryHashes":["3871233186"],"slicesMap":{}}