{"componentChunkName":"component---src-templates-post-js","path":"/course/co/hw/chap2/","result":{"data":{"site":{"siteMetadata":{"title":"mem 的小站"}},"post":{"id":"980e506d-9d57-5a80-a4ef-8c153f7c031a","excerpt":"2.4 [10] <§2.2, 2.3> For the RISC-V assembly instructions below, what is the corresponding C statement? Assume that the variables , , , , and  are assigned to…","html":"<h2 id=\"anchor-e1b49defbdd2a218\" style=\"position: relative;\"><a href=\"#anchor-e1b49defbdd2a218\" aria-label=\"anchor e1b49defbdd2a218 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.4</h2>\n<blockquote>\n<p>[10] &#x3C;§2.2, 2.3> For the RISC-V assembly instructions below, what is the corresponding C statement? Assume that the variables <code class=\"language-text\">f</code>, <code class=\"language-text\">g</code>, <code class=\"language-text\">h</code>, <code class=\"language-text\">i</code>, and <code class=\"language-text\">j</code> are assigned to registers <code class=\"language-text\">x5</code>, <code class=\"language-text\">x6</code>, <code class=\"language-text\">x7</code>, <code class=\"language-text\">x28</code>, and <code class=\"language-text\">x29</code>, respectively, and the base address of the arrays A and B are in registers <code class=\"language-text\">x10</code> and <code class=\"language-text\">x11</code>, respectively.</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">slli x30, x5, 3       // x30 = f*8\nadd  x30, x10, x30    // x30 = &amp;A[f]\nslli x31, x6, 3       // x31 = g*8\nadd  x31, x11, x31    // x31 = &amp;B[g]\nld   x5, 0(x30)       // f = A[f]\n\naddi x12, x30, 8\nld   x30, 0(x12)\nadd  x30, x30, x5\nsd   x30, 0(x31)</code></pre></div>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">slli x30, x5, 3       // x30 = f * 8\nadd  x30, x10, x30    // x30 = &amp;A[f]\nslli x31, x6, 3       // x31 = g * 8\nadd  x31, x11, x31    // x31 = &amp;B[g]\nld   x5, 0(x30)       // f = A[f]\naddi x12, x30, 8      // x12 = &amp;A[f] + 8\nld   x30, 0(x12)      // x30 = A[f+1]\nadd  x30, x30, x5     // x30 = x30 + x5 = A[f+1] + A[f]\nsd   x30, 0(x31)      // B[g] = x30 = A[f+1] + A[f]</code></pre></div>\n<p>故整段汇编可以等效为 C 语句：<code class=\"language-text\">B[g] = A[f+1] + A[f]</code>。</p>\n<h2 id=\"anchor-bab2f0db5fb9b90a\" style=\"position: relative;\"><a href=\"#anchor-bab2f0db5fb9b90a\" aria-label=\"anchor bab2f0db5fb9b90a permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.8</h2>\n<blockquote>\n<p>[10] &#x3C;§2.2, 2.3> Translate the following RISC-V code to C. Assume that the variables f, g, h, i, and j are assigned to registers x5, x6, x7, x28, and x29, respectively, and the base address of the arrays A and B are in registers x10 and x11, respectively.</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">addi x30, x10, 8\naddi x31, x10, 0\nsd   x31, 0(x30)\nld   x30, 0(x30)\nadd  x5,  x30, x31</code></pre></div>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">addi x30, x10, 8        // x30 = &amp;A[1]\naddi x31, x10, 0        // x31 = &amp;A[0]\nsd   x31, 0(x30)        // A[1] = x31 = &amp;A[0]\nld   x30, 0(x30)        // x30 = A[1] = &amp;A[0]\nadd  x5,  x30, x31      // f = &amp;A[0] + &amp;A[0]</code></pre></div>\n<p>故整段汇编可以等效为 C 语句：<code class=\"language-text\">f = (&amp;A[0]) * 2</code>。</p>\n<h2 id=\"anchor-b0444db453be659e\" style=\"position: relative;\"><a href=\"#anchor-b0444db453be659e\" aria-label=\"anchor b0444db453be659e permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.12</h2>\n<blockquote>\n<p>[5] &#x3C;§§2.2, 2.5> Provide the instruction type and assembly language instruction for the following binary value:</p>\n<p><code class=\"language-text\">0000 0000 0001 0000 1000 0000 1011 0011</code><sub><code class=\"language-text\">two</code></sub></p>\n<p>Hint: Figure 2.20 may be helpful.</p>\n</blockquote>\n<ul>\n<li>opcode: <code class=\"language-text\">0110011</code></li>\n<li>rd: <code class=\"language-text\">00001</code></li>\n<li>funct3: <code class=\"language-text\">000</code></li>\n<li>rs1: <code class=\"language-text\">00001</code></li>\n<li>rs2: <code class=\"language-text\">00001</code></li>\n<li>funct7: <code class=\"language-text\">0000000</code></li>\n</ul>\n<p>故这条语句是 R 型指令，对应的汇编语言为 <code class=\"language-text\">add x1, x1, x1</code>。</p>\n<h2 id=\"anchor-4074244f1e4ac462\" style=\"position: relative;\"><a href=\"#anchor-4074244f1e4ac462\" aria-label=\"anchor 4074244f1e4ac462 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.14</h2>\n<blockquote>\n<p>[5] &#x3C;§3.5> Provide the instruction type, assembly language instruction, and binary representation of instruction described by the following RISC-V fields:</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">opcode=0x33, funct3=0x0, funct7=0x20, rs2=5, rs1=7, rd=6</code></pre></div>\n</blockquote>\n<p>R 型指令，<code class=\"language-text\">sub x6, x7, x5</code></p>\n<h2 id=\"anchor-14f7bc0be37c1002\" style=\"position: relative;\"><a href=\"#anchor-14f7bc0be37c1002\" aria-label=\"anchor 14f7bc0be37c1002 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.17</h2>\n<blockquote>\n<p>[5] &#x3C;§2.6> Assume the following register contents:</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">x5 = 0x00000000AAAAAAAA, x6 = 0x1234567812345678</code></pre></div>\n</blockquote>\n<h3 id=\"anchor-fd223fe25714bcb6\" style=\"position: relative;\"><a href=\"#anchor-fd223fe25714bcb6\" aria-label=\"anchor fd223fe25714bcb6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.17.1</h3>\n<blockquote>\n<p>[5] &#x3C;§2.6> For the register values shown above, what is the value of x7 for the following sequence of instructions?</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">slli x7, x5, 4\nor   x7, x7, x6</code></pre></div>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">slli x7, x5, 4   // x7 = x5 &lt;&lt; 4 = 0x0000000AAAAAAAA0\nor x7, x7, x6    // x7 = x7 | x6 = 0x1234567ababefef8</code></pre></div>\n<p>故结果为：<code class=\"language-text\">0x1234567ababefef8</code></p>\n<h3 id=\"anchor-554e6e33cf509898\" style=\"position: relative;\"><a href=\"#anchor-554e6e33cf509898\" aria-label=\"anchor 554e6e33cf509898 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.17.2</h3>\n<blockquote>\n<p>[5] &#x3C;§2.6> For the register values shown above, what is the value of <code class=\"language-text\">x7</code> for the following sequence of instructions?</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">slli x7, x6, 4</code></pre></div>\n</blockquote>\n<p>结果为：<code class=\"language-text\">0x2345678123456780</code>。</p>\n<h3 id=\"anchor-a23c552221428990\" style=\"position: relative;\"><a href=\"#anchor-a23c552221428990\" aria-label=\"anchor a23c552221428990 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.17.3</h3>\n<blockquote>\n<p>[5] &#x3C;§2.6> For the register values shown above, what is the value of <code class=\"language-text\">x7</code> for the following sequence of instructions?</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">srli x7, x5, 3\nandi x7, x7, 0xFEF</code></pre></div>\n</blockquote>\n<p>结果为：<code class=\"language-text\">0x545</code>。</p>\n<h2 id=\"anchor-3a6d1413475367f3\" style=\"position: relative;\"><a href=\"#anchor-3a6d1413475367f3\" aria-label=\"anchor 3a6d1413475367f3 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.22</h2>\n<blockquote>\n<p>Suppose the program counter (PC) is set to 0x20000000.</p>\n</blockquote>\n<h3 id=\"anchor-db7bd335b5100407\" style=\"position: relative;\"><a href=\"#anchor-db7bd335b5100407\" aria-label=\"anchor db7bd335b5100407 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.22.1</h3>\n<blockquote>\n<p>[5] &#x3C;§2.10> What range of addresses can be reached using the RISC-V jump-and-link (jal) instruction? (In other words, what is the set of possible values for the PC after the jump instruction executes?)</p>\n</blockquote>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">[</mo><mtext>0x1FF00000</mtext><mo separator=\"true\">,</mo><mtext>0x200FFFFE</mtext><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[\\text{0x1FF00000}, \\text{0x200FFFFE}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord text\"><span class=\"mord\">0x1FF00000</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord text\"><span class=\"mord\">0x200FFFFE</span></span><span class=\"mclose\">]</span></span></span></span></span></div>\n<h3 id=\"anchor-168e21d5cbc732cb\" style=\"position: relative;\"><a href=\"#anchor-168e21d5cbc732cb\" aria-label=\"anchor 168e21d5cbc732cb permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.22.2</h3>\n<blockquote>\n<p>[5] &#x3C;§2.10> What range of addresses can be reached using the RISC-V branch if equal (beq) instruction? (In other words, what is the set of possible values for the PC after the branch instruction executes?)</p>\n</blockquote>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><mo stretchy=\"false\">[</mo><mtext>0x1FFFF000</mtext><mo separator=\"true\">,</mo><mtext>0x20000FFE</mtext><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[\\text{0x1FFFF000}, \\text{0x20000FFE}]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord text\"><span class=\"mord\">0x1FFFF000</span></span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord text\"><span class=\"mord\">0x20000FFE</span></span><span class=\"mclose\">]</span></span></span></span></span></div>\n<h2 id=\"anchor-0a508d6d97de2181\" style=\"position: relative;\"><a href=\"#anchor-0a508d6d97de2181\" aria-label=\"anchor 0a508d6d97de2181 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.24</h2>\n<blockquote>\n<p>Consider the following RISC-V loop:</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">LOOP: beq x6, x0, DONE\n      addi x6, x6, -1\n      addi x5, x5, 2\n      jal x0, LOOP\nDONE:</code></pre></div>\n</blockquote>\n<h3 id=\"anchor-2bdc625576677bbf\" style=\"position: relative;\"><a href=\"#anchor-2bdc625576677bbf\" aria-label=\"anchor 2bdc625576677bbf permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.24.1</h3>\n<blockquote>\n<p>[5] &#x3C;§2.7> Assume that the register <code class=\"language-text\">x6</code> is initialized to the value <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>10</mn></mrow><annotation encoding=\"application/x-tex\">10</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">10</span></span></span></span></span>. What is the final value in register <code class=\"language-text\">x5</code> assuming the <code class=\"language-text\">x5</code> is initially zero?</p>\n</blockquote>\n<p>执行 <code class=\"language-text\">x6</code> 次，每次让 <code class=\"language-text\">x5 += 2</code>，故结果为 <code class=\"language-text\">x5</code> 的最终结果为 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>20</mn></mrow><annotation encoding=\"application/x-tex\">20</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">20</span></span></span></span></span>。</p>\n<h3 id=\"anchor-e2d3282f89951a09\" style=\"position: relative;\"><a href=\"#anchor-e2d3282f89951a09\" aria-label=\"anchor e2d3282f89951a09 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.24.2</h3>\n<blockquote>\n<p>[5] &#x3C;§2.7> For the loop above, write the equivalent C code. Assume that the registers <code class=\"language-text\">x5</code> and <code class=\"language-text\">x6</code> are integers acc and i, respectively.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> acc <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> i <span class=\"token operator\">=</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ti <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\tacc <span class=\"token operator\">=</span> acc <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"anchor-5f009f02640b73db\" style=\"position: relative;\"><a href=\"#anchor-5f009f02640b73db\" aria-label=\"anchor 5f009f02640b73db permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.24.3</h3>\n<blockquote>\n<p>[5] &#x3C;§2.7> For the loop written in RISC-V assembly above, assume that the register <code class=\"language-text\">x6</code> is initialized to the value <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>N</mi></mrow><annotation encoding=\"application/x-tex\">N</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span></span></span></span></span>. How many RISC-V instructions are executed?</p>\n</blockquote>\n<p>共 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>4</mn><mi>N</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">4N+1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">4</span><span class=\"mord mathnormal\" style=\"margin-right:0.10903em;\">N</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></span> 条，其中最后一条是 <code class=\"language-text\">x6 == x0</code> 时跳出循环。</p>\n<h3 id=\"anchor-eb402d782f5195da\" style=\"position: relative;\"><a href=\"#anchor-eb402d782f5195da\" aria-label=\"anchor eb402d782f5195da permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.24.4</h3>\n<blockquote>\n<p>[5] &#x3C;§2.7> For the loop written in RISC-V assembly above, replace the instruction \"<code class=\"language-text\">beq x6, x0, DONE</code>\" with the instruction \"<code class=\"language-text\">blt x6, x0, DONE</code>\" and write the equivalent C code.</p>\n</blockquote>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\ti <span class=\"token operator\">=</span> i <span class=\"token operator\">-</span> <span class=\"token number\">1</span>\n\tacc <span class=\"token operator\">=</span> acc <span class=\"token operator\">+</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"anchor-6409b6f947352993\" style=\"position: relative;\"><a href=\"#anchor-6409b6f947352993\" aria-label=\"anchor 6409b6f947352993 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.29</h2>\n<blockquote>\n<p>[30] &#x3C;§2.8> Implement the following C code in RISC-V assembly. Hint: Remember that the stack pointer must remain aligned on a multiple of 16.</p>\n<div class=\"gatsby-highlight\" data-language=\"plain\"><pre class=\"language-plain\"><code class=\"language-plain\">int fib(int n) {\n\tif (n == 0)\n\t\treturn 0;\n\telse if (n == 1)\n\t\treturn 1;\n\telse\n\t\treturn fib(n-1) + fib(n-2);\n}</code></pre></div>\n</blockquote>\n<p>函数参数 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span> 存储在 <code class=\"language-text\">a0</code>（<code class=\"language-text\">x10</code>）寄存器中，最后返回值 <code class=\"language-text\">fib(n)</code> 也会存储在 <code class=\"language-text\">a0</code> 寄存器中。</p>\n<div class=\"gatsby-highlight\" data-language=\"asm\"><pre class=\"language-asm\"><code class=\"language-asm\">FIB:\n\tbeq a0, x0, RETURN     // if (n == 0) return 0\n\taddi t0, x0, 1\n\tbeq a0, t0, RETURN     // if (n == 1) return 1\n\n\taddi sp, sp, -16\n\tsd a0, 0\n\tsd ra, 8\n\taddi a0, a0, -1\n\tjal ra, FIB\n\tmv t0, a0\n\tld a0, 0\n\tsd t0, 0\n\taddi a0, a0, -2\n\tjal ra, FIB\n\tld t0, 0\n\tld ra, 8\n\tadd a0, a0, t0         // ret value = fib(n - 1) + fib(n - 2)\n\nRETURN:\n\tjalr x0, ra            // return</code></pre></div>\n<p><details open disabled class=\"callout callout-type-note\"><summary> Note</summary><div class=\"callout-content\"><p></p><p>注意设计递归函数时对 return address（<code class=\"language-text\">ra</code> / <code class=\"language-text\">x1</code> 寄存器）的维护。</p></div></details></p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#anchor-e1b49defbdd2a218\">2.4</a></p>\n</li>\n<li>\n<p><a href=\"#anchor-bab2f0db5fb9b90a\">2.8</a></p>\n</li>\n<li>\n<p><a href=\"#anchor-b0444db453be659e\">2.12</a></p>\n</li>\n<li>\n<p><a href=\"#anchor-4074244f1e4ac462\">2.14</a></p>\n</li>\n<li>\n<p><a href=\"#anchor-14f7bc0be37c1002\">2.17</a></p>\n<ul>\n<li><a href=\"#anchor-fd223fe25714bcb6\">2.17.1</a></li>\n<li><a href=\"#anchor-554e6e33cf509898\">2.17.2</a></li>\n<li><a href=\"#anchor-a23c552221428990\">2.17.3</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#anchor-3a6d1413475367f3\">2.22</a></p>\n<ul>\n<li><a href=\"#anchor-db7bd335b5100407\">2.22.1</a></li>\n<li><a href=\"#anchor-168e21d5cbc732cb\">2.22.2</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#anchor-0a508d6d97de2181\">2.24</a></p>\n<ul>\n<li><a href=\"#anchor-2bdc625576677bbf\">2.24.1</a></li>\n<li><a href=\"#anchor-e2d3282f89951a09\">2.24.2</a></li>\n<li><a href=\"#anchor-5f009f02640b73db\">2.24.3</a></li>\n<li><a href=\"#anchor-eb402d782f5195da\">2.24.4</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#anchor-6409b6f947352993\">2.29</a></p>\n</li>\n</ul>","frontmatter":{"title":"Chapter 2","date":null,"description":null},"fields":{"cover":null,"slug":"/course/co/hw/chap2/","cssclasses":null,"isDoc":true,"category":"[{\"name\":\"课程笔记\",\"to\":\"/course/\"}]","propsJson":null}},"previous":null,"next":null},"pageContext":{"id":"980e506d-9d57-5a80-a4ef-8c153f7c031a","previousPostId":null,"nextPostId":null,"navJson":"[{\"slug\":\"/course/co\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/co/index.md\",\"title\":\"Intro\"},{\"title\":\"Note\",\"children\":[{\"slug\":\"/course/co/note/1\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/co/note/1.md\",\"title\":\"I. Prelude\"},{\"slug\":\"/course/co/note/2\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/co/note/2.md\",\"title\":\"II. Arithmetic\"},{\"slug\":\"/course/co/note/3\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/co/note/3.md\",\"title\":\"III. Instructions\"}]}]"}},"staticQueryHashes":[],"slicesMap":{}}