{"componentChunkName":"component---src-templates-post-js","path":"/course/co/note/1/","result":{"data":{"site":{"siteMetadata":{"title":"mem 的小站"}},"post":{"id":"a705df90-06bb-5c41-a762-27c7d023ccd1","excerpt":"1. Introduction to Computers 1.1. Computer Generations Pre-computer (~ 1946) 非电子(non-electrical) 不可编程(non-programmable) First Generation (1946 ～ 195…","html":"<h2 id=\"anchor-df56d39f0540ed3d\" style=\"position: relative;\">1. Introduction to Computers<a href=\"#anchor-df56d39f0540ed3d\" aria-label=\"anchor df56d39f0540ed3d permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"anchor-c9afee628b098fb8\" style=\"position: relative;\">1.1. Computer Generations<a href=\"#anchor-c9afee628b098fb8\" aria-label=\"anchor c9afee628b098fb8 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>Pre-computer (~ 1946)\n<ul>\n<li><strong>非电子(non-electrical)</strong></li>\n<li><strong>不可编程(non-programmable)</strong></li>\n</ul>\n</li>\n<li>First Generation (1946 ～ 1956)\n<ul>\n<li><strong>电子管(vacuum tubes)</strong></li>\n<li><strong>可编程(programmable)</strong></li>\n<li>第一台通用计算机 ENIAC：通用指令集、十进制、可编程、图灵完全。</li>\n<li><strong>图灵完备性(Turing-Complete)</strong>：指一个计算模型能够模拟任何其他计算模型的能力，任何可以被计算的问题都可以通过图灵完备的模型来解决。</li>\n<li><strong>冯诺依曼架构(von Neumann architecture)</strong>：计算与存储分离、数据与指令保存在同一个存储器。</li>\n</ul>\n</li>\n<li>Second Generation (1956 ～ 1964)\n<ul>\n<li>使用 <strong>晶体管(transistor)</strong> 代替电子管：体积减小、速度加快、计算更可靠。</li>\n<li><strong>编程语言(programming language)</strong> 开始应用。</li>\n</ul>\n</li>\n<li>Third Generation (1964 ～ 1971)\n<ul>\n<li><strong>集成电路(integrated circuit)</strong></li>\n<li><strong>操作系统(operating system, OS)</strong></li>\n</ul>\n</li>\n<li>Fourth Generation (1971 ～ now)\n<ul>\n<li><strong>微处理器(microprocessor)</strong> 代替集成电路。</li>\n<li>个人计算机兴起。</li>\n<li><strong>精简指令集(Reduced Instruction Set Computer, RISC)</strong>：相比 <strong>复杂指令集(Complex Instruction Set Computer, CISC)</strong> 用尽量少的时钟周期、指令编码长度定长。</li>\n</ul>\n</li>\n<li>Fifth Generation (future)\n<ul>\n<li>Still in development...</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"anchor-856f512baa370703\" style=\"position: relative;\">1.2. Classes of Computers<a href=\"#anchor-856f512baa370703\" aria-label=\"anchor 856f512baa370703 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>Personal computers 个人计算机\n<ul>\n<li>General purpose, variety of software</li>\n<li>Subject to cost/performance tradeoff</li>\n</ul>\n</li>\n<li>Server computers 服务器\n<ul>\n<li>Network based</li>\n<li>High capacity, performance, reliability</li>\n<li>Range from small servers to building sized</li>\n</ul>\n</li>\n<li>Supercomputers 超级计算机\n<ul>\n<li>High-end scientific and engineering calculations</li>\n<li>Highest capability but represent a small fraction of the overall computer market</li>\n</ul>\n</li>\n<li>Embedded computers 嵌入式计算机\n<ul>\n<li>Hidden as components of systems</li>\n<li>Stringent power/performance/cost constraints</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"anchor-8817ec9b48793d80\" style=\"position: relative;\">2. Eight Great Ideas<a href=\"#anchor-8817ec9b48793d80\" aria-label=\"anchor 8817ec9b48793d80 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"anchor-98cd7332baffd4a9\" style=\"position: relative;\">2.1. Design for Moore’s Law<a href=\"#anchor-98cd7332baffd4a9\" aria-label=\"anchor 98cd7332baffd4a9 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>设计应考虑到未来的发展，而不是仅仅关注当前的起点。</p>\n<p><details open disabled class=\"callout callout-type-important\"><summary> <strong>摩尔定律(Moore's Law)</strong></summary><div class=\"callout-content\"><p></p><p>Integrated circuit resources double every 18-24 months. 单芯片上所集成的晶体管资源每 18 至 24 个月翻一番。</p></div></details></p>\n<ul>\n<li>Design for where it will be when finishes rather than design for where it starts.</li>\n</ul>\n<h3 id=\"anchor-b3646d9d00f40bfe\" style=\"position: relative;\">2.2. Use Abstraction to Simplify Design<a href=\"#anchor-b3646d9d00f40bfe\" aria-label=\"anchor b3646d9d00f40bfe permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>通过抽象化来减少复杂性，使设计更易于理解和管理。</p>\n<ul>\n<li>层次化、模块化的设计</li>\n</ul>\n<h3 id=\"anchor-e8f4711f54404312\" style=\"position: relative;\">2.3. Make the Common Case Fast<a href=\"#anchor-e8f4711f54404312\" aria-label=\"anchor e8f4711f54404312 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>优化常见情况的性能，以提高整体效率。</p>\n<h3 id=\"anchor-6dac6bb9bfbbb0a8\" style=\"position: relative;\">2.4. Performance via Parallelism<a href=\"#anchor-6dac6bb9bfbbb0a8\" aria-label=\"anchor 6dac6bb9bfbbb0a8 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>通过同时执行多个任务来提升系统性能。</p>\n<h3 id=\"anchor-946223c42f99ca4b\" style=\"position: relative;\">2.5. Performance via Pipelining<a href=\"#anchor-946223c42f99ca4b\" aria-label=\"anchor 946223c42f99ca4b permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>通过将任务分解为多个阶段并同时处理来提高效率。</p>\n<ul>\n<li>换句话说就是，每个流程同时进行，只不过每一个流程工作的对象是时间上相邻的若干产品；</li>\n<li>相比于等一个产品完全生产完再开始下一个产品的生产，会快很多；</li>\n<li>希望每一个流程的时间是相对均匀的；</li>\n</ul>\n<h3 id=\"anchor-5dbf7ceb0425c78f\" style=\"position: relative;\">2.6. Performance via Prediction<a href=\"#anchor-5dbf7ceb0425c78f\" aria-label=\"anchor 5dbf7ceb0425c78f permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>通过预测未来的执行路径来减少延迟。</p>\n<ul>\n<li>例如先当作  <code class=\"language-text\">if()</code>  条件成立，执行完内部内容，如果后来发现确实成立，那么直接 apply，否则就再重新正常做；</li>\n<li>这么做就好在（又或者说只有这种情况适合预测），预测成功了就加速了，预测失败了纠正的成本也不高；</li>\n</ul>\n<h3 id=\"anchor-948b7443621af80f\" style=\"position: relative;\">2.7. Hierarchy of Memories<a href=\"#anchor-948b7443621af80f\" aria-label=\"anchor 948b7443621af80f permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>不同类型的存储器具有不同的速度和容量，合理利用可以提高性能。</p>\n<ul>\n<li>Disk / Tape -> Main Memory(DRAM) -> L2-Cache(SRAM) -> L1-Cache(On-Chip) -> Registers</li>\n</ul>\n<h3 id=\"anchor-7d3eaf0667e5a7bf\" style=\"position: relative;\">2.8. Dependability via Redundancy<a href=\"#anchor-7d3eaf0667e5a7bf\" aria-label=\"anchor 7d3eaf0667e5a7bf permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>通过冗余设计来提高系统的可靠性，确保单点故障不会导致系统崩溃。</p>\n<ul>\n<li>类似于卡车的多个轮胎，一个模块 down 了以后不会剧烈影响整个系统；</li>\n</ul>\n<h2 id=\"anchor-397465ea0943c9ba\" style=\"position: relative;\">3. Below Program<a href=\"#anchor-397465ea0943c9ba\" aria-label=\"anchor 397465ea0943c9ba permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h2 id=\"anchor-d10f3756bc97f899\" style=\"position: relative;\">4. Performance<a href=\"#anchor-d10f3756bc97f899\" aria-label=\"anchor d10f3756bc97f899 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<ul>\n<li><strong>Throughput / Bandwidth</strong> 单位时间内完成的任务数量</li>\n</ul>\n<p><strong>性能(performance)</strong> 定义为 <strong>运行时间(execution time)</strong> 的倒数：</p>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mrow><msub><mtext>Performance</mtext><mi>X</mi></msub><mo>=</mo><mfrac><mn>1</mn><msub><mtext>Execution time</mtext><mi>X</mi></msub></mfrac></mrow><annotation encoding=\"application/x-tex\">\\text{Performance}_X = \\frac{1}{\\text{Execution time}_X}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">Performance</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:2.1574em;vertical-align:-0.836em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3214em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">Execution time</span></span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3283em;\"><span style=\"top:-2.55em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\" style=\"margin-right:0.07847em;\">X</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\">1</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.836em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span></span></div>\n<p><strong>相对性能(relative performance)</strong> 就是非常 naive 地对两个比较对象求比值，我们通常所说的比较两个东西的性能，也就是指计算它们的相对性能。</p>\n<p>为了具体分析 CPU 的性能时，我们需要更加具体的指标：</p>\n<ul>\n<li><strong>CPU 执行时间(CPU execution time, CPU time)</strong>：程序在 CPU 上的实际运行时间。</li>\n<li><strong>CPU 时钟周期数(CPU clock cycle)</strong>：程序执行了多少个周期。</li>\n<li><strong>时钟频率(clock rate)</strong> / <strong>时钟周期(clock cycle time)</strong>：两者互为倒数。</li>\n</ul>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mtext>CPU time</mtext></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mtext>CPU clock cycles</mtext><mo>×</mo><mtext>clock cycle time</mtext></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow></mrow></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mfrac><mtext>CPU clock cycles</mtext><mtext>clock rate</mtext></mfrac></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\n    \\text{CPU time} &#x26;= \\text{CPU clock cycles} \\times \\text{clock cycle time} \\\\\n    &#x26;= \\frac{\\text{CPU clock cycles}}{\\text{clock rate}}\n\\end{aligned}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:3.8574em;vertical-align:-1.6787em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.1787em;\"><span style=\"top:-4.7102em;\"><span class=\"pstrut\" style=\"height:3.3714em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">CPU time</span></span></span></span><span style=\"top:-2.6787em;\"><span class=\"pstrut\" style=\"height:3.3714em;\"></span><span class=\"mord\"></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6787em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:2.1787em;\"><span style=\"top:-4.7102em;\"><span class=\"pstrut\" style=\"height:3.3714em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord text\"><span class=\"mord\">CPU clock cycles</span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord text\"><span class=\"mord\">clock cycle time</span></span></span></span><span style=\"top:-2.6787em;\"><span class=\"pstrut\" style=\"height:3.3714em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.3714em;\"><span style=\"top:-2.314em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">clock rate</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.677em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">CPU clock cycles</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.686em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1.6787em;\"><span></span></span></span></span></span></span></span></span></span></span></span></div>\n<p>在不同的架构上，不同的指令可能具有不同的周期数，我们记其平均值为每条指令的 <strong>平均周期数(average clock cycles per instruction, CPI)</strong>。</p>\n<p>同时，还有一个容易得到的关系：</p>\n<div class=\"math math-display\"><span class=\"katex-display\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\" display=\"block\"><semantics><mtable rowspacing=\"0.25em\" columnalign=\"right left\" columnspacing=\"0em\"><mtr><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mtext>CPU clock cycles</mtext></mstyle></mtd><mtd><mstyle scriptlevel=\"0\" displaystyle=\"true\"><mrow><mrow></mrow><mo>=</mo><mtext>Instructions count</mtext><mo>×</mo><mtext>CPI</mtext></mrow></mstyle></mtd></mtr></mtable><annotation encoding=\"application/x-tex\">\\begin{aligned}\n    \\text{CPU clock cycles} &#x26;= \\text{Instructions count} \\times \\text{CPI}\n\\end{aligned}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.5em;vertical-align:-0.5em;\"></span><span class=\"mord\"><span class=\"mtable\"><span class=\"col-align-r\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1em;\"><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord text\"><span class=\"mord\">CPU clock cycles</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5em;\"><span></span></span></span></span></span><span class=\"col-align-l\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:1em;\"><span style=\"top:-3.16em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\"><span class=\"mord\"></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mord text\"><span class=\"mord\">Instructions count</span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mord text\"><span class=\"mord\">CPI</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.5em;\"><span></span></span></span></span></span></span></span></span></span></span></span></div>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#anchor-df56d39f0540ed3d\">1. Introduction to Computers</a></p>\n<ul>\n<li><a href=\"#anchor-c9afee628b098fb8\">1.1. Computer Generations</a></li>\n<li><a href=\"#anchor-856f512baa370703\">1.2. Classes of Computers</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#anchor-8817ec9b48793d80\">2. Eight Great Ideas</a></p>\n<ul>\n<li><a href=\"#anchor-98cd7332baffd4a9\">2.1. Design for Moore’s Law</a></li>\n<li><a href=\"#anchor-b3646d9d00f40bfe\">2.2. Use Abstraction to Simplify Design</a></li>\n<li><a href=\"#anchor-e8f4711f54404312\">2.3. Make the Common Case Fast</a></li>\n<li><a href=\"#anchor-6dac6bb9bfbbb0a8\">2.4. Performance via Parallelism</a></li>\n<li><a href=\"#anchor-946223c42f99ca4b\">2.5. Performance via Pipelining</a></li>\n<li><a href=\"#anchor-5dbf7ceb0425c78f\">2.6. Performance via Prediction</a></li>\n<li><a href=\"#anchor-948b7443621af80f\">2.7. Hierarchy of Memories</a></li>\n<li><a href=\"#anchor-7d3eaf0667e5a7bf\">2.8. Dependability via Redundancy</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#anchor-397465ea0943c9ba\">3. Below Program</a></p>\n</li>\n<li>\n<p><a href=\"#anchor-d10f3756bc97f899\">4. Performance</a></p>\n</li>\n</ul>","frontmatter":{"title":"Part 1. Prelude","date":null,"description":null},"fields":{"cover":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#081838","images":{"fallback":{"src":"/static/7f24f5d1972235f67847fc0b88a5a8bd/42e53/X7MD2Cti.png","srcSet":"/static/7f24f5d1972235f67847fc0b88a5a8bd/74b4e/X7MD2Cti.png 231w,\n/static/7f24f5d1972235f67847fc0b88a5a8bd/68896/X7MD2Cti.png 462w,\n/static/7f24f5d1972235f67847fc0b88a5a8bd/42e53/X7MD2Cti.png 923w","sizes":"(min-width: 923px) 923px, 100vw"},"sources":[{"srcSet":"/static/7f24f5d1972235f67847fc0b88a5a8bd/b83be/X7MD2Cti.webp 231w,\n/static/7f24f5d1972235f67847fc0b88a5a8bd/9a9b4/X7MD2Cti.webp 462w,\n/static/7f24f5d1972235f67847fc0b88a5a8bd/877fc/X7MD2Cti.webp 923w","type":"image/webp","sizes":"(min-width: 923px) 923px, 100vw"}]},"width":923,"height":602}}},"slug":"/course/co/note/1/","isDoc":true,"category":"[{\"name\":\"课程笔记\",\"to\":\"/course/\"}]","propsJson":null}},"previous":null,"next":null},"pageContext":{"id":"a705df90-06bb-5c41-a762-27c7d023ccd1","previousPostId":null,"nextPostId":null,"navJson":"[{\"slug\":\"/course\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/index.md\",\"title\":\"导航\"},{\"title\":\"通识课程\",\"children\":[{\"slug\":\"/course/calculus\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/calculus/index.md\",\"title\":\"微积分\"},{\"slug\":\"/course/linear-algebra\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/linear-algebra/index.md\",\"title\":\"线性代数\"},{\"slug\":\"/course/c-programming\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/c-programming/index.md\",\"title\":\"C 语言程序设计\"}]},{\"title\":\"专业必修课程\",\"children\":[{\"slug\":\"/course/dm\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/dm/index.md\",\"title\":\"离散数学及其应用\"},{\"slug\":\"/course/ads\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/ads/index.md\",\"title\":\"高级数据结构\"},{\"slug\":\"/course/oop\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/oop/index.md\",\"title\":\"面向对象程序设计\"},{\"slug\":\"/course/dd\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/dd/index.md\",\"title\":\"数字逻辑设计\"},{\"slug\":\"/course/co\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/co/index.md\",\"title\":\"计算机组成\"}]},{\"title\":\"个性修读课程\",\"children\":[{\"slug\":\"/course/fasm\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/fasm/index.md\",\"title\":\"汇编程序设计基础\"}]}]"}},"staticQueryHashes":[],"slicesMap":{}}