{"componentChunkName":"component---src-templates-post-js","path":"/course/dm/note/8/","result":{"data":{"site":{"siteMetadata":{"title":"mem 的小站"}},"post":{"id":"6afc80c2-0efe-548e-9366-5e51daa5e2cf","excerpt":"本篇笔记主要介绍了树的基本概念和术语，包括树的定义、性质、不同类型的树（如二叉树和  叉树）、树的应用（如二叉搜索树和前缀编码）、树的遍历方法以及生成树的相关内容。通过这些内容的学习，读者将能够理解树在离散数学中的重要性，并掌握如何分析和应用这些树的知识。（由 gpt-4o-mini 生成摘要）","html":"<blockquote>\n<p>本篇笔记主要介绍了树的基本概念和术语，包括树的定义、性质、不同类型的树（如二叉树和 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span></span> 叉树）、树的应用（如二叉搜索树和前缀编码）、树的遍历方法以及生成树的相关内容。通过这些内容的学习，读者将能够理解树在离散数学中的重要性，并掌握如何分析和应用这些树的知识。<small style=\"font-style: italic; opacity: 0.5\">（由 gpt-4o-mini 生成摘要）</small></p>\n</blockquote>\n<!-- more -->\n<h2 id=\"anchor-3844d0cdba97795a\" style=\"position: relative;\"><a href=\"#anchor-3844d0cdba97795a\" aria-label=\"anchor 3844d0cdba97795a permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. 树论术语 Tree Terminologies</h2>\n<p><strong>树(tree)</strong> 是没有简单环的连通无向图。</p>\n<p><strong>森林(forest)</strong> 是没有简单环的无向图。</p>\n<p><details open class=\"callout callout-type-important\"><summary style=\"pointer-events: none;\"> Theorem</summary><div class=\"callout-content\"><p></p><p>一个无向图 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi><mo>=</mo><mo stretchy=\"false\">(</mo><mi>V</mi><mo separator=\"true\">,</mo><mi>E</mi><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">G=(V,E)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">(</span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.05764em;\">E</span><span class=\"mclose\">)</span></span></span></span></span> 是树当且仅当对于 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>V</mi></mrow><annotation encoding=\"application/x-tex\">V</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.22222em;\">V</span></span></span></span></span> 中的任意两点，都有唯一的一条简单路径。</p></div></details></p>\n<p><strong>有根树(rooted tree)</strong>：在树的若干节点中，选择一个特定的节点作为<strong>根(root)</strong>，这样的树称为有根树，在有根树中我们有如下概念：</p>\n<ul>\n<li><strong>父亲节点(parent)</strong>：对于非根节点 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span></span>，其父亲节点是唯一的有指向 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span></span> 的有向边的节点（以根节点为起点给边定向）。</li>\n<li><strong>孩子节点(child/children)</strong>：若 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span></span> 是 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span></span> 的父亲，则称 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span></span> 是 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span></span> 的一个孩子节点。</li>\n<li><strong>兄弟节点(sibling)</strong>：有相同父亲节点的两个节点互称兄弟节点。</li>\n<li><strong>祖先节点(ancestor)</strong>：节点 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span></span> 的祖先是从根到 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span></span> 的路径上的所有节点。</li>\n<li><strong>后代节点(descendant)</strong>：若 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span></span> 是 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span></span> 的祖先，则称 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span></span> 是 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>u</mi></mrow><annotation encoding=\"application/x-tex\">u</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">u</span></span></span></span></span> 的一个后代节点。</li>\n<li><strong>叶子节点(leaf)</strong>：没有孩子节点的节点称为叶子节点。</li>\n<li><strong>内部节点(internal vertex)</strong>：有孩子节点的节点称为内部节点。</li>\n<li><strong>子树(subtree)</strong>：点 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span></span> 的子树是指 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span></span> 和 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span></span> 的所有后代节点组成的子图。</li>\n</ul>\n<h2 id=\"anchor-ff920f68464938bb\" style=\"position: relative;\"><a href=\"#anchor-ff920f68464938bb\" aria-label=\"anchor ff920f68464938bb permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. 树的性质 Tree Properties</h2>\n<p>一棵 m-叉树被认为是平衡的当且仅当每个叶子节点的深度不是 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi></mrow><annotation encoding=\"application/x-tex\">h</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">h</span></span></span></span></span> 就是 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>h</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">h-1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.7778em;vertical-align:-0.0833em;\"></span><span class=\"mord mathnormal\">h</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">−</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></span>。</p>\n<h2 id=\"anchor-5ef527b0c53a3961\" style=\"position: relative;\"><a href=\"#anchor-5ef527b0c53a3961\" aria-label=\"anchor 5ef527b0c53a3961 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. 二叉树 Binary Tree</h2>\n<p><strong>m 叉树(m-ary tree)</strong>：每个节点的孩子个数都不超过 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span></span> 的有根树。</p>\n<p><strong>二叉树(binary tree)</strong>：每个节点的孩子个数都不超过 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span></span> 的有根树。</p>\n<p><strong>满二叉树(full binary tree)</strong>：每个非叶节点的孩子个数都恰好为 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span></span> 的有根树。（即每个节点要么有两个儿子要么没有儿子，叶子结点可以不全在同一深度）</p>\n<p><strong>有序二叉树(ordered binary tree)</strong>：每个节点都有一个可能的左孩子和右孩子，据此可以定义<strong>左子树(left subtree)</strong> 和<strong>右子树(right subtree)</strong>。</p>\n<p>节点 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span></span> 的<strong>深度(level, depth)</strong>：根节点到 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>v</mi></mrow><annotation encoding=\"application/x-tex\">v</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">v</span></span></span></span></span> 的路径长度。（根节点的深度定义为 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></span>。）</p>\n<p><details open class=\"callout callout-type-warning\"><summary style=\"pointer-events: none;\"> Caution ★</summary><div class=\"callout-content\"><p></p><p>本书中，根节点深度定义为 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></span>。</p></div></details></p>\n<p>树 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>T</mi></mrow><annotation encoding=\"application/x-tex\">T</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.13889em;\">T</span></span></span></span></span> 的<strong>高度(height)</strong>：所有节点的深度最大值。</p>\n<h2 id=\"anchor-84dcad248dd9e312\" style=\"position: relative;\"><a href=\"#anchor-84dcad248dd9e312\" aria-label=\"anchor 84dcad248dd9e312 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. 树的应用 Applications of Trees</h2>\n<h3 id=\"anchor-9f28990e5914ebba\" style=\"position: relative;\"><a href=\"#anchor-9f28990e5914ebba\" aria-label=\"anchor 9f28990e5914ebba permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1. 二叉搜索树 Binary Search Tress</h3>\n<p><strong>二叉搜索树(binary search tree, BST)</strong>：略。</p>\n<h3 id=\"anchor-b20582fde596667f\" style=\"position: relative;\"><a href=\"#anchor-b20582fde596667f\" aria-label=\"anchor b20582fde596667f permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.2. 前缀编码 Prefix Codes</h3>\n<p><strong>前缀编码(prefix codes)</strong>：是一种编码方式，这样对于每个编码后的 01 串，他们都没有共同的前缀。相当于画出字典树的话所有编码最后都走到了叶子结点上。</p>\n<p>用<strong>哈夫曼编码(huffman coding)</strong> 的方法可以最小化每一字符编码后的平均位长。</p>\n<h3 id=\"anchor-c27937f6fe612ab0\" style=\"position: relative;\"><a href=\"#anchor-c27937f6fe612ab0\" aria-label=\"anchor c27937f6fe612ab0 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.3. 树的遍历 Tree Travelsal</h3>\n<ul>\n<li><strong>先序遍历(preorder travelsal)</strong></li>\n<li><strong>中序遍历(inorder travelsal)</strong></li>\n<li><strong>后序遍历(postorder travelsal)</strong></li>\n</ul>\n<h3 id=\"anchor-5f17b383e4fcdf2f\" style=\"position: relative;\"><a href=\"#anchor-5f17b383e4fcdf2f\" aria-label=\"anchor 5f17b383e4fcdf2f permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.4. 表达式表示法 Expression Notations</h3>\n<ul>\n<li><strong>前缀形式(prefix form)</strong>，<strong>波兰表达式(Polish notation)</strong></li>\n<li><strong>中缀形式(infix form)</strong></li>\n<li><strong>后缀形式(postfix form)</strong>，<strong>逆波兰表达式(reverse Polish notation)</strong></li>\n</ul>\n<h2 id=\"anchor-6b4bf42dd6523a9d\" style=\"position: relative;\"><a href=\"#anchor-6b4bf42dd6523a9d\" aria-label=\"anchor 6b4bf42dd6523a9d permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. 生成树 Spanning Tree</h2>\n<p>图 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span></span> 的<strong>生成树(spanning tree)</strong> 是包含 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>G</mi></mrow><annotation encoding=\"application/x-tex\">G</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6833em;\"></span><span class=\"mord mathnormal\">G</span></span></span></span></span> 中每一个节点的子图。</p>\n<p><details open class=\"callout callout-type-important\"><summary style=\"pointer-events: none;\"> Theorem 1</summary><div class=\"callout-content\"><p></p><p>A simple graph is connected if and only if it has a spanning tree.</p></div></details></p>\n<h3 id=\"anchor-d87acdf812ebaa54\" style=\"position: relative;\"><a href=\"#anchor-d87acdf812ebaa54\" aria-label=\"anchor d87acdf812ebaa54 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.1. 深度优先搜索 &#x26; 宽度优先搜索 DFS &#x26; BFS</h3>\n<p><strong>深度优先搜索(depth-first search, DFS)</strong> 又叫做<strong>回溯(backtracking)</strong>。</p>\n<p><strong>宽度优先搜索(breadth-first search, BFS)</strong>。</p>\n<p>可以用 DFS 或 BFS 来解决一些数据规模小的离散问题。</p>\n<p><img src=\"https://img.memset0.cn/2024/06/22/tNmm4Czr.png\"alt=\"tNmm4Czr.png\" style=\"width: 535px; \" ></p>\n<p><details open class=\"callout callout-type-example\"><summary style=\"pointer-events: none;\"> Ex. 11.4 29</summary><div class=\"callout-content\"><p></p><p>Explain how backtracking can be used to find a Hamilton path or circuit in a graph.</p><p><details  class=\"callout callout-type-quote\"><summary > Answer</summary><div class=\"callout-content\"><p></p><p><img src=\"https://img.memset0.cn/2024/06/22/APw1zFtg.png\"alt=\"\" style=\"width: 600px; \" ></p><p><img src=\"https://img.memset0.cn/2024/06/22/re1sEyKF.png\"alt=\"\" style=\"width: 600px; \" ></p></div></details></p></div></details></p>\n<h3 id=\"anchor-f24730bf3f82bfbe\" style=\"position: relative;\"><a href=\"#anchor-f24730bf3f82bfbe\" aria-label=\"anchor f24730bf3f82bfbe permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.2. 最小生成树 Minimum Spanning Trees</h3>\n<ul>\n<li>Prim’s algorithm：随便选定一个点作为开始的最小生成树，每次把与最小生成树外的点相连的最小边及其新增点加入最小生成树，直到得到整张图的最小生成树。</li>\n</ul>\n<p><img src=\"https://img.memset0.cn/2024/06/22/G3SYw7dY.png\"alt=\"G3SYw7dY.png\" style=\"width: 450px; \" ></p>\n<ul>\n<li>Kruskal’s algorithm：把所有边按照大小从小到大的顺序枚举，如果两端点不在同一个联通块中则将这条边加入最小生成树。</li>\n</ul>\n<p><img src=\"https://img.memset0.cn/2024/06/22/CobUzofr.png\"alt=\"CobUzofr.png\" style=\"width: 498px; \" ></p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#anchor-3844d0cdba97795a\">1. 树论术语 Tree Terminologies</a></p>\n</li>\n<li>\n<p><a href=\"#anchor-ff920f68464938bb\">2. 树的性质 Tree Properties</a></p>\n</li>\n<li>\n<p><a href=\"#anchor-5ef527b0c53a3961\">3. 二叉树 Binary Tree</a></p>\n</li>\n<li>\n<p><a href=\"#anchor-84dcad248dd9e312\">4. 树的应用 Applications of Trees</a></p>\n<ul>\n<li><a href=\"#anchor-9f28990e5914ebba\">4.1. 二叉搜索树 Binary Search Tress</a></li>\n<li><a href=\"#anchor-b20582fde596667f\">4.2. 前缀编码 Prefix Codes</a></li>\n<li><a href=\"#anchor-c27937f6fe612ab0\">4.3. 树的遍历 Tree Travelsal</a></li>\n<li><a href=\"#anchor-5f17b383e4fcdf2f\">4.4. 表达式表示法 Expression Notations</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#anchor-6b4bf42dd6523a9d\">5. 生成树 Spanning Tree</a></p>\n<ul>\n<li><a href=\"#anchor-d87acdf812ebaa54\">5.1. 深度优先搜索 &#x26; 宽度优先搜索 DFS &#x26; BFS</a></li>\n<li><a href=\"#anchor-f24730bf3f82bfbe\">5.2. 最小生成树 Minimum Spanning Trees</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Ch11 Tree","description":null},"fields":{"cover":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#986828","images":{"fallback":{"src":"/static/6409203c72687fe09b3c28752a77c885/db7b0/qK0hutjD.png","srcSet":"/static/6409203c72687fe09b3c28752a77c885/0df91/qK0hutjD.png 172w,\n/static/6409203c72687fe09b3c28752a77c885/0b620/qK0hutjD.png 343w,\n/static/6409203c72687fe09b3c28752a77c885/db7b0/qK0hutjD.png 686w","sizes":"(min-width: 686px) 686px, 100vw"},"sources":[{"srcSet":"/static/6409203c72687fe09b3c28752a77c885/204f9/qK0hutjD.webp 172w,\n/static/6409203c72687fe09b3c28752a77c885/b1a43/qK0hutjD.webp 343w,\n/static/6409203c72687fe09b3c28752a77c885/f565d/qK0hutjD.webp 686w","type":"image/webp","sizes":"(min-width: 686px) 686px, 100vw"}]},"width":686,"height":458}}},"slug":"/course/dm/note/8/","cssclasses":null,"isDoc":true,"authors":[],"createTime":"2024 年 5 月 21 日","updateTime":"2024 年 5 月 21 日","category":"[{\"name\":\"课程笔记\",\"to\":\"/course/\"}]","propsJson":null}},"previous":{"fields":{"slug":"/course/dm/note/7/"},"frontmatter":{"title":"Ch10 Graph"}},"next":{"fields":{"slug":"/course/dd/note/6/"},"frontmatter":{"title":"Ch6 Registers & Register Transfers"}}},"pageContext":{"id":"6afc80c2-0efe-548e-9366-5e51daa5e2cf","previousPostId":"0890813c-8526-5c39-b4c9-4d328defb9ae","nextPostId":"81dd95b1-55f3-56d9-9a8c-8ce51495fde0","navJson":"[{\"slug\":\"/course/dm\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/dm/index.md\",\"title\":\"Intro\"},{\"title\":\"Notes\",\"children\":[{\"slug\":\"/course/dm/note/1\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/dm/note/1.md\",\"title\":\"Ch1 Logic & Proofs\"},{\"slug\":\"/course/dm/note/2\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/dm/note/2.md\",\"title\":\"Ch2 Basic Structures\"},{\"slug\":\"/course/dm/note/3\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/dm/note/3.md\",\"title\":\"Ch3 Algorithm\"},{\"slug\":\"/course/dm/note/4\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/dm/note/4.md\",\"title\":\"Ch5 Induction and Recursion\"},{\"slug\":\"/course/dm/note/5\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/dm/note/5.md\",\"title\":\"Ch6&8 Counting\"},{\"slug\":\"/course/dm/note/6\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/dm/note/6.md\",\"title\":\"Ch9 Relations\"},{\"slug\":\"/course/dm/note/7\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/dm/note/7.md\",\"title\":\"Ch10 Graph\"},{\"slug\":\"/course/dm/note/8\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/dm/note/8.md\",\"title\":\"Ch11 Tree\"}]},{\"slug\":\"/course/dm/quick-review\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/dm/quick-review.md\",\"title\":\"Quick Review\"}]"}},"staticQueryHashes":["3871233186"],"slicesMap":{}}