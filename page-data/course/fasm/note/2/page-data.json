{"componentChunkName":"component---src-templates-post-js","path":"/course/fasm/note/2/","result":{"data":{"site":{"siteMetadata":{"title":"mem 的小站"}},"post":{"id":"ea76c58a-676b-5453-8628-0117c55efe93","excerpt":"1. 数据的表示 1.1. 二进制数据的组织 名字 宽度 英文 定义方式 C 语言中等价类型 字节 8 bit byte db (unsigned) char; 字 16 bit word dw (unsigned) short int; 双字 32 bit double word dd (unsigned) long…","html":"<h2 id=\"anchor-83392b72e5a5f4e7\" style=\"position: relative;\">1. 数据的表示<a href=\"#anchor-83392b72e5a5f4e7\" aria-label=\"anchor 83392b72e5a5f4e7 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"anchor-7b13b32c763c50c9\" style=\"position: relative;\">1.1. 二进制数据的组织<a href=\"#anchor-7b13b32c763c50c9\" aria-label=\"anchor 7b13b32c763c50c9 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<table>\n<thead>\n<tr>\n<th align=\"center\">名字</th>\n<th>宽度</th>\n<th>英文</th>\n<th>定义方式</th>\n<th>C 语言中等价类型</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"center\">字节</td>\n<td>8 bit</td>\n<td>byte</td>\n<td>db</td>\n<td>(unsigned) char;</td>\n</tr>\n<tr>\n<td align=\"center\">字</td>\n<td>16 bit</td>\n<td>word</td>\n<td>dw</td>\n<td>(unsigned) short int;</td>\n</tr>\n<tr>\n<td align=\"center\">双字</td>\n<td>32 bit</td>\n<td>double word</td>\n<td>dd</td>\n<td>(unsigned) long int; float;</td>\n</tr>\n<tr>\n<td align=\"center\">四字</td>\n<td>64 bit</td>\n<td>quadruple word (qword)</td>\n<td>dq</td>\n<td>(unsigned) long long; double;</td>\n</tr>\n<tr>\n<td align=\"center\">十字节</td>\n<td>80 bit</td>\n<td>ten byte (tbyte)</td>\n<td>dt</td>\n<td>long double;</td>\n</tr>\n</tbody>\n</table>\n<p>在 data 段中可以定义变量和数组，对应语法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"armasm\"><pre class=\"language-armasm\"><code class=\"language-armasm\">data segment\n  s db <span class=\"token string\">\"Hello, World\"</span> <span class=\"token comment\">; 字符串 char[13]</span>\n  a dd <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span>  <span class=\"token comment\">; 数组 int[5]</span>\n  b dw <span class=\"token number\">0</span> dup<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>       <span class=\"token comment\">; 数组 short int[5]，初始值全为0</span>\n  c db 0FFh<span class=\"token comment\">;          ; 值为0FFh的字符 char</span>\n  f dd <span class=\"token number\">3.14</span>           <span class=\"token comment\">; 值为3.14的浮点数 float</span>\ndata ends</code></pre></div>\n<ul>\n<li>用 <code class=\"language-text\">dup(数)</code> 来表示数组，用 <code class=\"language-text\">?</code> 表示无初始值或初始值任意。</li>\n<li>在定义字符串时，可以通过 <code class=\"language-text\">0Dh</code>、<code class=\"language-text\">0Ah</code> 来表示换行。</li>\n</ul>\n<h3 id=\"anchor-e99d089d286f843a\" style=\"position: relative;\">1.2. 二进制浮点数的表示<a href=\"#anchor-e99d089d286f843a\" aria-label=\"anchor e99d089d286f843a permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>略。</p>\n<h2 id=\"anchor-73c0c8c08bcf9f10\" style=\"position: relative;\">2. 数据的运算<a href=\"#anchor-73c0c8c08bcf9f10\" aria-label=\"anchor 73c0c8c08bcf9f10 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"anchor-f2aceb09686b7415\" style=\"position: relative;\">2.1. 零扩充和符号扩充<a href=\"#anchor-f2aceb09686b7415\" aria-label=\"anchor f2aceb09686b7415 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>当把低位无符号数赋给高位无符号数时，必须采用<strong>零扩充</strong>规则，即在左边补 0。</li>\n<li>当把低位有符号数赋给高位有符号数时，必须采用<strong>符号扩充</strong>规则，即在左边补上原数的最高位（符号位）。</li>\n</ul>\n<h4 id=\"anchor-a4541c869e746641\" style=\"position: relative;\">2.1.1. <code class=\"language-text\">cbw</code>、<code class=\"language-text\">cwd</code> 符号扩充<a href=\"#anchor-a4541c869e746641\" aria-label=\"anchor a4541c869e746641 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<ul>\n<li><code class=\"language-text\">cbw</code>，即 convert byte to word，可将 AL 中的值符号扩充到 AX 中</li>\n<li><code class=\"language-text\">cwd</code>，即 convert word to double word，可将 AX 中的值符号扩充到 DX:AX 中</li>\n</ul>\n<h4 id=\"anchor-ba034f7f4882c285\" style=\"position: relative;\">2.1.2. <code class=\"language-text\">movzx</code> 零扩充<a href=\"#anchor-ba034f7f4882c285\" aria-label=\"anchor ba034f7f4882c285 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p><code class=\"language-text\">movzx dest, src</code> 把 src 零扩充到寄存器 dest 中。指令格式：</p>\n<ul>\n<li><code class=\"language-text\">movzx reg16, reg8|reg8</code></li>\n<li><code class=\"language-text\">movzx reg32, reg8|mem8|reg16|mem16</code></li>\n</ul>\n<h4 id=\"anchor-80b054f94fa53eca\" style=\"position: relative;\">2.1.3. <code class=\"language-text\">movsx</code> 符号扩充<a href=\"#anchor-80b054f94fa53eca\" aria-label=\"anchor 80b054f94fa53eca permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p><code class=\"language-text\">movsx dest, src</code> 功能与格式与 <code class=\"language-text\">movzx</code> 类似，区别在于 <code class=\"language-text\">movsx</code> 是符号扩充。</p>\n<h3 id=\"anchor-32780fc5ebd13997\" style=\"position: relative;\">2.2. 整数运算<a href=\"#anchor-32780fc5ebd13997\" aria-label=\"anchor 32780fc5ebd13997 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<h4 id=\"anchor-56c7f61cedaa34d3\" style=\"position: relative;\">2.2.1. 加法 <code class=\"language-text\">add</code> / <code class=\"language-text\">inc</code> / <code class=\"language-text\">adc</code><a href=\"#anchor-56c7f61cedaa34d3\" aria-label=\"anchor 56c7f61cedaa34d3 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<ul>\n<li><code class=\"language-text\">add dest, src</code>：<code class=\"language-text\">dest += src</code></li>\n<li><code class=\"language-text\">adc dest, src</code>（带进位加）：<code class=\"language-text\">dest += src + CF</code></li>\n<li><code class=\"language-text\">inc op</code>：<code class=\"language-text\">op++</code></li>\n</ul>\n<p><code class=\"language-text\">add</code> / <code class=\"language-text\">adc</code> 指令若发生进位会将 CF 寄存器置 1，否则将 CF 寄存器置 0。<code class=\"language-text\">inc</code> 指令不会影响 CF 寄存器</p>\n<h4 id=\"anchor-d8129dfbee70357d\" style=\"position: relative;\">2.2.2. 减法 <code class=\"language-text\">sub</code> / <code class=\"language-text\">sbb</code> / <code class=\"language-text\">dec</code> / <code class=\"language-text\">neg</code><a href=\"#anchor-d8129dfbee70357d\" aria-label=\"anchor d8129dfbee70357d permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<ul>\n<li><code class=\"language-text\">sub dest, src</code>：<code class=\"language-text\">dest -= src</code></li>\n<li><code class=\"language-text\">sbb dest, src</code>（带错位减）：<code class=\"language-text\">dest -= src + CF</code>（<code class=\"language-text\">dest = dest - src - CF</code>）</li>\n<li><code class=\"language-text\">dec op</code>：<code class=\"language-text\">op--</code></li>\n<li><code class=\"language-text\">neg op</code>（取相反数）：<code class=\"language-text\">op = -op</code></li>\n</ul>\n<h4 id=\"anchor-81e70b5527f329c4\" style=\"position: relative;\">2.2.3. 乘法 <code class=\"language-text\">mul</code> / <code class=\"language-text\">imul</code><a href=\"#anchor-81e70b5527f329c4\" aria-label=\"anchor 81e70b5527f329c4 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>用 <code class=\"language-text\">mul</code> 进行<strong>无符号</strong>整数乘法。</p>\n<ul>\n<li>当 mul 后跟一个 8 位寄存器或 8 位变量作为乘数时，被乘数一定是 AL，乘积一定是 AX。</li>\n<li>当 mul 后跟一个 16 位寄存器或 16 位变量作为乘数时，被乘数一定是 AX，乘积一定是 DX:AX。</li>\n<li>当 mul 后跟一个 32 位寄存器或 32 位变量作为乘数时，被乘数一定是 EAX，乘积一定是 EDX:EAX。</li>\n</ul>\n<p>用 <code class=\"language-text\">imul</code> 进行<strong>有符号</strong>整数乘法，其第一类用法和 <code class=\"language-text\">mul</code> 的上述用法相同。第二类用法可以包含两个或三个操作数，其中前两个操作数可以是寄存器或变量，第三个操作数只能是常数：</p>\n<ul>\n<li><code class=\"language-text\">imul eax, ebx</code>：EAX = EAX × EBX</li>\n<li><code class=\"language-text\">imul eax, ebx, 3</code>：EAX = EAX × EBX × 3</li>\n</ul>\n<h4 id=\"anchor-6d28ff577e570e6d\" style=\"position: relative;\">2.2.4. 除法 <code class=\"language-text\">div</code> / <code class=\"language-text\">idiv</code><a href=\"#anchor-6d28ff577e570e6d\" aria-label=\"anchor 6d28ff577e570e6d permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>用 <code class=\"language-text\">div</code> 进行<strong>无符号</strong>整数除法。</p>\n<ul>\n<li>当 div 后跟一个 8 位寄存器或 8 位变量作为除数时，被除数一定是 AX，商是 AL，余数是 AH</li>\n<li>当 div 后跟一个 16 位寄存器或 16 位变量作为除数时，被除数一定是 DX:AX，商是 AX，余数是 DX</li>\n<li>当 div 后跟一个 32 位寄存器或 32 位变量作为除数时，被除数一定是 EDX:EAX，商是 EAX，余数是 EDX</li>\n</ul>\n<p>除法溢出有来两种情形：</p>\n<ul>\n<li>除数是 0。</li>\n<li>被除数除以除数的商无法保存到相应寄存器中。</li>\n</ul>\n<p>当发生<strong>除法溢出</strong>时，会在 <code class=\"language-text\">div</code> 指令<strong>上方</strong>插入并调用一条 <code class=\"language-text\">int 00h</code> 中断指令（默认行为：显示 divide overflow 并强行结束程序运行）。如果修改 0:0 处的中断向量，则可以在发生中断时转到我们自己的中断函数，对除法溢出的问题进行处理。<code class=\"language-text\">iret</code> 后会重新执行除法指令。</p>\n<p>用 <code class=\"language-text\">idiv</code> 进行<strong>有符号</strong>整数除法，用法参考 <code class=\"language-text\">div</code>。</p>\n<h3 id=\"anchor-0e24177250c4c75a\" style=\"position: relative;\">2.3. 浮点数运算<a href=\"#anchor-0e24177250c4c75a\" aria-label=\"anchor 0e24177250c4c75a permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><img src=\"https://static.memset0.cn/img/v6/2024/02/08/OCj4BEST.png\"alt=\"\" ></p>\n<ul>\n<li><code class=\"language-text\">fld</code> 压入小数类型的变量。</li>\n<li><code class=\"language-text\">fild</code> 把整数类型的变量转化为小数类型并压入。</li>\n<li><code class=\"language-text\">fst</code> 把小数寄存器 st(0) 保存到变量中。</li>\n<li><code class=\"language-text\">fstp</code> 把小数寄存器 st(0) 保存到变量中并弹出 st(0)。</li>\n<li><code class=\"language-text\">fadd</code> / <code class=\"language-text\">fsub</code> / <code class=\"language-text\">fmul</code> / <code class=\"language-text\">fdiv</code> 进行浮点数的四则运算；如用 <code class=\"language-text\">fmul st, st(1)</code> 进行乘法计算。</li>\n</ul>\n<p>CPU 内部一共有 8 个小数寄存器，分别叫做 st(0)、st(1)、…、st(7)。其中 st(0)简称 st 这 8 个寄存器的宽度均达到 80 位，相当于 C 语言中的 <code class=\"language-text\">long double</code> 类型。</p>\n<h3 id=\"anchor-dafe050a736b9b64\" style=\"position: relative;\">2.4. 位运算<a href=\"#anchor-dafe050a736b9b64\" aria-label=\"anchor dafe050a736b9b64 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<h4 id=\"anchor-e7cb65dca4d91671\" style=\"position: relative;\">2.4.1. 逻辑运算<a href=\"#anchor-e7cb65dca4d91671\" aria-label=\"anchor e7cb65dca4d91671 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>用法</th>\n<th>含义</th>\n<th>C 语言等价运算符言</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code class=\"language-text\">and</code></td>\n<td><code class=\"language-text\">add ax, bx</code></td>\n<td>与</td>\n<td>&#x26;</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">or</code></td>\n<td><code class=\"language-text\">or ax, bx</code></td>\n<td>或</td>\n<td>|</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">xor</code></td>\n<td><code class=\"language-text\">xor ax, ax</code></td>\n<td>异或</td>\n<td>^</td>\n</tr>\n<tr>\n<td><code class=\"language-text\">not</code></td>\n<td><code class=\"language-text\">not ax</code></td>\n<td>取反</td>\n<td>~</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"anchor-f0da9d2e1c0edad1\" style=\"position: relative;\">2.4.2. 逻辑移位 <code class=\"language-text\">shl</code>、<code class=\"language-text\">shr</code><a href=\"#anchor-f0da9d2e1c0edad1\" aria-label=\"anchor f0da9d2e1c0edad1 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>适用于无符号数的移位运算，空位补 0，最后一个被移动的位会被放到 CF 标志中。</p>\n<h4 id=\"anchor-e9e818ac1b9ee92d\" style=\"position: relative;\">2.4.3. 算术移位 <code class=\"language-text\">sal</code>、<code class=\"language-text\">sar</code><a href=\"#anchor-e9e818ac1b9ee92d\" aria-label=\"anchor e9e818ac1b9ee92d permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>适用于有符号数的移位运算。<code class=\"language-text\">sal</code> 与 <code class=\"language-text\">shl</code> 完全相同，<code class=\"language-text\">sar</code> 会在被操作数是负数时补 1，否则行为和 <code class=\"language-text\">shr</code> 相同。同样的，最后一个被移动的位会被放到 CF 标志中。</p>\n<h4 id=\"anchor-85f141d6f37217df\" style=\"position: relative;\">2.4.4. 循环移位 <code class=\"language-text\">rol</code> 、<code class=\"language-text\">ror</code><a href=\"#anchor-85f141d6f37217df\" aria-label=\"anchor 85f141d6f37217df permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>对应变量进行循环移位操作，即被移出的值会从另一侧填补到数中。注意最后一个被移动的位会在被放到另一端的同时放到 CF 标志中。</p>\n<h4 id=\"anchor-f526ece8400ba861\" style=\"position: relative;\">2.4.5. 带进位循环移位 <code class=\"language-text\">rcl</code>、<code class=\"language-text\">rcr</code><a href=\"#anchor-f526ece8400ba861\" aria-label=\"anchor f526ece8400ba861 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>同样是循环移位操作，但会把 CF 标志看作其中一位参与运算（如被操作数宽度为 16 位，可看作一个长度为 17 的环）。</p>\n<h3 id=\"anchor-43f2a5b898a45436\" style=\"position: relative;\">2.5. 字符串操作与运算<a href=\"#anchor-43f2a5b898a45436\" aria-label=\"anchor 43f2a5b898a45436 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><details  class=\"callout callout-type-note\"><summary> Fun Fact：C 语言中的三个关于字符串的库函数</summary><div class=\"callout-content\"><p></p><ul>\n<li>\n<p>strcpy(target, source); 永远按正方向复制</p>\n</li>\n<li>\n<p>memcpy(target, source); 永远按正方向复制</p>\n</li>\n<li>\n<p>memmove(target, source); 会自行选择方向保证部分重叠时正确</p>\n</li>\n</ul></div></details></p>\n<p>字符串指令的方向会被 DF 标志控制，当 DF=0 时会按照正方向（低地址到高地址）运行，当 DF=1 时会按照反方向（高地址到低地址）运行。可通过执行 <code class=\"language-text\">cld</code> 和 <code class=\"language-text\">std</code> 来控制。</p>\n<h4 id=\"anchor-812e8a58836f5f88\" style=\"position: relative;\">2.5.1. 字符串复制指令 <code class=\"language-text\">rep movsb/w/d</code><a href=\"#anchor-812e8a58836f5f88\" aria-label=\"anchor 812e8a58836f5f88 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p><code class=\"language-text\">rep movsb</code>，即 move string in byte，会以<strong>字节</strong>（<strong>byte</strong>）为单位复制字符串。如果将 <code class=\"language-text\">movsb</code> 换成 <code class=\"language-text\">movsw</code> 和 <code class=\"language-text\">movsd</code>，则分别会以 word、double word 为单位复制字符串。</p>\n<p>在执行 <code class=\"language-text\">repo movsb</code> 执行前需要做以下准备工作：</p>\n<ol>\n<li>DS:SI 指向源字符串（SI 就是 source index）</li>\n<li>ES:DI 指向目标字符串（DI 就是 destination index）</li>\n<li>CX 寄存器存储移动次数</li>\n<li>DF 标志表示方向（如果）</li>\n</ol>\n<p><code class=\"language-text\">rep movsb</code> 的行为的伪代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">again<span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cx <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">goto</span> done\n\t<span class=\"token keyword\">asm</span> mov byte ptr es<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>di<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> byte ptr es<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">do</span><span class=\"token punctuation\">]</span>  <span class=\"token comment\">// movsw/d的话这里就换为word/dword</span>\n\tdf <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>si<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> di<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>si<span class=\"token operator\">--</span><span class=\"token punctuation\">,</span> di<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>      <span class=\"token comment\">// movsw/d的话这里就需要增减2/4</span>\n\tcx<span class=\"token operator\">--</span>\n\t<span class=\"token keyword\">goto</span> again\ndone<span class=\"token operator\">:</span></code></pre></div>\n<h4 id=\"anchor-3b5647fcc54ec09a\" style=\"position: relative;\">2.5.2. 字符串比较指令 <code class=\"language-text\">repe/ne cmpsb/w/d</code><a href=\"#anchor-3b5647fcc54ec09a\" aria-label=\"anchor 3b5647fcc54ec09a permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>单条 <code class=\"language-text\">cmpsb</code> 指令的行为如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">asm</span> cmp byte ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>si<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> byte ptr es<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>di<span class=\"token punctuation\">]</span>\ndf <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>si<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> di<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>si<span class=\"token operator\">--</span><span class=\"token punctuation\">,</span> di<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">repe</code> 和 <code class=\"language-text\">repne</code> 则控制了 <code class=\"language-text\">cmp</code> 比较结果的行为，如 <code class=\"language-text\">repe</code> 的行为如下（若本次比较相等则继续比较下一个）：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">again<span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cx <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">goto</span> done\n\t<span class=\"token keyword\">asm</span> cmp byte ptr ds<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>si<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> byte ptr es<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>di<span class=\"token punctuation\">]</span>\n\tdf <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>si<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> di<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>si<span class=\"token operator\">--</span><span class=\"token punctuation\">,</span> di<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\tcx<span class=\"token operator\">--</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>zf <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">goto</span> again    <span class=\"token comment\">// repne的话这里就要求ZF=0</span>\ndone<span class=\"token operator\">:</span></code></pre></div>\n<h4 id=\"anchor-d1153a028579be01\" style=\"position: relative;\">2.5.3. 字符串搜索指令 <code class=\"language-text\">repe/ne sacsb/w/d</code><a href=\"#anchor-d1153a028579be01\" aria-label=\"anchor d1153a028579be01 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>这条字符串指令就只和 ES:DI （注意不是 DS:SI 哦）所指向的字符串有关，CPU 将在其中搜索 AL/AX/EAX 的值（取决于是 <code class=\"language-text\">sacsb</code> 还是 <code class=\"language-text\">sacsw</code> 或 <code class=\"language-text\">sacsd</code>）。</p>\n<p><code class=\"language-text\">repe sacsb</code> 的行为如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">again<span class=\"token operator\">:</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>cx <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">goto</span> done\n\t<span class=\"token keyword\">asm</span> cmp al<span class=\"token punctuation\">,</span> byte ptr es<span class=\"token operator\">:</span><span class=\"token punctuation\">[</span>di<span class=\"token punctuation\">]</span>  <span class=\"token comment\">// sacsw/d的话这里还要换成AX/EAX</span>\n\tdf <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>di<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>di<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n\tcx<span class=\"token operator\">--</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>zf <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">goto</span> again       <span class=\"token comment\">// repne的话这里就要求ZF=0</span>\ndone<span class=\"token operator\">:</span></code></pre></div>\n<h4 id=\"anchor-59ce699bde9b63b1\" style=\"position: relative;\">2.5.4. 写入字符串指令 <code class=\"language-text\">rep stosb/w/d</code><a href=\"#anchor-59ce699bde9b63b1\" aria-label=\"anchor 59ce699bde9b63b1 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>把 AL/AX/EAX 的值写入 ES:DI 指向的目标字符串中。</p>\n<h4 id=\"anchor-602c7c8c9a5bd954\" style=\"position: relative;\">2.5.5. 读取字符串指令 <code class=\"language-text\">lodsb/w/d</code><a href=\"#anchor-602c7c8c9a5bd954\" aria-label=\"anchor 602c7c8c9a5bd954 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<p>从 DS:SI 所指向的源字符串中读取一个 byte/word/double word 保存到 AL/AX/EAX。</p>\n<p><details  class=\"callout callout-type-example\"><summary> 例：用 <code class=\"language-text\">lodsb</code>、<code class=\"language-text\">stosb</code> 指令过滤掉字符串中的空格并存储到另一字符串中</summary><div class=\"callout-content\"><p></p><div class=\"gatsby-highlight\" data-language=\"armasm\"><pre class=\"language-armasm\"><code class=\"language-armasm\">data segment\ns db <span class=\"token string\">\"Ada Lovelace is often regarded as \"</span>\n  db <span class=\"token string\">\"the first computer programmer.\"</span>\nslen <span class=\"token operator\">=</span> $ <span class=\"token operator\">-</span> offset s\nt db slen dup<span class=\"token punctuation\">(</span><span class=\"token char\">'T'</span><span class=\"token punctuation\">)</span>\ndata ends\n\ncode segment\nassume cs:code<span class=\"token punctuation\">,</span> ds:data\nmain:\n   mov ax<span class=\"token punctuation\">,</span> data\n   mov ds<span class=\"token punctuation\">,</span> ax\n   mov es<span class=\"token punctuation\">,</span> ax\n   mov si<span class=\"token punctuation\">,</span> offset s<span class=\"token comment\">; ds:si->s[0]</span>\n   mov di<span class=\"token punctuation\">,</span> offset t<span class=\"token comment\">; es:di->t[0]</span>\n   mov cx<span class=\"token punctuation\">,</span> slen    <span class=\"token comment\">; CX = length of s</span>\n   cld             <span class=\"token comment\">; DF = 0</span>\n   jcxz done       <span class=\"token comment\">; jump if cx is zero</span>\nagain:\n   lodsb           <span class=\"token comment\">; AL=ds:[si], si++</span>\n   cmp al<span class=\"token punctuation\">,</span> <span class=\"token char\">' '</span>\n   je skip\n   stosb           <span class=\"token comment\">; es:[di]=AL, di++</span>\nskip:\n   loop again      <span class=\"token comment\">; dec cx</span>\n                   <span class=\"token comment\">; jnz again</span>\ndone:\n   xor al<span class=\"token punctuation\">,</span> al      <span class=\"token comment\">; AL = 00h</span>\n   stosb           <span class=\"token comment\">; es:[di]=AL, di++</span>\n   mov ah<span class=\"token punctuation\">,</span> 4Ch\n   int 21h\ncode ends\nend main</code></pre></div></div></details></p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#anchor-83392b72e5a5f4e7\">1. 数据的表示</a></p>\n<ul>\n<li><a href=\"#anchor-7b13b32c763c50c9\">1.1. 二进制数据的组织</a></li>\n<li><a href=\"#anchor-e99d089d286f843a\">1.2. 二进制浮点数的表示</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#anchor-73c0c8c08bcf9f10\">2. 数据的运算</a></p>\n<ul>\n<li><a href=\"#anchor-f2aceb09686b7415\">2.1. 零扩充和符号扩充</a></li>\n<li><a href=\"#anchor-32780fc5ebd13997\">2.2. 整数运算</a></li>\n<li><a href=\"#anchor-0e24177250c4c75a\">2.3. 浮点数运算</a></li>\n<li><a href=\"#anchor-dafe050a736b9b64\">2.4. 位运算</a></li>\n<li><a href=\"#anchor-43f2a5b898a45436\">2.5. 字符串操作与运算</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"II 数据的表示与运算","date":null,"description":null},"fields":{"cover":null,"slug":"/course/fasm/note/2/","isDoc":true,"category":"[{\"name\":\"课程笔记\",\"to\":\"/course/\"}]","propsJson":null}},"previous":null,"next":null},"pageContext":{"id":"ea76c58a-676b-5453-8628-0117c55efe93","previousPostId":null,"nextPostId":null,"navJson":"[{\"slug\":\"/course/fasm\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/fasm/index.md\",\"title\":\"课程简介\"},{\"title\":\"笔记\",\"children\":[{\"slug\":\"/course/fasm/note/1\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/fasm/note/1.md\",\"title\":\"I 汇编语言入门\"},{\"slug\":\"/course/fasm/note/2\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/fasm/note/2.md\",\"title\":\"II 数据的表示与运算\"},{\"slug\":\"/course/fasm/note/3\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/fasm/note/3.md\",\"title\":\"III CPU、内存和端口\"},{\"slug\":\"/course/fasm/note/4\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/fasm/note/4.md\",\"title\":\"IV 8086指令系统\"},{\"slug\":\"/course/fasm/note/5\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/fasm/note/5.md\",\"title\":\"V 汇编语言进阶\"}]}]"}},"staticQueryHashes":[],"slicesMap":{}}