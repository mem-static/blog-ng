{"componentChunkName":"component---src-templates-doc-js","path":"/course/gen-ed/fasm/note/cp3/","result":{"data":{"site":{"siteMetadata":{"title":"mem 的小站"}},"post":{"id":"52c4327f-09b8-51c8-9776-6dd6d2a910e5","excerpt":"内存 寄存器 标志寄存器 FL是标志寄存器，共16个位，其中6个是状态标志：CF/ZF/SF/OF/PF/AF，3个是控制标志：DF/IF/TF，还有7个是保留位。 进位标志CF（Carry Flag） 会被add/sub/mul/imul/移位指令影响。 …… 方向标志DF（Direction Flag…","html":"<h1>内存</h1>\n<h1>寄存器</h1>\n<h2>标志寄存器</h2>\n<p>FL是标志寄存器，共16个位，其中6个是状态标志：CF/ZF/SF/OF/PF/AF，3个是控制标志：DF/IF/TF，还有7个是保留位。</p>\n<h3>进位标志CF（Carry Flag）</h3>\n<p>会被add/sub/mul/imul/移位指令影响。</p>\n<p>……</p>\n<h3>方向标志DF（Direction Flag）</h3>\n<p>控制<code class=\"language-text\">rep movsb</code>的运行方向（类似于memcpy函数）。当DF=0时，字符串操作按正方向（低地址到高地址）执行；当DF=1时，字符串操作按负方向（高地址到低地址）执行。<code class=\"language-text\">cld</code>可以令DF=0，<code class=\"language-text\">std</code>可以令DF=1。</p>\n<blockquote>\n<p>Fun Fact：关于C语言中的三个库函数</p>\n<ul>\n<li>\n<p>strcpy(target, source); 永远按正方向复制</p>\n</li>\n<li>\n<p>memcpy(target, source); 永远按正方向复制</p>\n</li>\n<li>\n<p>memmove(target, source); 会自行选择方向保证部分重叠时正确</p>\n</li>\n</ul>\n</blockquote>\n<h3>中断标志IF（Interrupt Flag）</h3>\n<p>用于禁止或允许硬件中断。当IF=0时禁止硬件中断；当IF=1时允许硬件中断。<code class=\"language-text\">cli</code>可以令IF=0，<code class=\"language-text\">sti</code>可以令IF=1。</p>\n<p>被<code class=\"language-text\">cli</code>到<code class=\"language-text\">sti</code>包裹起来的代码在执行时就不会被硬件中断，<a href=\"../cp8/\">第八章</a>会介绍设计中断程序的相关知识。</p>\n<h3>陷阱标志（Trap Flag）</h3>\n<p>当TF=1时可以让CPU进入单步模式，每执行一条指令后会自动插入一条<code class=\"language-text\">int 01h</code>中断指令。Intel指令集不提供直接修改TF的指令，如果要修改，可以使用<code class=\"language-text\">pushf</code>和<code class=\"language-text\">popf</code>指令：</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">pushf       ; 将FL压入堆栈\npop ax      ; 将堆栈弹出到AX\nor ax, 100h ; 将AX的第八位置为1，置0可以用and ax, not 100h\npush ax     ; 将AX压入堆栈\npopf        ; 将堆栈弹出到FL，完成对TF的修改</code></pre></div>\n<h2>端口</h2>\n<p>CPU不能直接对I/O设备进行控制，需要用<code class=\"language-text\">in</code>和<code class=\"language-text\">out</code>指令。</p>","frontmatter":{"title":"第三章：CPU、内存和端口","date":null,"description":null},"fields":{"category":"[{\"name\":\"课程笔记\",\"to\":\"/course/\"},{\"name\":\"通识课程\",\"to\":\"/course/gen-ed/\"}]"}},"previous":{"fields":{"slug":"/course/gen-ed/linear-algebra/"},"frontmatter":{"title":"线性代数"}},"next":null},"pageContext":{"id":"52c4327f-09b8-51c8-9776-6dd6d2a910e5","previousPostId":"b9b740ae-3ae0-5101-9c90-49dbca9225b9","nextPostId":null}},"staticQueryHashes":["2841359383"],"slicesMap":{}}