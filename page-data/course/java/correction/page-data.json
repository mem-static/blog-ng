{"componentChunkName":"component---src-templates-post-js","path":"/course/java/correction/","result":{"data":{"site":{"siteMetadata":{"title":"mem 的小站"}},"post":{"id":"d9191c82-ba9d-5348-9d83-6b2c833f85c4","excerpt":"Java 语言基础 数值提升与自动类型转化 设有变量定义:  则以下哪一条语句会导致编译错误？ A.  B.  C.  D.  B。根据 一元数值提升的规则，两个 short 相加的  会被转化成  以后再计算。而在 Java 中，将位数更多的整型向位数更少的整型转化是不能自动进行的（会导致编译错误）。 注意到 B…","html":"<h2 id=\"anchor-2bc6a4f8e94bc94b\" style=\"position: relative;\"><a href=\"#anchor-2bc6a4f8e94bc94b\" aria-label=\"anchor 2bc6a4f8e94bc94b permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Java 语言基础</h2>\n<h3 id=\"anchor-a7783740803435c9\" style=\"position: relative;\"><a href=\"#anchor-a7783740803435c9\" aria-label=\"anchor a7783740803435c9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>数值提升与自动类型转化</h3>\n<blockquote>\n<p>设有变量定义: <code class=\"language-text\">short a = 300;</code> 则以下哪一条语句会导致编译错误？</p>\n<ul>\n<li>A. <code class=\"language-text\">a += 3;</code></li>\n<li>B. <code class=\"language-text\">a = (short)a + 3;</code></li>\n<li>C. <code class=\"language-text\">a = (byte)(a + 3);</code></li>\n<li>D. <code class=\"language-text\">a = (short)(a * 100);</code></li>\n</ul>\n</blockquote>\n<p><mark class=\"m-mark\">B</mark>。根据 <a href=\"https://blog.csdn.net/J080624/article/details/81837155\">一元数值提升的规则</a>，两个 short 相加的 <code class=\"language-text\">+</code> 会被转化成 <code class=\"language-text\">int</code> 以后再计算。而在 Java 中，将位数更多的整型向位数更少的整型转化是不能自动进行的（会导致编译错误）。</p>\n<p>注意到 B 选项虽然用 <code class=\"language-text\">(short)</code> 指定了类型但只对 <code class=\"language-text\">a</code> 生效，而不是 <code class=\"language-text\">a + 3</code> 这一整个运算结果。</p>\n<p>而 C 选项虽然将结果强制转换成了 <code class=\"language-text\">byte</code>，丢失了一些位，但 <code class=\"language-text\">byte</code> 到 <code class=\"language-text\">short</code> 因为是位数变多，可以自动转化，所以这条语句并不会导致编译错误。</p>\n<h3 id=\"anchor-b0cf2fe7ecbf17d2\" style=\"position: relative;\"><a href=\"#anchor-b0cf2fe7ecbf17d2\" aria-label=\"anchor b0cf2fe7ecbf17d2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>二维数组的声明</h3>\n<blockquote>\n<p>以下二维数组的定义正确的是（ ）</p>\n<ul>\n<li>A. <code class=\"language-text\">int a[3][2] = {{1,2},{1,3},{2,3}}</code></li>\n<li>B. <code class=\"language-text\">int a[][] = new int[3][]</code></li>\n<li>C. <code class=\"language-text\">int[][] a = new int[][3]</code></li>\n<li>D. <code class=\"language-text\">int[][] a = new int[][]</code></li>\n</ul>\n</blockquote>\n<p><mark class=\"m-mark\">B</mark>。B 选项语句的含义为创建第一维长度为 3 的二维数组，但是其中的每一维还没有声明，需要在使用时声明，如 <code class=\"language-text\">a[0] = new int[5]</code>。A 选项如果不是 <code class=\"language-text\">int a[3][2]</code> 而是 <code class=\"language-text\">int a[][]</code> 则正确。</p>\n<h3 id=\"anchor-6f0e3193c9f89c64\" style=\"position: relative;\"><a href=\"#anchor-6f0e3193c9f89c64\" aria-label=\"anchor 6f0e3193c9f89c64 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>字符串方法</h3>\n<blockquote>\n<p>For code below, the result would be?</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token class-name\">String</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"  Welcome to Zhejiang University  \"</span><span class=\"token punctuation\">;</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">startsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Welcome\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>A. <code class=\"language-text\">true</code></li>\n<li>B. <code class=\"language-text\">false</code></li>\n<li>C. Compile error</li>\n<li>D. Run-time exception</li>\n</ul>\n</blockquote>\n<p><mark class=\"m-mark\">B</mark>。Java 的这些字符串方法不在原串上做修改，应写成 <code class=\"language-text\">s = s.trim()</code> 输出才为 <code class=\"language-text\">true</code>。</p>\n<h3 id=\"anchor-6a0d8ab8268a563a\" style=\"position: relative;\"><a href=\"#anchor-6a0d8ab8268a563a\" aria-label=\"anchor 6a0d8ab8268a563a permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Switch 可选的参数类型</h3>\n<blockquote>\n<p>Which switch-case below is <strong>NOT</strong> correct?</p>\n<ul>\n<li>A. <code class=\"language-text\">int i; switch (i) { case... }</code></li>\n<li>B. <code class=\"language-text\">String s; switch (s) { case... }</code></li>\n<li>C. <code class=\"language-text\">char c; switch (c) { case... }</code></li>\n<li>D. <code class=\"language-text\">long b; switch (b) { case... }</code></li>\n</ul>\n</blockquote>\n<p><mark class=\"m-mark\">D</mark>。<code class=\"language-text\">switch</code> 中的参数只可以是 <code class=\"language-text\">byte</code>、<code class=\"language-text\">short</code>、<code class=\"language-text\">char</code>、<code class=\"language-text\">int</code> 、<code class=\"language-text\">enum</code> 或 <code class=\"language-text\">String</code> 类型，诸如 <code class=\"language-text\">long</code> 等其他类型是不可以的（会编译错误）。</p>\n<h3 id=\"anchor-4da9f6b88c6211ea\" style=\"position: relative;\"><a href=\"#anchor-4da9f6b88c6211ea\" aria-label=\"anchor 4da9f6b88c6211ea permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>main() 方法的定义</h3>\n<blockquote>\n<p>Given code below:</p>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> main <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello world\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n     <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>Which statement is correct?</p>\n<ul>\n<li>A. It does not compile because “main” is used for both class and function</li>\n<li>B. It does not compile because constructor should not have a return value</li>\n<li>C. It compiles and prints out \"Hello world\"</li>\n<li>D. It compiles but JVM will say it can not find the main() in the class</li>\n</ul>\n</blockquote>\n<p><mark class=\"m-mark\">D</mark>。<code class=\"language-text\">main()</code> 方法应该定义为 <code class=\"language-text\">public static</code> 的，否则 JVM 会找不到。</p>\n<h3 id=\"anchor-2b3955a3d7cc2d8a\" style=\"position: relative;\"><a href=\"#anchor-2b3955a3d7cc2d8a\" aria-label=\"anchor 2b3955a3d7cc2d8a permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>命令行参数</h3>\n<blockquote>\n<p>What will be printed out if this code is run with the following command line?</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">java</span> myprog good morning</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> myprog<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<ul>\n<li>A. <code class=\"language-text\">myprog</code></li>\n<li>B. <code class=\"language-text\">good</code></li>\n<li>C. <code class=\"language-text\">morning</code></li>\n<li>D. Exception raised: \"java.lang.ArrayIndexOutOfBoundsException: 2\"</li>\n</ul>\n</blockquote>\n<p><mark class=\"m-mark\">D</mark>。以这个例子为例，命令行参数 <code class=\"language-text\">argv</code> 应为 <code class=\"language-text\">{\"good\", \"morning\"}</code>，即 <code class=\"language-text\">java</code> 还有类名都是不算在参数列表内的。所以 <code class=\"language-text\">argv[2]</code> 是越界访问。</p>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#anchor-2bc6a4f8e94bc94b\">Java 语言基础</a></p>\n<ul>\n<li><a href=\"#anchor-a7783740803435c9\">数值提升与自动类型转化</a></li>\n<li><a href=\"#anchor-b0cf2fe7ecbf17d2\">二维数组的声明</a></li>\n<li><a href=\"#anchor-6f0e3193c9f89c64\">字符串方法</a></li>\n<li><a href=\"#anchor-6a0d8ab8268a563a\">Switch 可选的参数类型</a></li>\n<li><a href=\"#anchor-4da9f6b88c6211ea\">main() 方法的定义</a></li>\n<li><a href=\"#anchor-2b3955a3d7cc2d8a\">命令行参数</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Correction","date":null,"description":null},"fields":{"cover":null,"slug":"/course/java/correction/","cssclasses":null,"isDoc":true,"category":"[{\"name\":\"课程笔记\",\"to\":\"/course/\"}]","propsJson":null}},"previous":null,"next":null},"pageContext":{"id":"d9191c82-ba9d-5348-9d83-6b2c833f85c4","previousPostId":null,"nextPostId":null,"navJson":"[{\"slug\":\"/course\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/index.md\",\"title\":\"导航\"},{\"title\":\"通识课程\",\"children\":[{\"slug\":\"/course/calculus\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/calculus/index.md\",\"title\":\"微积分\"},{\"slug\":\"/course/linear-algebra\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/linear-algebra/index.md\",\"title\":\"线性代数\"},{\"slug\":\"/course/c-programming\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/c-programming/index.md\",\"title\":\"C 语言程序设计\"},{\"slug\":\"/course/physics\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/physics/index.md\",\"title\":\"大学物理\"}]},{\"title\":\"专业必修课程\",\"children\":[{\"slug\":\"/course/dm\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/dm/index.md\",\"title\":\"离散数学及其应用\"},{\"slug\":\"/course/ads\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/ads/index.md\",\"title\":\"高级数据结构\"},{\"slug\":\"/course/oop\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/oop/index.md\",\"title\":\"面向对象程序设计\"},{\"slug\":\"/course/dd\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/dd/index.md\",\"title\":\"数字逻辑设计\"},{\"slug\":\"/course/co\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/co/index.md\",\"title\":\"计算机组成\"}]},{\"title\":\"个性修读课程\",\"children\":[{\"slug\":\"/course/fasm\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/fasm/index.md\",\"title\":\"汇编程序设计基础\"}]}]"}},"staticQueryHashes":[],"slicesMap":{}}