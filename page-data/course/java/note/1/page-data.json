{"componentChunkName":"component---src-templates-post-js","path":"/course/java/note/1/","result":{"data":{"site":{"siteMetadata":{"title":"mem 的小站"}},"post":{"id":"1e5b3373-f109-5c97-8c4d-d20c6831740d","excerpt":"本篇笔记介绍了 Java 编程的基础知识，包括标识符规则、变量声明与初始化、final 关键字的使用、字面量与类型转换、选择语句（if-else、switch）、运算符结合性、字符与字符串处理、输入输出、循环语句、方法定义与重载、数组的创建与使用等内容。特别强调了 Java 与 C/C++ 的一些重要区别，如变量初始化要求、布尔类型使用规则等。同时详细讲解了 String 类的常用方法、Scanner 类的输入处理、格式化输出、方法重载的规则以及数组的内存分配特点。（由 claude-3.5-sonnet 生成摘要）","html":"<blockquote>\n<p>本篇笔记介绍了 Java 编程的基础知识，包括标识符规则、变量声明与初始化、final 关键字的使用、字面量与类型转换、选择语句（if-else、switch）、运算符结合性、字符与字符串处理、输入输出、循环语句、方法定义与重载、数组的创建与使用等内容。特别强调了 Java 与 C/C++ 的一些重要区别，如变量初始化要求、布尔类型使用规则等。同时详细讲解了 String 类的常用方法、Scanner 类的输入处理、格式化输出、方法重载的规则以及数组的内存分配特点。<small style=\"font-style: italic; opacity: 0.5\">（由 claude-3.5-sonnet 生成摘要）</small></p>\n</blockquote>\n<!-- more -->\n<h2 id=\"anchor-54b5e64232527808\" style=\"position: relative;\"><a href=\"#anchor-54b5e64232527808\" aria-label=\"anchor 54b5e64232527808 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1. Ch02 Elementary Programming</h2>\n<h3 id=\"anchor-36f6e14acc2330b9\" style=\"position: relative;\"><a href=\"#anchor-36f6e14acc2330b9\" aria-label=\"anchor 36f6e14acc2330b9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.1. Identifiers</h3>\n<ul>\n<li><strong>标识符(indentifier)</strong> 是由字母、数字、下划线 <code class=\"language-text\">_</code> 和美元符号 <code class=\"language-text\">$</code> 组成的字符序列。</li>\n<li><strong>规则</strong>：\n<ol>\n<li>必须以字母、下划线 <code class=\"language-text\">_</code> 或美元符号 <code class=\"language-text\">$</code> 开头，不能以数字开头。</li>\n<li>不能是 Java 的保留字。</li>\n<li>不能是 <code class=\"language-text\">true</code>、<code class=\"language-text\">false</code> 或 <code class=\"language-text\">null</code>。</li>\n<li>区分大小写。</li>\n<li>长度没有限制。</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"anchor-23b8390ec9a617c9\" style=\"position: relative;\"><a href=\"#anchor-23b8390ec9a617c9\" aria-label=\"anchor 23b8390ec9a617c9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.2. Variables</h3>\n<ul>\n<li><strong>变量(variable)</strong> 是存储数据的容器。</li>\n<li>可以在一步中完成变量的声明和初始化。</li>\n<li><strong>Java 变量与 C/C++ 变量的区别</strong>\n<ul>\n<li>在 Java 中，变量的声明和定义没有区分。</li>\n<li><mark class=\"m-mark\">Java 不会为方法中的局部变量赋默认值，必须显式初始化，否则会报 CE</mark>。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"anchor-26026ae316ed07a2\" style=\"position: relative;\"><a href=\"#anchor-26026ae316ed07a2\" aria-label=\"anchor 26026ae316ed07a2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.3. The <code class=\"language-text\">final</code> Keyword</h3>\n<ul>\n<li>使用 <code class=\"language-text\">final</code> 修饰变量得到 <strong>命名常量(named constant)</strong>。\n<ul>\n<li>final 变量是不可改变的，只能在初始化的时候被改变一次，但是这个初始化可以在运行时刻初始化，也可以在编译时刻初始化，甚至可以放在构造函数中初始化，而不必在声明的时候初始化。\n<ul>\n<li>举例：<mark class=\"m-mark\">定义类时写 <code class=\"language-text\">final int x;</code> 然后在构造函数中在初始化 <code class=\"language-text\">x = 1;</code> 是合法的</mark>。</li>\n</ul>\n</li>\n<li>修饰对象引用时，不能改变引用指向的对象，但不意味着不能改变对象实例的内容。</li>\n</ul>\n</li>\n<li>使用 <code class=\"language-text\">final</code> 修饰方法表示该方法不能被 <strong>重写(override)</strong>。</li>\n<li>使用 <code class=\"language-text\">final</code> 修饰类表示该类不能被继承，里面的所有方法也自动会是 <code class=\"language-text\">final</code> 的。</li>\n</ul>\n<h3 id=\"anchor-d67cd677cebcff94\" style=\"position: relative;\"><a href=\"#anchor-d67cd677cebcff94\" aria-label=\"anchor d67cd677cebcff94 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.4. Literals</h3>\n<ul>\n<li>使用 <code class=\"language-text\">f</code> 结尾表示单精度浮点数字面量，使用 <code class=\"language-text\">d</code> 结尾表示双精度浮点数字面量。</li>\n<li>特殊的浮点数值：\n<ul>\n<li><code class=\"language-text\">Double.POSITIVE_INFINITY</code>：正无穷大。</li>\n<li><code class=\"language-text\">Double.NEGATIVE_INFINITY</code>：负无穷大。</li>\n<li><code class=\"language-text\">Double.NaN</code>：非数值。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"anchor-1ede6bad50c11e97\" style=\"position: relative;\"><a href=\"#anchor-1ede6bad50c11e97\" aria-label=\"anchor 1ede6bad50c11e97 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1.5. Type Casting</h3>\n<ul>\n<li><strong>隐式转换</strong>（从小范围到大范围）：如 <code class=\"language-text\">double d = 3;</code></li>\n<li><strong>显式转换</strong>（从大范围到小范围）：如 <code class=\"language-text\">int i = (int)3.9;</code>\n<ul>\n<li><mark class=\"m-mark\">像这样的转换必须显示地写出，否则会 CE</mark>。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"anchor-0b8665b53b9aad56\" style=\"position: relative;\"><a href=\"#anchor-0b8665b53b9aad56\" aria-label=\"anchor 0b8665b53b9aad56 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2. Ch03 Selections</h2>\n<h3 id=\"anchor-30f83ba558bd0ba4\" style=\"position: relative;\"><a href=\"#anchor-30f83ba558bd0ba4\" aria-label=\"anchor 30f83ba558bd0ba4 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.1. The <code class=\"language-text\">boolean</code> Data Type</h3>\n<ul>\n<li><code class=\"language-text\">boolean</code> 类型只有两个值：<code class=\"language-text\">true</code> 和 <code class=\"language-text\">false</code>。</li>\n<li>与 C/C++ 不同，<mark class=\"m-mark\">整型与布尔型不能直接转换</mark>，如当 <code class=\"language-text\">even</code> 是 <code class=\"language-text\">boolean</code> 类型时写 <code class=\"language-text\">if (even != 0)</code> 会编译错误，<code class=\"language-text\">if (even)</code> 可以通过编译。</li>\n</ul>\n<h3 id=\"anchor-d7015fc4c680fea8\" style=\"position: relative;\"><a href=\"#anchor-d7015fc4c680fea8\" aria-label=\"anchor d7015fc4c680fea8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.2. if-else statment</h3>\n<ul>\n<li><mark class=\"m-mark\"><code class=\"language-text\">else</code> 语句采用就近原则，做题时不要被代码缩进欺骗</mark>。</li>\n</ul>\n<h3 id=\"anchor-fc80e1e085b90765\" style=\"position: relative;\"><a href=\"#anchor-fc80e1e085b90765\" aria-label=\"anchor fc80e1e085b90765 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.3. switch statement</h3>\n<ul>\n<li>每一个 <code class=\"language-text\">case</code> 下的 <code class=\"language-text\">break</code> 语句可以省略，这种情况下会继续执行下一个 <code class=\"language-text\">case</code> 的语句。</li>\n<li><strong>参数的类型限制</strong>：\n<ul>\n<li>在 java 中 switch 后的表达式的类型只能为以下几种：byte、short、char、int、枚举类（在 Java1.6 中是这样），在 java1.7 后支持了对 string 的判断；</li>\n<li>注意：<mark class=\"m-mark\">boolean</mark>、long 类型不能作为 switch 参数。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"anchor-06eb911a3f9971c0\" style=\"position: relative;\"><a href=\"#anchor-06eb911a3f9971c0\" aria-label=\"anchor 06eb911a3f9971c0 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>2.4. Operator Associativity</h3>\n<ul>\n<li><mark class=\"m-mark\">所有二元运算符都是左结合的</mark>：<code class=\"language-text\">a – b + c – d</code> 等价于 <code class=\"language-text\">((a – b) + c) – d</code>。</li>\n<li><mark class=\"m-mark\">但是所有赋值运算符都是右结合的</mark>：<code class=\"language-text\">a = b += c = 5</code> 等价于 <code class=\"language-text\">a = (b += (c = 5))</code>。</li>\n</ul>\n<h2 id=\"anchor-e27ddd16f22370f8\" style=\"position: relative;\"><a href=\"#anchor-e27ddd16f22370f8\" aria-label=\"anchor e27ddd16f22370f8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3. Ch04 Mathematical Functions, Characters, and Strings</h2>\n<h3 id=\"anchor-80a7c2feb3dfbcac\" style=\"position: relative;\"><a href=\"#anchor-80a7c2feb3dfbcac\" aria-label=\"anchor 80a7c2feb3dfbcac permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.1. Characters</h3>\n<ul>\n<li><mark class=\"m-mark\">Java 中的字符默认采用 UTF-16 编码，每个字符占用 2 字节。</mark>\n<ul>\n<li>Comment：对于超出基本字符集（BMP）的字符，会使用代理对（Surrogate Pair）来表示，每个代理对占用 4 字节。</li>\n</ul>\n</li>\n<li><strong><code class=\"language-text\">char</code> Data Type</strong>\n<ul>\n<li>表示单个字符，支持 ASCII 和 Unicode。</li>\n<li>示例：\n<ul>\n<li><code class=\"language-text\">char letter = 'A';</code> （ASCII）</li>\n<li><code class=\"language-text\">char letter = '\\u0041';</code>（Unicode）</li>\n</ul>\n</li>\n<li><mark class=\"m-mark\">可以使用递增或递减操作符获取下一个或前一个字符。</mark>\n<ul>\n<li>示例：<code class=\"language-text\">char ch = 'a'; System.out.println(++ch);</code> 输出 b。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">Character</code> 类中的方法：\n<ul>\n<li><code class=\"language-text\">isDigit(ch)</code>：判断是否为数字。</li>\n<li><code class=\"language-text\">isLetter(ch)</code>：判断是否为字母。</li>\n<li><code class=\"language-text\">isUpperCase(ch)</code>：判断是否为大写字母。</li>\n<li><code class=\"language-text\">isLowerCase(ch)</code>：判断是否为小写字母。</li>\n<li><code class=\"language-text\">toUpperCase(ch)</code>：将字符转换为大写。</li>\n<li><code class=\"language-text\">toLowerCase(ch)</code>：将字符转换为小写。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"anchor-bf88c815801d4693\" style=\"position: relative;\"><a href=\"#anchor-bf88c815801d4693\" aria-label=\"anchor bf88c815801d4693 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2. The <code class=\"language-text\">String</code> Class</h3>\n<ul>\n<li><mark class=\"m-mark\">Java 的 <code class=\"language-text\">String</code> 类是不可变类。</mark>\n<ul>\n<li><mark class=\"m-mark\">坑点：后面的各种方法都不是在原串上做修改。</mark></li>\n</ul>\n</li>\n<li><strong>定义与基本操作</strong>\n<ul>\n<li>使用 <code class=\"language-text\">String</code> 对象表示字符串。</li>\n<li>示例：<code class=\"language-text\">String message = \"Welcome to Java\";</code></li>\n</ul>\n</li>\n<li><strong>常用方法</strong>\n<ul>\n<li><code class=\"language-text\">length()</code>：获取字符串长度。\n<ul>\n<li>示例：<code class=\"language-text\">\"Hello\".length()</code> 返回 5。</li>\n</ul>\n</li>\n<li><code class=\"language-text\">charAt(index)</code>：获取指定索引的字符。\n<ul>\n<li>示例：<code class=\"language-text\">\"Hello\".charAt(0)</code> 返回 <code class=\"language-text\">H</code>。</li>\n</ul>\n</li>\n<li><code class=\"language-text\">concat(s1)</code> 或 <code class=\"language-text\">+</code>：拼接字符串。\n<ul>\n<li>示例：<code class=\"language-text\">\"Hello\".concat(\" World\")</code> 返回 <code class=\"language-text\">\"Hello World\"</code>。</li>\n</ul>\n</li>\n<li><code class=\"language-text\">toUpperCase()</code> 和 <code class=\"language-text\">toLowerCase()</code>：大小写转换。\n<ul>\n<li>示例：<code class=\"language-text\">\"Hello\".toUpperCase()</code> 返回 <code class=\"language-text\">\"HELLO\"</code>。</li>\n</ul>\n</li>\n<li><code class=\"language-text\">trim()</code>：去除字符串两端的空格。\n<ul>\n<li>示例：<code class=\"language-text\">\" Hello \".trim()</code> 返回 <code class=\"language-text\">\"Hello\"</code>。</li>\n</ul>\n</li>\n<li><img src=\"https://img.memset0.cn/2024/12/17/YO4ut5FQ.png\"alt=\"\" style=\"width: 557px; \" ></li>\n</ul>\n</li>\n<li><strong>字符串比较</strong>\n<ul>\n<li><code class=\"language-text\">equals(s1)</code>：比较字符串内容是否相等。\n<ul>\n<li>示例：<code class=\"language-text\">\"Hello\".equals(\"hello\")</code> 返回 <code class=\"language-text\">false</code>。</li>\n</ul>\n</li>\n<li><code class=\"language-text\">equalsIgnoreCase(s1)</code>：忽略大小写比较字符串内容是否相等。\n<ul>\n<li>示例：<code class=\"language-text\">\"Hello\".equalsIgnoreCase(\"hello\")</code> 返回 <code class=\"language-text\">true</code>。</li>\n</ul>\n</li>\n<li><code class=\"language-text\">compareTo(s1)</code>：比较字符串的字典顺序。\n<ul>\n<li>返回值：\n<ul>\n<li>大于 0：当前字符串大于 <code class=\"language-text\">s1</code>。</li>\n<li>等于 0：两字符串相等。</li>\n<li>小于 0：当前字符串小于 <code class=\"language-text\">s1</code>。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><code class=\"language-text\">compareToIgnoreCase(s1)</code>：忽略大小写比较字符串的字典顺序。</li>\n<li><code class=\"language-text\">startsWith(s1)</code>：判断字符串是否以 <code class=\"language-text\">s1</code> 开头。</li>\n<li><code class=\"language-text\">endsWith(s1)</code>：判断字符串是否以 <code class=\"language-text\">s1</code> 结尾。</li>\n</ul>\n</li>\n<li><strong>子字符串操作</strong>\n<ul>\n<li><code class=\"language-text\">substring(beginIndex)</code>：从指定索引开始截取到末尾。</li>\n<li><code class=\"language-text\">substring(beginIndex, endIndex)</code>：截取指定范围（<mark class=\"m-mark\">左闭右开</mark>）的子字符串。\n<ul>\n<li>示例：<code class=\"language-text\">\"Hello\".substring(1, 4)</code> 返回 <code class=\"language-text\">\"ell\"</code>。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>查找字符或子字符串</strong>\n<ul>\n<li><code class=\"language-text\">indexOf(ch)</code>：返回字符首次出现的索引。</li>\n<li><code class=\"language-text\">indexOf(ch, fromIndex)</code>：从指定索引开始返回字符首次出现的索引。</li>\n<li><code class=\"language-text\">indexOf(s1)</code>：返回子字符串首次出现的索引。</li>\n<li><code class=\"language-text\">indexOf(s1, fromIndex)</code>：从指定索引开始返回子字符串首次出现的索引。</li>\n<li><code class=\"language-text\">lastIndexOf(ch)</code>：返回字符最后一次出现的索引。</li>\n<li>（类似地还有三个这里略。）</li>\n</ul>\n</li>\n<li><strong>字符串转数字</strong>\n<ul>\n<li><code class=\"language-text\">Integer.parseInt()</code>：将字符串转换为整数。\n<ul>\n<li>示例：<code class=\"language-text\">Integer.parseInt(\"123\")</code> 返回 123。</li>\n</ul>\n</li>\n<li><code class=\"language-text\">Double.parseDouble()</code>：将字符串转换为浮点数。\n<ul>\n<li>示例：<code class=\"language-text\">Double.parseDouble(\"3.14\")</code> 返回 3.14。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>数字转字符串</strong>\n<ul>\n<li><code class=\"language-text\">String.valueOf()</code>：会调用对应基础数据类型的包装类的 <code class=\"language-text\">toString()</code> 静态方法。</li>\n<li>可以使用 <code class=\"language-text\">+ \"\"</code>\n<ul>\n<li>示例：<code class=\"language-text\">123 + \"\"</code> 返回 <code class=\"language-text\">\"123\"</code>。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"anchor-ef9a2340768ee4f6\" style=\"position: relative;\"><a href=\"#anchor-ef9a2340768ee4f6\" aria-label=\"anchor ef9a2340768ee4f6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2.1. String Matching &#x26; Replacing &#x26; Splitting (Ch10)</h4>\n<ul>\n<li><code class=\"language-text\">replace(oldChar, newChar)</code>：字符替换</li>\n<li><code class=\"language-text\">replaceFirst(oldString, newString)</code>：子字符串替换，但只替换第一次</li>\n<li><code class=\"language-text\">replaceAll(oldString, newString)</code>：子字符串替换</li>\n<li><code class=\"language-text\">split(delimiter): String[]</code>：将字符串按指定串分割成数组</li>\n<li><mark class=\"m-mark\">这里的 <code class=\"language-text\">match</code>、<code class=\"language-text\">replace</code> 系列、<code class=\"language-text\">split</code> 方法都支持正则表达式</mark>。</li>\n</ul>\n<h4 id=\"anchor-0cf9819b92bd4c50\" style=\"position: relative;\"><a href=\"#anchor-0cf9819b92bd4c50\" aria-label=\"anchor 0cf9819b92bd4c50 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.2.2. String Formatting (Ch10)</h4>\n<ul>\n<li>支持 <code class=\"language-text\">String.format()</code> 的静态方法，其中第一个参数是格式化字符串，支持的语法参见下面的 String-Formatting 部分。</li>\n</ul>\n<h3 id=\"anchor-e22af85e92f49dd2\" style=\"position: relative;\"><a href=\"#anchor-e22af85e92f49dd2\" aria-label=\"anchor e22af85e92f49dd2 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.3. Input: The <code class=\"language-text\">Scanner</code> Class</h3>\n<ul>\n<li><code class=\"language-text\">Scanner sc = new Scanner(System.in);</code></li>\n<li>使用 <code class=\"language-text\">Scanner</code> 类：\n<ul>\n<li><code class=\"language-text\">nextInt()</code>、<code class=\"language-text\">nextDouble()</code>、<code class=\"language-text\">nextFloat()</code>、<code class=\"language-text\">nextLong()</code> 方法：读取整数、浮点数、长整数等等基本数据类型。</li>\n<li><code class=\"language-text\">next()</code> 方法：读取单词。<mark class=\"m-mark\">从遇到第一个有效字符（非空格、换行符）开始扫描，遇到第一个分隔符或结束符（空格 <code class=\"language-text\"> </code> 或者换行符 <code class=\"language-text\">\\n</code>）时结束</mark>。</li>\n<li><code class=\"language-text\">nextLine()</code> 方法：读取整行。<mark class=\"m-mark\">扫描剩下的所有字符串直到遇到回车为止。（可以从空格开始）</mark>。</li>\n</ul>\n</li>\n<li>注意：<code class=\"language-text\">nextInt()</code> 和 <code class=\"language-text\">nextLine()</code> 的组合可能导致读取问题（即剩一个空的行末）。解决方法：在 <code class=\"language-text\">nextInt()</code> 后添加一个 <code class=\"language-text\">nextLine()</code>。</li>\n</ul>\n<h3 id=\"anchor-9b6c45f9ebbef5d7\" style=\"position: relative;\"><a href=\"#anchor-9b6c45f9ebbef5d7\" aria-label=\"anchor 9b6c45f9ebbef5d7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>3.4. Formatting Output</h3>\n<blockquote>\n<p>TODO：具体还是得看一下课件。</p>\n</blockquote>\n<ul>\n<li><strong>使用 <code class=\"language-text\">printf</code> 格式化输出</strong>\n<ul>\n<li><mark class=\"m-mark\">格式：<code class=\"language-text\">%[index$][标识][最小宽度][.精度]转换符</code>。</mark>\n<ul>\n<li><img src=\"https://img.memset0.cn/2024/12/17/VtSnq2pS.png\"alt=\"\" ></li>\n</ul>\n</li>\n<li><strong>常用转换符</strong>\n<ul>\n<li><code class=\"language-text\">%b</code>：布尔值。</li>\n<li><code class=\"language-text\">%c</code>：字符。</li>\n<li><code class=\"language-text\">%s</code>：字符串。</li>\n<li><code class=\"language-text\">%d</code>：整数。</li>\n<li><code class=\"language-text\">%f</code>：浮点数。</li>\n<li><code class=\"language-text\">%e</code>：科学计数法（<code class=\"language-text\">4.556000e+01</code>）。</li>\n<li>日期和时间：\n<ul>\n<li><code class=\"language-text\">%tF</code>：完整日期（如 2024-12-17）。</li>\n<li><code class=\"language-text\">%tT</code>：完整时间（如 15:45:14）。</li>\n<li>还有各种，以 <code class=\"language-text\">%t</code> 开头。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>标识</strong>\n<ul>\n<li><code class=\"language-text\">-</code>：左对齐。</li>\n<li><code class=\"language-text\">0</code>：用零填充。</li>\n<li><code class=\"language-text\">,</code>：千位分隔符。</li>\n<li><code class=\"language-text\">+</code>：显示正负号。</li>\n</ul>\n</li>\n<li><strong>示例</strong>\n<ul>\n<li>将整数补零：<code class=\"language-text\">String.format(\"%04d\", 5)</code> 返回 <code class=\"language-text\">\"0005\"</code>。</li>\n<li>千位分隔符：<code class=\"language-text\">String.format(\"%,d\", 1000000)</code> 返回 <code class=\"language-text\">\"1,000,000\"</code>。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"anchor-89f22f4cb2b4ff95\" style=\"position: relative;\"><a href=\"#anchor-89f22f4cb2b4ff95\" aria-label=\"anchor 89f22f4cb2b4ff95 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4. Ch05 Loops</h2>\n<h3 id=\"anchor-0927933f46d4dde9\" style=\"position: relative;\"><a href=\"#anchor-0927933f46d4dde9\" aria-label=\"anchor 0927933f46d4dde9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.1. <code class=\"language-text\">do</code>-<code class=\"language-text\">while</code> Loop</h3>\n<ul>\n<li>基本结构：\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">do</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Loop body;</span>\n    <span class=\"token class-name\">Statement</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>loop<span class=\"token operator\">-</span>continuation<span class=\"token operator\">-</span>condition<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li><strong>特点</strong>：至少执行一次循环体，然后再检查条件。</li>\n</ul>\n<h3 id=\"anchor-16edfa4b4e8cc42d\" style=\"position: relative;\"><a href=\"#anchor-16edfa4b4e8cc42d\" aria-label=\"anchor 16edfa4b4e8cc42d permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.2. Break with Tag</h3>\n<ul>\n<li><mark class=\"m-mark\">使用带标签的 <code class=\"language-text\">break</code> 语句可以跳出多层嵌套循环</mark>。\n<ul>\n<li>示例：\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\">outer<span class=\"token operator\">:</span> <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span> outer<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 跳出 outer 循环</span>\n        <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i = \"</span> <span class=\"token operator\">+</span> i <span class=\"token operator\">+</span> <span class=\"token string\">\", j = \"</span> <span class=\"token operator\">+</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n<li>可以将标签用到任意语句块中（即大括号括起来的一段语句），使用带标签的 <code class=\"language-text\">break</code> 语句可以跳出该语句块，即使这个语句块不是循环体。</li>\n</ul>\n<h3 id=\"anchor-e1ae33269316b293\" style=\"position: relative;\"><a href=\"#anchor-e1ae33269316b293\" aria-label=\"anchor e1ae33269316b293 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>4.3. For-in</h3>\n<ul>\n<li>Java 5 引入了用于数组和容器的 for-in 语法，这类似于 C++ 14 的 range-based for 语法。\n<ul>\n<li>示例：\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> numbers <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> number <span class=\"token operator\">:</span> numbers<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">System</span><span class=\"token punctuation\">.</span>out<span class=\"token punctuation\">.</span><span class=\"token function\">println</span><span class=\"token punctuation\">(</span>number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"anchor-2a26c17f5e7c73b7\" style=\"position: relative;\"><a href=\"#anchor-2a26c17f5e7c73b7\" aria-label=\"anchor 2a26c17f5e7c73b7 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5. Ch06 Methods</h2>\n<h3 id=\"anchor-2f76348271e57491\" style=\"position: relative;\"><a href=\"#anchor-2f76348271e57491\" aria-label=\"anchor 2f76348271e57491 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.1. Methods</h3>\n<ul>\n<li><strong>方法(method)</strong> 是一组语句的集合，用于完成某个特定的操作。通过方法可以实现代码的复用、模块化和易维护性。</li>\n<li><strong>方法签名(method signature)</strong> 定义为方法名和参数列表的组合，它是方法的唯一标识。</li>\n</ul>\n<h3 id=\"anchor-7d94a5062b7236aa\" style=\"position: relative;\"><a href=\"#anchor-7d94a5062b7236aa\" aria-label=\"anchor 7d94a5062b7236aa permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.2. Formal &#x26; Actual Parameters</h3>\n<ul>\n<li><strong>形式参数(formal parameter)</strong> 是方法头中定义的变量，用于接收调用方法时传递的值。</li>\n<li><strong>实际参数(actual parameter)</strong> 是在调用方法时传递给形式参数的值。</li>\n<li><mark class=\"m-mark\">Java 中的参数传递是 <strong>按值传递(pass by value)</strong> 的，即将实际参数的值复制一份传递给方法</mark>。\n<ul>\n<li>即方法内对参数的修改不会影响方法外的变量。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"anchor-2e2be9f9418a9aae\" style=\"position: relative;\"><a href=\"#anchor-2e2be9f9418a9aae\" aria-label=\"anchor 2e2be9f9418a9aae permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>5.3. Overloading</h3>\n<ul>\n<li>方法的 <strong>重载(overload)</strong> 是指在同一个类中定义多个同名方法，<mark class=\"m-mark\">但参数列表不同</mark>。\n<ul>\n<li>注意区分 overload 和 override。<br>\n<img src=\"https://img.memset0.cn/2024/12/18/bkmjRMM6.png\"alt=\"\" style=\"width: 662px; \" ></li>\n<li>可以重载静态方法，但不能重写静态方法。</li>\n</ul>\n</li>\n<li><strong>模糊调用(ambiguous invocation)</strong>：在方法调用时，编译器可能发现有多个方法匹配，无法确定哪一个是最具体的，<mark class=\"m-mark\">这种时候会直接 CE</mark>。\n<ul>\n<li>原因：\n<ul>\n<li>方法重载时，多个方法的参数列表可能存在一定的重叠，导致编译器无法确定调用哪个方法。</li>\n<li>方法调用中涉及自动类型转换或可变参数时，可能会有多个方法同时符合调用条件。</li>\n</ul>\n</li>\n<li>举例：如果有 <code class=\"language-text\">print(int); print(double);</code> 两个方法，则在 <code class=\"language-text\">print(1);</code> 时会认为前者更具体而不会报错，但如果同时有 <code class=\"language-text\">print(int, double);</code> 和 <code class=\"language-text\">print(double, int);</code> 两个方法，则 <code class=\"language-text\">print(1, 1);</code> 时就无法确定调用哪个方法更具体，从而会报错。</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"anchor-f8e70ebce432d9ca\" style=\"position: relative;\"><a href=\"#anchor-f8e70ebce432d9ca\" aria-label=\"anchor f8e70ebce432d9ca permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6. Ch07 Single-Dimensional Arrays</h2>\n<h3 id=\"anchor-33c4478ece0d7d52\" style=\"position: relative;\"><a href=\"#anchor-33c4478ece0d7d52\" aria-label=\"anchor 33c4478ece0d7d52 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>6.1. Single-Dimensional Arrays</h3>\n<ul>\n<li><strong>声明数组</strong>\n<ul>\n<li>语法：\n<ul>\n<li><code class=\"language-text\">datatype[] arrayRefVar;</code></li>\n<li><code class=\"language-text\">datatype arrayRefVar[];</code> （不推荐）</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><strong>创建数组</strong>\n<ul>\n<li>语法：\n<ul>\n<li><code class=\"language-text\">arrayRefVar = new datatype[arraySize];</code></li>\n<li>示例：<code class=\"language-text\">myList = new double[10];</code></li>\n</ul>\n</li>\n<li>创建时会自动设定为默认值：\n<ul>\n<li>数值基本类型自动设定为 <code class=\"language-text\">0</code>，字符类型默认为 <code class=\"language-text\">\\u0000</code>，布尔类型默认为 <code class=\"language-text\">false</code>。</li>\n<li>对象引用类型默认为 <code class=\"language-text\">null</code>。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li><mark class=\"m-mark\">使用 <code class=\"language-text\">arrayRefVar.length</code> 获取数组大小</mark>。\n<ul>\n<li><mark class=\"m-mark\">数组一旦创建，大小就固定不能改变</mark>。</li>\n</ul>\n</li>\n<li><strong>数组初始化器(array initializer)</strong>：<mark class=\"m-mark\">使用时必须要在一个语句中完成数组的声明、创建和初始化，否则会导致 CE</mark>。\n<ul>\n<li>举例：<code class=\"language-text\">double[] myList = {1.9, 2.9, 3.4, 3.5};</code></li>\n<li>可以用 <code class=\"language-text\">new int[]{3, 1, 5, 2, 4}</code> 的语法用数组初始化器创建 <strong>匿名数组(anonymous array)</strong>。</li>\n</ul>\n</li>\n<li><mark class=\"m-mark\">Java 数组的内存分配在堆上</mark>。而在 C 中，使用 <code class=\"language-text\">int a[100]</code> 创建的数组分配在栈上，使用 <code class=\"language-text\">int *a = new int[100];</code> 创建的数组分配在堆上。</li>\n<li><strong>边界检查</strong>：<mark class=\"m-mark\">Java 的 <code class=\"language-text\">[]</code> 操作符会检查数组边界</mark>。</li>\n<li><strong>拷贝数组</strong>：<mark class=\"m-mark\">不会重新创建数组，而是直接将引用复制</mark>。\n<img src=\"https://img.memset0.cn/2024/12/18/rOzNOMdV.png\"alt=\"\" style=\"width: 514px; \" >\n<ul>\n<li>正确的拷贝数组方式：\n<ul>\n<li>重新创建一个并依次赋值</li>\n<li><strong>使用 <code class=\"language-text\">System.arraycopy</code></strong>：<code class=\"language-text\">System.arraycopy(sourceArray, 0, targetArray, 0, sourceArray.length);</code>。</li>\n<li><strong>使用 <code class=\"language-text\">Arrays.copyOf</code></strong>：<code class=\"language-text\">int[] copiedArray = Arrays.copyOf(sourceArray, sourceArray.length);</code></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"anchor-3b340fa93283b1f6\" style=\"position: relative;\"><a href=\"#anchor-3b340fa93283b1f6\" aria-label=\"anchor 3b340fa93283b1f6 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7. Ch08 Multidimensional Arrays</h2>\n<h3 id=\"anchor-7987e24b43d06881\" style=\"position: relative;\"><a href=\"#anchor-7987e24b43d06881\" aria-label=\"anchor 7987e24b43d06881 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>7.1. Two-dimensional Arrays</h3>\n<ul>\n<li>声明与创建：\n<div class=\"gatsby-highlight\" data-language=\"java\"><pre class=\"language-java\"><code class=\"language-java\"><span class=\"token comment\">// 声明数组引用变量</span>\ndataType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> refVar<span class=\"token punctuation\">;</span>\nrefVar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> dataType<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 声明和创建结合</span>\ndataType<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> refVar <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> dataType<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// 另一种语法</span>\ndataType refVar<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> dataType<span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">[</span><span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<ul>\n<li>多维数组的创建时应从左到右指定维数，未指定的维数不会自动创建内容，需要再手动创建。\n<ul>\n<li>即 <code class=\"language-text\">int a[][] = new int[3][0]</code> 和 <code class=\"language-text\">new int[3][3]</code> 都是合法的，但是前者要再使用 <code class=\"language-text\">a[0] = new int[3]</code> 才能创建第二维的内容。</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>Java 的数组每一维可以有不同的大小，大小不同的数组称为 <strong>不规则数组(ragged array)</strong>。</li>\n</ul>\n<h2 id=\"anchor-c291f025b9ccecb9\" style=\"position: relative;\"><a href=\"#anchor-c291f025b9ccecb9\" aria-label=\"anchor c291f025b9ccecb9 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8. 杂项</h2>\n<ul>\n<li><code class=\"language-text\">System.currentTimeMillis()</code>  返回自 1970 年 1 月 1 日以来的毫秒数。</li>\n<li>Java 语言的 <code class=\"language-text\">public static void main(String args[])</code> 命令行参数中，<mark class=\"m-mark\">从第一个位置开始存储命令行参数</mark>（即 <code class=\"language-text\">args[0]</code>），程序名没有存储在 <code class=\"language-text\">args</code> 中。</li>\n<li><mark class=\"m-mark\">Java 中不能在 <strong>嵌套</strong> 代码块中重复声明同名变量</mark>，这点与 C/C++ 不同。</li>\n<li><strong>静态导入 <code class=\"language-text\">import static</code></strong>：可以引入类的静态成员，如 <code class=\"language-text\">import static java.lang.Math.PI</code> 后可以直接用 <code class=\"language-text\">PI</code> 而不用 <code class=\"language-text\">Math.PI</code>。</li>\n</ul>\n<h3 id=\"anchor-c728068d8d7c3ae5\" style=\"position: relative;\"><a href=\"#anchor-c728068d8d7c3ae5\" aria-label=\"anchor c728068d8d7c3ae5 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8.1. <code class=\"language-text\">java.lang.Math</code> (Ch04)</h3>\n<ul>\n<li><strong>常用常量</strong>\n<ul>\n<li><code class=\"language-text\">Math.PI</code>：圆周率。</li>\n<li><code class=\"language-text\">Math.E</code>：自然对数的底。</li>\n</ul>\n</li>\n<li><strong>常用方法</strong>\n<ul>\n<li><strong>三角函数</strong>：<code class=\"language-text\">Math.sin</code>、<code class=\"language-text\">Math.cos</code>、<code class=\"language-text\">Math.tan</code>、<code class=\"language-text\">Math.toRadians</code> 等。</li>\n<li><strong>指数函数</strong>：<code class=\"language-text\">Math.exp</code>、<code class=\"language-text\">Math.log</code>、<code class=\"language-text\">Math.log10</code>、<code class=\"language-text\">Math.pow</code>、<code class=\"language-text\">Math.sqrt</code>。</li>\n<li><strong>四舍五入方法</strong>：<code class=\"language-text\">Math.ceil</code>、<code class=\"language-text\">Math.floor</code>、<code class=\"language-text\">Math.rint</code>、<code class=\"language-text\">Math.round</code>。\n<ul>\n<li><mark class=\"m-mark\"><code class=\"language-text\">Math.rint()</code> 方法是向最接近的整数取整，如果出现 x.5 的情况则向 x 和 x+1 中的偶数取整。</mark></li>\n</ul>\n</li>\n<li><strong>最值和绝对值</strong>：<code class=\"language-text\">Math.max</code>、<code class=\"language-text\">Math.min</code>、<code class=\"language-text\">Math.abs</code>。</li>\n<li><strong>随机数生成</strong>：\n<ul>\n<li><code class=\"language-text\">Math.random()</code> 生成 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mn>0.</mn><mo separator=\"true\">,</mo><mn>1.</mn><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">[0., 1.)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\">0.</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord\">1.</span><span class=\"mclose\">)</span></span></span></span></span> 的随机数。</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"anchor-7f80f6169981c23b\" style=\"position: relative;\"><a href=\"#anchor-7f80f6169981c23b\" aria-label=\"anchor 7f80f6169981c23b permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8.2. <code class=\"language-text\">java.utils.Arrays</code> (Ch07)</h3>\n<ul>\n<li><code class=\"language-text\">copyOf(array, newLength)</code> 静态方法：拷贝数组。</li>\n<li><code class=\"language-text\">binarySearch(array, key)</code> 静态方法：二分搜索（要求数组有序）。</li>\n<li><code class=\"language-text\">sort(array)</code> 静态方法：将数组排序。</li>\n</ul>\n<h3 id=\"anchor-8a4b30c316f2aec8\" style=\"position: relative;\"><a href=\"#anchor-8a4b30c316f2aec8\" aria-label=\"anchor 8a4b30c316f2aec8 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8.3. <code class=\"language-text\">java.util.Date</code> (Ch09)</h3>\n<ul>\n<li><strong>构造函数</strong>：\n<ul>\n<li><code class=\"language-text\">Date()</code>：构造一个表示当前时间的 Date 对象。</li>\n<li><code class=\"language-text\">Date(elapseTime: long)</code>：构造一个 Date 对象，表示<mark class=\"m-mark\">自 1970 年 1 月 1 日 GMT 以来指定毫秒数的时间</mark>。</li>\n</ul>\n</li>\n<li><strong>方法</strong>：\n<ul>\n<li><code class=\"language-text\">toString() : String</code>：返回表示日期和时间的字符串。（例：<code class=\"language-text\">Sun Mar 09 13:50:19EST 2003</code>）</li>\n<li><code class=\"language-text\">getTime() : long</code>：返回自 1970 年 1 月 1 日 GMT 以来的毫秒数。</li>\n<li><code class=\"language-text\">setTime(elapseTime: long) : void</code>：设置对象的新时间。</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"anchor-6ed9c1c1ad624102\" style=\"position: relative;\"><a href=\"#anchor-6ed9c1c1ad624102\" aria-label=\"anchor 6ed9c1c1ad624102 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>8.4. <code class=\"language-text\">java.util.Random</code> (Ch09)</h3>\n<ul>\n<li><strong>构造函数</strong>：\n<ul>\n<li><code class=\"language-text\">Random()</code>：使用当前时间作为种子构造一个 Random 对象。</li>\n<li><code class=\"language-text\">Random(seed: long)</code>：使用指定的种子构造一个 Random 对象。</li>\n</ul>\n</li>\n<li><strong>方法</strong>：\n<ul>\n<li><code class=\"language-text\">nextInt() : int</code>：返回一个随机的 int 值。</li>\n<li><code class=\"language-text\">nextInt(n: int) : int</code>：返回一个 0（含）到 n（不含）之间的随机 int 值。</li>\n<li><code class=\"language-text\">nextLong() : long</code>：返回一个随机的 long 值。</li>\n<li><code class=\"language-text\">nextDouble() : double</code>：返回一个 0.0（含）到 1.0（不含）之间的随机 double 值。</li>\n<li><code class=\"language-text\">nextFloat() : float</code>：返回一个 0.0F（含）到 1.0F（不含）之间的随机 float 值。</li>\n<li><code class=\"language-text\">nextBoolean() : boolean</code>：返回一个随机的 boolean 值。</li>\n</ul>\n</li>\n</ul>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#anchor-54b5e64232527808\">1. Ch02 Elementary Programming</a></p>\n<ul>\n<li><a href=\"#anchor-36f6e14acc2330b9\">1.1. Identifiers</a></li>\n<li><a href=\"#anchor-23b8390ec9a617c9\">1.2. Variables</a></li>\n<li><a href=\"#anchor-26026ae316ed07a2\">1.3. The <code class=\"language-text\">final</code> Keyword</a></li>\n<li><a href=\"#anchor-d67cd677cebcff94\">1.4. Literals</a></li>\n<li><a href=\"#anchor-1ede6bad50c11e97\">1.5. Type Casting</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#anchor-0b8665b53b9aad56\">2. Ch03 Selections</a></p>\n<ul>\n<li><a href=\"#anchor-30f83ba558bd0ba4\">2.1. The <code class=\"language-text\">boolean</code> Data Type</a></li>\n<li><a href=\"#anchor-d7015fc4c680fea8\">2.2. if-else statment</a></li>\n<li><a href=\"#anchor-fc80e1e085b90765\">2.3. switch statement</a></li>\n<li><a href=\"#anchor-06eb911a3f9971c0\">2.4. Operator Associativity</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#anchor-e27ddd16f22370f8\">3. Ch04 Mathematical Functions, Characters, and Strings</a></p>\n<ul>\n<li><a href=\"#anchor-80a7c2feb3dfbcac\">3.1. Characters</a></li>\n<li><a href=\"#anchor-bf88c815801d4693\">3.2. The <code class=\"language-text\">String</code> Class</a></li>\n<li><a href=\"#anchor-e22af85e92f49dd2\">3.3. Input: The <code class=\"language-text\">Scanner</code> Class</a></li>\n<li><a href=\"#anchor-9b6c45f9ebbef5d7\">3.4. Formatting Output</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#anchor-89f22f4cb2b4ff95\">4. Ch05 Loops</a></p>\n<ul>\n<li><a href=\"#anchor-0927933f46d4dde9\">4.1. <code class=\"language-text\">do</code>-<code class=\"language-text\">while</code> Loop</a></li>\n<li><a href=\"#anchor-16edfa4b4e8cc42d\">4.2. Break with Tag</a></li>\n<li><a href=\"#anchor-e1ae33269316b293\">4.3. For-in</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#anchor-2a26c17f5e7c73b7\">5. Ch06 Methods</a></p>\n<ul>\n<li><a href=\"#anchor-2f76348271e57491\">5.1. Methods</a></li>\n<li><a href=\"#anchor-7d94a5062b7236aa\">5.2. Formal &#x26; Actual Parameters</a></li>\n<li><a href=\"#anchor-2e2be9f9418a9aae\">5.3. Overloading</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#anchor-f8e70ebce432d9ca\">6. Ch07 Single-Dimensional Arrays</a></p>\n<ul>\n<li><a href=\"#anchor-33c4478ece0d7d52\">6.1. Single-Dimensional Arrays</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#anchor-3b340fa93283b1f6\">7. Ch08 Multidimensional Arrays</a></p>\n<ul>\n<li><a href=\"#anchor-7987e24b43d06881\">7.1. Two-dimensional Arrays</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#anchor-c291f025b9ccecb9\">8. 杂项</a></p>\n<ul>\n<li><a href=\"#anchor-c728068d8d7c3ae5\">8.1. <code class=\"language-text\">java.lang.Math</code> (Ch04)</a></li>\n<li><a href=\"#anchor-7f80f6169981c23b\">8.2. <code class=\"language-text\">java.utils.Arrays</code> (Ch07)</a></li>\n<li><a href=\"#anchor-8a4b30c316f2aec8\">8.3. <code class=\"language-text\">java.util.Date</code> (Ch09)</a></li>\n<li><a href=\"#anchor-6ed9c1c1ad624102\">8.4. <code class=\"language-text\">java.util.Random</code> (Ch09)</a></li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"Java 语言基础","description":null},"fields":{"cover":null,"slug":"/course/java/note/1/","cssclasses":null,"isDoc":true,"authors":null,"createTime":"2024 年 12 月 18 日","updateTime":"2024 年 12 月 18 日","category":"[{\"name\":\"课程笔记\",\"to\":\"/course/\"}]","propsJson":null}},"previous":{"fields":{"slug":"/course/ptms/note/7/"},"frontmatter":{"title":"VII. 参数估计"}},"next":{"fields":{"slug":"/course/java/note/2/"},"frontmatter":{"title":"Java 面向对象设计"}}},"pageContext":{"id":"1e5b3373-f109-5c97-8c4d-d20c6831740d","previousPostId":"0bca9516-52f7-56cf-9e70-9ef89d8194dc","nextPostId":"52cd8b44-293a-58f8-a097-dcccf44ea187","navJson":"[{\"slug\":\"/course/java\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/java/index.md\",\"title\":\"Intro\"},{\"title\":\"Note\",\"children\":[{\"slug\":\"/course/java/note/1\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/java/note/1.md\",\"title\":\"Java 语言基础\"},{\"slug\":\"/course/java/note/2\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/java/note/2.md\",\"title\":\"Java 面向对象设计\"},{\"slug\":\"/course/java/note/3\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/java/note/3.md\",\"title\":\"Java 高级特性\"}]}]"}},"staticQueryHashes":[],"slicesMap":{}}