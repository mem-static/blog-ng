{"componentChunkName":"component---src-templates-post-js","path":"/course/oop/note/1/","result":{"data":{"site":{"siteMetadata":{"title":"mem 的小站"}},"post":{"id":"b9461236-6328-513e-9b30-a7efd6488a86","excerpt":"1. 类的定义 在 C++ 中，用类来定义变量时，不必像 C 语言那样带有  关键字。即，如果有  或者  的定义，那么 , , ,  都是合法的声明语句。这是因为，从 C with Classes 设计之初就希望让用户定义的类型不是二等公民，而是能被与内置类型一样的方式使用。 [!info]- Elaborated…","html":"<h2 id=\"anchor-bc383880a44ee632\" style=\"position: relative;\">1. 类的定义<a href=\"#anchor-bc383880a44ee632\" aria-label=\"anchor bc383880a44ee632 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<img src=\"https://static.memset0.cn/img/v6/2024/02/13/b7CL1ASF.png\" style=\"width: 40em\">\n<p>在 C++ 中，用类来定义变量时，不必像 C 语言那样带有 <code class=\"language-text\">struct</code> 关键字。即，如果有 <code class=\"language-text\">class Foo</code> 或者 <code class=\"language-text\">struct Bar</code> 的定义，那么 <code class=\"language-text\">Foo x;</code>, <code class=\"language-text\">class Foo x;</code>, <code class=\"language-text\">Bar b;</code>, <code class=\"language-text\">struct Bar b;</code> 都是合法的声明语句。这是因为，从 C with Classes 设计之初就希望让用户定义的类型不是二等公民，而是能被与内置类型一样的方式使用。</p>\n<p><details  class=\"callout callout-type-info\"><summary>[!info]- Elaborated type specifiers</summary><div class=\"callout-content\"><p></p><p>带有 <code class=\"language-text\">struct</code> 或者 <code class=\"language-text\">class</code> 关键字的类型名 (如 <code class=\"language-text\">class Foo</code>) 叫做 Elaborated type specifiers。</p><p>在 C 语言中，类似 <code class=\"language-text\">struct x {}; int x;</code> 是符合语法的：虽然这会使得名字 <code class=\"language-text\">x</code> 既表示一个结构体，又表示一个变量；但在 C 语言中这不会引起歧义，因为当 <code class=\"language-text\">x</code> 表示结构体时必须带上 <code class=\"language-text\">struct</code> 关键字。不过在 C++ 中，直接使用 <code class=\"language-text\">x</code> 就只能引用到变量 <code class=\"language-text\">x</code> 了，因为此时 <code class=\"language-text\">int x;</code> 的 <code class=\"language-text\">x</code> hides <code class=\"language-text\">struct x {};</code> 的 <code class=\"language-text\">x</code>。</p><p>但是为了兼容 C，C++ 并没有禁止上述写法，而是规定可以通过 Elaborated type specifiers 显式地来使用结构体 <code class=\"language-text\">x</code>，即使用 <code class=\"language-text\">struct x</code>；对 <code class=\"language-text\">class</code> 也一样。</p><p>Elaborated type specifiers 还在 forward declaration 以及 enum 中有用途。</p></div></details></p>\n<p><details open disabled class=\"callout callout-type-info\"><summary>  C++ 中 class 和 struct 的区别</summary><div class=\"callout-content\"><p>\nC++ 中 class 和 struct 的区别是 class 的所有成员默认都是 private 的，而 struct 的所有成员默认都是 public 的，这也是 class 和 struct 的唯一区别。</p></div></details></p>","tableOfContents":"<ul>\n<li><a href=\"#anchor-bc383880a44ee632\">1. 类的定义</a></li>\n</ul>","frontmatter":{"title":"类 Class","date":"2024 年 02 月 13 日","description":null},"fields":{"cover":null,"slug":"/course/oop/note/1/","isDoc":true,"category":"[{\"name\":\"课程笔记\",\"to\":\"/course/\"}]","propsJson":null}},"previous":null,"next":null},"pageContext":{"id":"b9461236-6328-513e-9b30-a7efd6488a86","previousPostId":null,"nextPostId":null,"navJson":"[{\"slug\":\"/course/oop\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/oop/index.md\",\"title\":\"课程简介\"}]"}},"staticQueryHashes":[],"slicesMap":{}}