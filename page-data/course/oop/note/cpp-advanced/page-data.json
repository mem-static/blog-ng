{"componentChunkName":"component---src-templates-post-js","path":"/course/oop/note/cpp-advanced/","result":{"data":{"site":{"siteMetadata":{"title":"mem 的小站"}},"post":{"id":"09f4cbdb-e8d1-5cba-9ee3-db4acdf96600","excerpt":"1. 转换运算符 C++ 中有四个 转换运算符(cast operator)： ：基本类型转换 ：down-cast，安全 ：修改  属性 ：低级别 1.1. static_cast 用于在相关类型之间转换。在编译时刻完成。 基本类型的转换 子类指针/引用向父类指针/引用的转换  指针和其他类型指针的转换 1.…","html":"<h2 id=\"anchor-14ea1ca857170700\" style=\"position: relative;\">1. 转换运算符<a href=\"#anchor-14ea1ca857170700\" aria-label=\"anchor 14ea1ca857170700 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>C++ 中有四个 <strong>转换运算符(cast operator)</strong>：</p>\n<ul>\n<li><code class=\"language-text\">static_cast</code>：基本类型转换</li>\n<li><code class=\"language-text\">dynamic_cast</code>：down-cast，安全</li>\n<li><code class=\"language-text\">const_cast</code>：修改 <code class=\"language-text\">const</code> 属性</li>\n<li><code class=\"language-text\">reinterpret_cast</code>：低级别</li>\n</ul>\n<h3 id=\"anchor-76d468437668b7dc\" style=\"position: relative;\">1.1. static_cast<a href=\"#anchor-76d468437668b7dc\" aria-label=\"anchor 76d468437668b7dc permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>用于在相关类型之间转换。在编译时刻完成。</p>\n<ul>\n<li>基本类型的转换</li>\n<li>子类指针/引用向父类指针/引用的转换</li>\n<li><code class=\"language-text\">void</code> 指针和其他类型指针的转换</li>\n</ul>\n<h3 id=\"anchor-2dadbd5404c7704a\" style=\"position: relative;\">1.2. dynamic_cast<a href=\"#anchor-2dadbd5404c7704a\" aria-label=\"anchor 2dadbd5404c7704a permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>用于多态类型的转换，在运行时刻检查类型安全。（down-cast）</p>\n<ul>\n<li>父类指针/引用向子类指针/引用的转换：如果这个指针实际上不是子类及其派生类的指针，会在转换时抛出异常</li>\n</ul>\n<h3 id=\"anchor-a35564ac843c1502\" style=\"position: relative;\">1.3. const_cast<a href=\"#anchor-a35564ac843c1502\" aria-label=\"anchor a35564ac843c1502 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>用于修改类型的 <code class=\"language-text\">const</code> 或 <code class=\"language-text\">volatile</code> 属性。</p>\n<ul>\n<li>去除 <code class=\"language-text\">const</code> 属性，使变量可以修改（传给另一个指针来修改）</li>\n<li><code class=\"language-text\">volatile</code> 属性指的是变量不能被优化在寄存器中，每次修改必须访问内存</li>\n</ul>\n<h3 id=\"anchor-aaf20296c6766f8b\" style=\"position: relative;\">1.4. reinterpret_cast<a href=\"#anchor-aaf20296c6766f8b\" aria-label=\"anchor aaf20296c6766f8b permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>低级别的、无类型检查的转换。可以在几乎任何类型间转换，但是非常危险。</p>\n<h2 id=\"anchor-c256156ad3df9909\" style=\"position: relative;\">2. 模板函数与模板类<a href=\"#anchor-c256156ad3df9909\" aria-label=\"anchor c256156ad3df9909 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"anchor-91c0fa14cbad0f13\" style=\"position: relative;\">概念<a href=\"#anchor-91c0fa14cbad0f13\" aria-label=\"anchor 91c0fa14cbad0f13 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><details open disabled class=\"callout callout-type-help\"><summary> 一些其他的处理方法</summary><div class=\"callout-content\"><p></p><ol>\n<li>构造公共父类（Java 的 Object 类）\n<ul>\n<li>可能无法实现（C++ 没有单根结构，有 Fully in 结构）</li>\n</ul>\n</li>\n<li>复制代码\n<ul>\n<li>设计不良</li>\n</ul>\n</li>\n<li>无类型的容器\n<ul>\n<li>类型检查非常差</li>\n</ul>\n</li>\n</ol></div></details></p>\n<p>模板实际上是代码的重用。</p>\n<ul>\n<li>产生了泛型编程（generic programming）</li>\n<li>在定义中将类型作为参数</li>\n</ul>\n<p>分为<strong>函数模板</strong>和<strong>类模板</strong>。注意，模板不是类或者函数，它用于生成类或函数。</p>\n<p>模板本身不会存在于编译后的代码中。</p>\n<p><strong>模板实例化</strong>指用模板和具体的类型生成具体的函数和类。</p>\n<h3 id=\"anchor-a9b6ffc36185e3c8\" style=\"position: relative;\">2.1. 声明<a href=\"#anchor-a9b6ffc36185e3c8\" aria-label=\"anchor a9b6ffc36185e3c8 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>使用 <code class=\"language-text\">template</code> 关键字声明模板。其中，用 <code class=\"language-text\">typename</code> 或 <code class=\"language-text\">class</code> 声明类型参数，这两者是等价的。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">_Tp</span><span class=\"token operator\">></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>_Tp<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">,</span> _Tp<span class=\"token operator\">&amp;</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    _Tp temp <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span>\n    x <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>\n    y <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3 id=\"anchor-4dbb2cc40c105a2b\" style=\"position: relative;\">2.2. 模板实例化<a href=\"#anchor-4dbb2cc40c105a2b\" aria-label=\"anchor 4dbb2cc40c105a2b permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">typename</span> <span class=\"token class-name\">_Tp</span><span class=\"token operator\">></span>\n_Tp <span class=\"token function\">add</span><span class=\"token punctuation\">(</span>_Tp x<span class=\"token punctuation\">,</span> _Tp y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">signed</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.2</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>使用 <code class=\"language-text\">nm -CU a.out</code> 指令编译，可以发现定义了两个函数 <code class=\"language-text\">T add(int, int)</code> 和 <code class=\"language-text\">T double add&lt;double>(double, double)</code>。</p>\n<p>可以显式地实例化：<code class=\"language-text\">add&lt;double>(1.1, 2.2)</code>。在函数参数不能推断出模板中所有参数时，需要使用显式实例化：如 <code class=\"language-text\">std::min&lt;double>(1, 1.1)</code>。</p>\n<h3 id=\"anchor-763751d896b23aa6\" style=\"position: relative;\">匹配规则<a href=\"#anchor-763751d896b23aa6\" aria-label=\"anchor 763751d896b23aa6 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>首先，如果有原生的完全匹配的函数，优先使用原生函数，例如 <code class=\"language-text\">add(1, 2)</code> 调用 <code class=\"language-text\">add(int, int)</code>。</li>\n<li>其次，如果有模板能完全匹配的函数，使用模板生成函数，例如 <code class=\"language-text\">add(1.1, 2.2)</code> 调用 <code class=\"language-text\">add&lt;double>(dobule, double)</code>。</li>\n<li>再其次，尝试使用类型转换来匹配其他原生函数。但是，类型转换<mark class=\"m-mark\">不能</mark>用于匹配模板，例如 <code class=\"language-text\">add(1, 2.2)</code>。</li>\n</ul>\n<h2 id=\"anchor-b18c4612f9c46be2\" style=\"position: relative;\">3. 异常处理<a href=\"#anchor-b18c4612f9c46be2\" aria-label=\"anchor b18c4612f9c46be2 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h2 id=\"anchor-a73c13b53943e566\" style=\"position: relative;\">4. 智能指针<a href=\"#anchor-a73c13b53943e566\" aria-label=\"anchor a73c13b53943e566 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h2 id=\"anchor-cdce0e9124bc3380\" style=\"position: relative;\">5. 流<a href=\"#anchor-cdce0e9124bc3380\" aria-label=\"anchor cdce0e9124bc3380 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#anchor-14ea1ca857170700\">1. 转换运算符</a></p>\n<ul>\n<li><a href=\"#anchor-76d468437668b7dc\">1.1. static_cast</a></li>\n<li><a href=\"#anchor-2dadbd5404c7704a\">1.2. dynamic_cast</a></li>\n<li><a href=\"#anchor-a35564ac843c1502\">1.3. const_cast</a></li>\n<li><a href=\"#anchor-aaf20296c6766f8b\">1.4. reinterpret_cast</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#anchor-c256156ad3df9909\">2. 模板函数与模板类</a></p>\n<ul>\n<li><a href=\"#anchor-91c0fa14cbad0f13\">概念</a></li>\n<li><a href=\"#anchor-a9b6ffc36185e3c8\">2.1. 声明</a></li>\n<li><a href=\"#anchor-4dbb2cc40c105a2b\">2.2. 模板实例化</a></li>\n<li><a href=\"#anchor-763751d896b23aa6\">匹配规则</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#anchor-b18c4612f9c46be2\">3. 异常处理</a></p>\n</li>\n<li>\n<p><a href=\"#anchor-a73c13b53943e566\">4. 智能指针</a></p>\n</li>\n<li>\n<p><a href=\"#anchor-cdce0e9124bc3380\">5. 流</a></p>\n</li>\n</ul>","frontmatter":{"title":"C++ 语法进阶","date":null,"description":null},"fields":{"cover":null,"slug":"/course/oop/note/cpp-advanced/","isDoc":true,"category":"[{\"name\":\"课程笔记\",\"to\":\"/course/\"}]","propsJson":null}},"previous":null,"next":null},"pageContext":{"id":"09f4cbdb-e8d1-5cba-9ee3-db4acdf96600","previousPostId":null,"nextPostId":null,"navJson":"[{\"slug\":\"/course/oop\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/oop/index.md\",\"title\":\"课程简介\"}]"}},"staticQueryHashes":[],"slicesMap":{}}