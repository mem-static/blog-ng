{"componentChunkName":"component---src-templates-post-js","path":"/course/oop/note/cpp-basic/","result":{"data":{"site":{"siteMetadata":{"title":"mem 的小站"}},"post":{"id":"543255c1-9162-5943-9d1f-a364dac1aeaa","excerpt":"1. 输入输出 1.…","html":"<h2 id=\"anchor-5dbb2d033f7c731f\" style=\"position: relative;\">1. 输入输出<a href=\"#anchor-5dbb2d033f7c731f\" aria-label=\"anchor 5dbb2d033f7c731f permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<h3 id=\"anchor-1fe66f8834062542\" style=\"position: relative;\">1.1. 浮点数输出<a href=\"#anchor-1fe66f8834062542\" aria-label=\"anchor 1fe66f8834062542 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>只使用 <code class=\"language-text\">std::setprecision(n)</code> 表示保留 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span> 位有效数字输出，四舍五入，某尾多余的 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></span> 会被省略，太长时可能使用科学记数法输出。</li>\n<li>只使用 <code class=\"language-text\">std::fixed</code> 表示使用标准的十进制表示法输出，即强制禁用科学计数法。</li>\n<li>同时使用 <code class=\"language-text\">std::fixed</code> 和 <code class=\"language-text\">std::setprecision(n)</code> 表示保留小数点后 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi></mrow><annotation encoding=\"application/x-tex\">n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">n</span></span></span></span></span> 位数字，四舍五入，某尾多余的 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">0</span></span></span></span></span> 不会被省略。</li>\n<li>与 <code class=\"language-text\">std::setw</code> 不同，<code class=\"language-text\">std::setprecision</code> 的效果会一致保留到下一个 <code class=\"language-text\">std::setprecision</code> 之前。</li>\n</ul>\n<h2 id=\"anchor-1ede3c784b2ef668\" style=\"position: relative;\">2. 头文件<a href=\"#anchor-1ede3c784b2ef668\" aria-label=\"anchor 1ede3c784b2ef668 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p>在定义一个类时，应该将成员变量和成员函数的声明，放在<strong>头文件</strong> <code class=\"language-text\">.h</code> 中；将成员函数的实现，放在另一个源文件 <code class=\"language-text\">.cpp</code> 中。</p>\n<p>在编译时，编译器同时只能处理一个 <code class=\"language-text\">.cpp</code> 文件，把它编译成 <code class=\"language-text\">.obj</code> 文件。</p>\n<p>在链接时，链接器会把给定的 <code class=\"language-text\">.obj</code> 文件链接在一起，形成一个可执行文件。</p>\n<p><code class=\"language-text\">.h</code> 文件的作用就是提供函数的接口，所以应该只包含<strong>外部变量</strong>、<strong>函数原型</strong>和<strong>类声明</strong>。</p>\n<h3 id=\"anchor-f1f3b112e2b0e7ef\" style=\"position: relative;\">2.1. include 机制<a href=\"#anchor-f1f3b112e2b0e7ef\" aria-label=\"anchor f1f3b112e2b0e7ef permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">#include</code> 语句的作用是将某个文件插入到语句所在位置。使用双引号还有尖括号的位移区别是头文件搜索的顺序：</p>\n<ul>\n<li><code class=\"language-text\">#include \"xx.h\"</code>：先搜索当前文件夹，再搜索系统库。</li>\n<li><code class=\"language-text\">#include &lt;xx.h></code> 或者 <code class=\"language-text\">#include &lt;xx></code>：搜索系统库。</li>\n</ul>\n<h3 id=\"anchor-f81bee5319b2108b\" style=\"position: relative;\">2.2. 标准头文件结构<a href=\"#anchor-f81bee5319b2108b\" aria-label=\"anchor f81bee5319b2108b permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>形如下文的头文件就称为<strong>标准头文件</strong>，内容称为<strong>标准头文件结构</strong>。使用标准头文件结构可以避免重复引用时类被重复定义的问题。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">HEADER_FLAG</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">HEADER_FLAG</span></span>\n<span class=\"token comment\">// header file content</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span></code></pre></div>\n<h2 id=\"anchor-047c9d31977c8258\" style=\"position: relative;\">3. STL<a href=\"#anchor-047c9d31977c8258\" aria-label=\"anchor 047c9d31977c8258 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>\n<p><strong>容器(container)</strong> 或 <strong>集合(collection)</strong>：可以容纳若干个其他对象的一个对象。</p>\n<p><strong>迭代器(iterator)</strong>：对容器内的元素进行遍历的类型，它能按某种顺序遍历容器内存储的数据，而不暴露底层的实现。</p>\n<p><strong>标准模板库(Standard Template Library, STL)</strong> 是 C++ 提供的一系列标准库的统称，包括部分输入输出、常用的数据结构、常用的简单算法等。</p>\n<h3 id=\"anchor-05292f3d2ca3af04\" style=\"position: relative;\">3.1. std::string<a href=\"#anchor-05292f3d2ca3af04\" aria-label=\"anchor 05292f3d2ca3af04 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p>可以与 <code class=\"language-text\">std::cin</code> 和 <code class=\"language-text\">std::cout</code> 配合使用直接输入输出。</p>\n<p>可以使用 <code class=\"language-text\">operator +</code> 或者 <code class=\"language-text\">operator +=</code> 实现与其他字符串的连接。</p>\n<h4 id=\"anchor-5ef47b340aa0a98c\" style=\"position: relative;\">3.1.1. 初始化方法<a href=\"#anchor-5ef47b340aa0a98c\" aria-label=\"anchor 5ef47b340aa0a98c permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>cp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> s2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> s2<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> pos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h4 id=\"anchor-bc5e027df051e698\" style=\"position: relative;\">3.1.2. 常用方法<a href=\"#anchor-bc5e027df051e698\" aria-label=\"anchor bc5e027df051e698 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 返回字符串的长度</span>\ns<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将pos位开始的len个字符返回。</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>size_t pos<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>size_t pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> size_t len <span class=\"token operator\">=</span> npos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">append</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">replace</span><span class=\"token punctuation\">(</span>size_t pos<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsize_t <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>str<span class=\"token punctuation\">,</span> size_t pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3 id=\"anchor-dfb3b9239760f639\" style=\"position: relative;\">3.2. std::vector<a href=\"#anchor-dfb3b9239760f639\" aria-label=\"anchor dfb3b9239760f639 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<h4 id=\"anchor-cde42714fdbf6b50\" style=\"position: relative;\">3.2.1. 初始化方法<a href=\"#anchor-cde42714fdbf6b50\" aria-label=\"anchor cde42714fdbf6b50 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token function\">vector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">explicit</span> <span class=\"token function\">vector</span><span class=\"token punctuation\">(</span>size_type count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">vector</span><span class=\"token punctuation\">(</span>size_type count<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">InputIt</span><span class=\"token operator\">></span> <span class=\"token function\">vector</span><span class=\"token punctuation\">(</span>InputIt first<span class=\"token punctuation\">,</span> InputIt last<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">vector</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&amp;</span> other<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Allocator<span class=\"token operator\">&amp;</span> alloc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">vector</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&amp;&amp;</span> other<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">vector</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>initializer_list<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>此外，还可以自行指定 Allocator 并作为最后一个参数传入。</p>\n<h4 id=\"anchor-6e705ff586ba1538\" style=\"position: relative;\">3.2.2. 常用方法<a href=\"#anchor-6e705ff586ba1538\" aria-label=\"anchor 6e705ff586ba1538 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h4>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">c1<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// number of items</span>\nc1<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// whether the container is empty</span>\nc1<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// first position</span>\nc1<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// the position after the last position</span>\nc1<span class=\"token punctuation\">.</span><span class=\"token function\">front</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// first item</span>\nc1<span class=\"token punctuation\">.</span><span class=\"token function\">back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// last item</span>\nc1<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">)</span> <span class=\"token comment\">// insert behind the last position</span>\nc1<span class=\"token punctuation\">.</span><span class=\"token function\">pop_back</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// delete the last item</span>\nc1<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span> <span class=\"token comment\">// insert before the pos-th position (indexed from 0)</span>\nc1<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span> <span class=\"token comment\">// delete the pos-th position (indexed from 0)</span>\nc1<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> v <span class=\"token comment\">// modify the pos-th item</span>\nc1<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// clear all items</span>\nc1<span class=\"token punctuation\">.</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>c2<span class=\"token punctuation\">)</span> <span class=\"token comment\">// swap 2 vectors</span></code></pre></div>\n<h3 id=\"anchor-1acdb675436deb15\" style=\"position: relative;\">3.3. std::map<a href=\"#anchor-1acdb675436deb15\" aria-label=\"anchor 1acdb675436deb15 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<p><code class=\"language-text\">std::map</code> 使用红黑树实现，要求作为键的类型实现了 <code class=\"language-text\">operator &lt;</code> 方法。</p>\n<h3 id=\"anchor-2b782df383beaf54\" style=\"position: relative;\">3.4. 其他 STL 容器<a href=\"#anchor-2b782df383beaf54\" aria-label=\"anchor 2b782df383beaf54 permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li><code class=\"language-text\">pair&lt;Tp1, Tp2></code> 保存两种类型的对象</li>\n<li><code class=\"language-text\">vector&lt;Tp></code> 变长数组</li>\n<li><code class=\"language-text\">list&lt;Tp>, forward_list&lt;Tp></code> 双向链表、单向链表</li>\n<li><code class=\"language-text\">queue&lt;Tp>, deque&lt;Tp></code> 队列、双端队列</li>\n<li><code class=\"language-text\">set&lt;Tp>, multiset&lt;Tp>, map&lt;Key, Val></code> 维护数字集合、键值对集合</li>\n</ul>\n<p><details  class=\"callout callout-type-note\"><summary> 如何选择各个容器</summary><div class=\"callout-content\"><p></p><ul>\n<li>首先考虑使用 <code class=\"language-text\">vector</code>，除非有不能使用的情况</li>\n<li>如果数据中有很多小段元素，同时空间开销有影响，那么不要使用 <code class=\"language-text\">list</code> 和 <code class=\"language-text\">forward_list</code>。</li>\n<li>如果需要在序列中间插入元素，考虑使用 <code class=\"language-text\">list</code> 和 <code class=\"language-text\">forward_list</code>。</li>\n<li>如果需要在序列头尾插入元素，考虑使用 <code class=\"language-text\">deque</code>。</li>\n</ul></div></details></p>\n<h3 id=\"anchor-c05e049aa21e34be\" style=\"position: relative;\">3.5. Range-Based For Loop<a href=\"#anchor-c05e049aa21e34be\" aria-label=\"anchor c05e049aa21e34be permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h3>\n<ul>\n<li>使用 range-based 循环遍历 <code class=\"language-text\">std::vector</code>：<code class=\"language-text\">for (auto x : vector) std::cout &lt;&lt; x &lt;&lt; std::endl;</code></li>\n<li>使用 range-based 循环遍历 <code class=\"language-text\">std::map</code>：<code class=\"language-text\">for (auto [key, value] : map) std::cout &lt;&lt; key &lt;&lt; ' ' &lt;&lt; value &lt;&lt; std::endl;</code></li>\n</ul>\n<p>实际上不一定要是 STL 容器，只要有定义 <code class=\"language-text\">std::begin</code> 和 <code class=\"language-text\">std::end</code> 方法即可。<code class=\"language-text\">auto</code> 可以换为 <code class=\"language-text\">auto &amp;</code>、<code class=\"language-text\">const auto &amp;</code>、<code class=\"language-text\">auto &amp;&amp;</code> 等。</p>\n<h2 id=\"anchor-f078fc8271468def\" style=\"position: relative;\">4. 命名空间<a href=\"#anchor-f078fc8271468def\" aria-label=\"anchor f078fc8271468def permalink\" class=\"anchor after\"><svg aria-hidden=\"true\" height=\"20\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"20\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a></h2>","tableOfContents":"<ul>\n<li>\n<p><a href=\"#anchor-5dbb2d033f7c731f\">1. 输入输出</a></p>\n<ul>\n<li><a href=\"#anchor-1fe66f8834062542\">1.1. 浮点数输出</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#anchor-1ede3c784b2ef668\">2. 头文件</a></p>\n<ul>\n<li><a href=\"#anchor-f1f3b112e2b0e7ef\">2.1. include 机制</a></li>\n<li><a href=\"#anchor-f81bee5319b2108b\">2.2. 标准头文件结构</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#anchor-047c9d31977c8258\">3. STL</a></p>\n<ul>\n<li><a href=\"#anchor-05292f3d2ca3af04\">3.1. std::string</a></li>\n<li><a href=\"#anchor-dfb3b9239760f639\">3.2. std::vector</a></li>\n<li><a href=\"#anchor-1acdb675436deb15\">3.3. std::map</a></li>\n<li><a href=\"#anchor-2b782df383beaf54\">3.4. 其他 STL 容器</a></li>\n<li><a href=\"#anchor-c05e049aa21e34be\">3.5. Range-Based For Loop</a></li>\n</ul>\n</li>\n<li>\n<p><a href=\"#anchor-f078fc8271468def\">4. 命名空间</a></p>\n</li>\n</ul>","frontmatter":{"title":"C++ 语法基础","date":null,"description":null},"fields":{"cover":null,"slug":"/course/oop/note/cpp-basic/","isDoc":true,"category":"[{\"name\":\"课程笔记\",\"to\":\"/course/\"}]","propsJson":null}},"previous":null,"next":null},"pageContext":{"id":"543255c1-9162-5943-9d1f-a364dac1aeaa","previousPostId":null,"nextPostId":null,"navJson":"[{\"slug\":\"/course/oop\",\"file\":\"/home/runner/work/gatsby-blog/gatsby-blog/content/course/oop/index.md\",\"title\":\"课程简介\"}]"}},"staticQueryHashes":[],"slicesMap":{}}