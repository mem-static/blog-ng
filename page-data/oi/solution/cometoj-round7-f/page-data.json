{"componentChunkName":"component---src-templates-blog-post-js","path":"/oi/solution/cometoj-round7-f/","result":{"data":{"site":{"siteMetadata":{"title":"memset0's Blog"}},"markdownRemark":{"id":"f5617264-33aa-538c-8934-82f4aa12c0e0","excerpt":"维护序列 ，支持以下操作  次： 给 ，将  位置的值修改为 ； 给 ，查询区间中有多少子区间的最大值小于或等于 。 。","html":"<blockquote>\n<p>维护序列 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>a</mi><mrow><mn>1</mn><mo>…</mo><mi>n</mi></mrow></msub></mrow><annotation encoding=\"application/x-tex\">a_{1\\ldots n}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.5806em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3011em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">1</span><span class=\"minner mtight\">…</span><span class=\"mord mathnormal mtight\">n</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span></span></span></span></span>，支持以下操作 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>m</mi></mrow><annotation encoding=\"application/x-tex\">m</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">m</span></span></span></span></span> 次：</p>\n<ol>\n<li>给 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi><mo separator=\"true\">,</mo><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">x,y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span>，将 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></span> 位置的值修改为 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>y</mi></mrow><annotation encoding=\"application/x-tex\">y</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.625em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.03588em;\">y</span></span></span></span></span>；</li>\n<li>给 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo separator=\"true\">,</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">l,r,x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8889em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></span>，查询区间<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[l,r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span></span>中有多少子区间的最大值小于或等于 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.4306em;\"></span><span class=\"mord mathnormal\">x</span></span></span></span></span>。</li>\n</ol>\n<p><span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>n</mi><mo separator=\"true\">,</mo><mi>m</mi><mo>≤</mo><mn>3</mn><mo>×</mo><mn>1</mn><msup><mn>0</mn><mn>5</mn></msup></mrow><annotation encoding=\"application/x-tex\">n,m \\leq 3 \\times 10^5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8304em;vertical-align:-0.1944em;\"></span><span class=\"mord mathnormal\">n</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">m</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.7278em;vertical-align:-0.0833em;\"></span><span class=\"mord\">3</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.8141em;\"></span><span class=\"mord\">1</span><span class=\"mord\"><span class=\"mord\">0</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">5</span></span></span></span></span></span></span></span></span></span></span></span>。</p>\n</blockquote>\n<!-- more -->\n<h2>题解</h2>\n<p>对于询问 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">{</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo separator=\"true\">,</mo><mi>x</mi><mo stretchy=\"false\">}</mo></mrow><annotation encoding=\"application/x-tex\">\\{l,r,x\\}</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">{</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">}</span></span></span></span></span>，相当于转化为这样一个问题：</p>\n<p>序列 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span></span> 满足 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><msub><mi>b</mi><mi>i</mi></msub><mo>=</mo><mo stretchy=\"false\">[</mo><msub><mi>a</mi><mi>i</mi></msub><mo>≤</mo><mi>x</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">b_i = [a_i \\leq x]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8444em;vertical-align:-0.15em;\"></span><span class=\"mord\"><span class=\"mord mathnormal\">b</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord\"><span class=\"mord mathnormal\">a</span><span class=\"msupsub\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.3117em;\"><span style=\"top:-2.55em;margin-left:0em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathnormal mtight\">i</span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.15em;\"><span></span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">≤</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\">x</span><span class=\"mclose\">]</span></span></span></span></span>，然后询问 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>b</mi></mrow><annotation encoding=\"application/x-tex\">b</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6944em;\"></span><span class=\"mord mathnormal\">b</span></span></span></span></span> 的区间 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo stretchy=\"false\">[</mo><mi>l</mi><mo separator=\"true\">,</mo><mi>r</mi><mo stretchy=\"false\">]</mo></mrow><annotation encoding=\"application/x-tex\">[l,r]</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mopen\">[</span><span class=\"mord mathnormal\" style=\"margin-right:0.01968em;\">l</span><span class=\"mpunct\">,</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">r</span><span class=\"mclose\">]</span></span></span></span></span> 内，有多少子区间的均为 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">1</span></span></span></span></span>。</p>\n<p>考虑一个分块，维护块内外的信息是平凡的，瓶颈在于如何优化离散化的复杂度。</p>\n<p>然后此处用到一个叫分散层叠的 trick，开一个每一个块作为叶子节点的线段树，叶子节点维护每个数的权值及排名，</p>\n<p>考虑 <code class=\"language-text\">maintain</code> 操作，每次只保留下标是 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>3</mn></mrow><annotation encoding=\"application/x-tex\">3</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">3</span></span></span></span></span> 的倍数的位置。</p>\n<ul>\n<li>对于修改操作，暴力 <code class=\"language-text\">maintain</code> 上去，时间复杂度 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msqrt><mi>n</mi></msqrt><mo>+</mo><mfrac><mn>2</mn><mn>3</mn></mfrac><msqrt><mi>n</mi></msqrt><mo>+</mo><mfrac><mn>4</mn><mn>9</mn></mfrac><msqrt><mi>n</mi></msqrt><mo>+</mo><mo>⋯</mo><mtext> </mtext><mo stretchy=\"false\">)</mo><mo>=</mo><mi>O</mi><mo stretchy=\"false\">(</mo><msqrt><mi>n</mi></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\sqrt n + \\frac 2 3 \\sqrt n + \\frac 4 9 \\sqrt n + \\cdots) = O(\\sqrt n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0503em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8003em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"padding-left:0.833em;\">n</span></span><span style=\"top:-2.7603em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2397em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">3</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">2</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8003em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"padding-left:0.833em;\">n</span></span><span style=\"top:-2.7603em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2397em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.1901em;vertical-align:-0.345em;\"></span><span class=\"mord\"><span class=\"mopen nulldelimiter\"></span><span class=\"mfrac\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8451em;\"><span style=\"top:-2.655em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">9</span></span></span></span><span style=\"top:-3.23em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"frac-line\" style=\"border-bottom-width:0.04em;\"></span></span><span style=\"top:-3.394em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\"><span class=\"mord mtight\">4</span></span></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.345em;\"><span></span></span></span></span></span><span class=\"mclose nulldelimiter\"></span></span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8003em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"padding-left:0.833em;\">n</span></span><span style=\"top:-2.7603em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2397em;\"><span></span></span></span></span></span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"minner\">⋯</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mclose\">)</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span><span class=\"mrel\">=</span><span class=\"mspace\" style=\"margin-right:0.2778em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:1.0503em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8003em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"padding-left:0.833em;\">n</span></span><span style=\"top:-2.7603em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2397em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span>。</li>\n<li>对于查询操作，DFS 遍历整棵树，递归到下一层的时候指针只会右移至多 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6444em;\"></span><span class=\"mord\">2</span></span></span></span></span> 次，是常数级别的，故时间复杂度为总节点数，即 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><msqrt><mi>n</mi></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(\\sqrt n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0503em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8003em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"padding-left:0.833em;\">n</span></span><span style=\"top:-2.7603em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2397em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span>。</li>\n</ul>\n<h2>卡常</h2>\n<p>实现上由于分散层叠的常数有点大，我们需要一些卡常的小技巧。</p>\n<ol>\n<li>内存连续，而且注意到直接开的话内存空余会很大，可以手动分配内存。</li>\n<li>关于往后扫四次的这个操作，可以写成这样 <code class=\"language-text\">k+=arr[k+2]&lt;=x?2:0,k+=arr[k+1]&lt;=x</code>，然后在 <code class=\"language-text\">arr</code> 里多丢两个 <span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mo>+</mo><mi mathvariant=\"normal\">∞</mi></mrow><annotation encoding=\"application/x-tex\">+\\infty</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.6667em;vertical-align:-0.0833em;\"></span><span class=\"mord\">+</span><span class=\"mord\">∞</span></span></span></span></span>。这样可以少很多分支条件。</li>\n</ol>\n<h2>代码</h2>\n<h3>二分查找版本</h3>\n<p>时间复杂度：<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><msqrt><mrow><mi>n</mi><mi>log</mi><mo>⁡</mo><mi>n</mi></mrow></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n \\sqrt {n\\log n})</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.085em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.835em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord\" style=\"padding-left:0.833em;\"><span class=\"mord mathnormal\">n</span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mop\">lo<span style=\"margin-right:0.01389em;\">g</span></span><span class=\"mspace\" style=\"margin-right:0.1667em;\"></span><span class=\"mord mathnormal\">n</span></span></span><span style=\"top:-2.795em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.205em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n\n<span class=\"token keyword\">namespace</span> mem<span class=\"token punctuation\">{</span> <span class=\"token comment\">//v2.1.2 => size: 14.19KiB</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEM_IO</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEM_MATH</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEM_UTILS</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEM_MODINT</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEM_RANDOM</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEM_STDVAL</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEM_LOGGER</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEM_CONTAINER</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">memset0</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEM_FASTIO</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__SIZEOF_INT128__</span></span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEM_INT128</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">__integer_mapper</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span>       </span><span class=\"token punctuation\">\\</span>\n        <span class=\"token expression\"><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>                      </span><span class=\"token punctuation\">\\</span>\n        <span class=\"token expression\"><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>             </span><span class=\"token punctuation\">\\</span>\n        <span class=\"token expression\"><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>            </span><span class=\"token punctuation\">\\</span>\n        <span class=\"token expression\"><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span></span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">__float_mapper</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span>         </span><span class=\"token punctuation\">\\</span>\n        <span class=\"token expression\"><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>                    </span><span class=\"token punctuation\">\\</span>\n        <span class=\"token expression\"><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>                   </span><span class=\"token punctuation\">\\</span>\n        <span class=\"token expression\"><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span></span></span>\n    \n    <span class=\"token keyword\">namespace</span> stdval<span class=\"token punctuation\">{</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MEM_STDVAL</span></span>\n      <span class=\"token keyword\">using</span> i32<span class=\"token operator\">=</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> i64<span class=\"token operator\">=</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> u32<span class=\"token operator\">=</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> u64<span class=\"token operator\">=</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> f32<span class=\"token operator\">=</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> f64<span class=\"token operator\">=</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> f96<span class=\"token operator\">=</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MEM_INT128</span></span>\n      <span class=\"token keyword\">using</span> i128<span class=\"token operator\">=</span>__int128_t<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> u128<span class=\"token operator\">=</span>__uint128_t<span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">namespace</span> utils<span class=\"token punctuation\">{</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MEM_UTILS</span></span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>tie<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cerr<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>swap<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>sort<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>unique<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>reverse<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>shuffle<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>function<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>make_pair<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>make_tuple<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>accumulate<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>lower_bound<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>upper_bound<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>max_element<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>min_element<span class=\"token punctuation\">;</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">namespace</span> random<span class=\"token punctuation\">{</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MEM_RANDOM</span></span>\n      <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> LuckyNumber<span class=\"token operator\">=</span><span class=\"token number\">20040726</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Kanbe Kotori's Birthday</span>\n      std<span class=\"token double-colon punctuation\">::</span>mt19937 <span class=\"token function\">rng</span><span class=\"token punctuation\">(</span>LuckyNumber<span class=\"token operator\">^</span>std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span>steady_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">time_since_epoch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      std<span class=\"token double-colon punctuation\">::</span>mt19937_64 <span class=\"token function\">rng64</span><span class=\"token punctuation\">(</span>LuckyNumber<span class=\"token operator\">^</span>std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span>steady_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">time_since_epoch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      \n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> T <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span>T l<span class=\"token punctuation\">,</span>T r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">uniform_int_distribution</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>rng<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> T <span class=\"token function\">rand64</span><span class=\"token punctuation\">(</span>T l<span class=\"token punctuation\">,</span>T r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">uniform_int_distribution</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>rng<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">namespace</span> modint<span class=\"token punctuation\">{</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MEM_MODINT</span></span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> mod<span class=\"token operator\">></span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Z</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">inline</span> <span class=\"token function\">Z</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">inline</span> <span class=\"token function\">Z</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>x<span class=\"token operator\">=</span>t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-=</span><span class=\"token punctuation\">(</span>Z a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-=</span>a<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+=</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>Z a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+=</span>a<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">>=</span>mod<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-=</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">*=</span><span class=\"token punctuation\">(</span>Z a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>x<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>x<span class=\"token operator\">*</span>a<span class=\"token punctuation\">.</span>x<span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">friend</span> <span class=\"token keyword\">inline</span> Z <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>Z a<span class=\"token punctuation\">,</span>Z b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>b<span class=\"token punctuation\">.</span>x<span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">friend</span> <span class=\"token keyword\">inline</span> Z <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>Z a<span class=\"token punctuation\">,</span>Z b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>x<span class=\"token operator\">-=</span>b<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>x<span class=\"token operator\">+=</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">friend</span> <span class=\"token keyword\">inline</span> Z <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>Z a<span class=\"token punctuation\">,</span>Z b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>x<span class=\"token operator\">+=</span>b<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">>=</span>mod<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>x<span class=\"token operator\">-=</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      \n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> mod<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> Z<span class=\"token operator\">&lt;</span>mod<span class=\"token operator\">></span> <span class=\"token function\">finv</span><span class=\"token punctuation\">(</span>Z<span class=\"token operator\">&lt;</span>mod<span class=\"token operator\">></span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>x<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>mod<span class=\"token operator\">-</span>mod<span class=\"token operator\">/</span>x<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">finv</span><span class=\"token punctuation\">(</span>mod<span class=\"token operator\">%</span>x<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> mod<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> Z<span class=\"token operator\">&lt;</span>mod<span class=\"token operator\">></span> <span class=\"token function\">fpow</span><span class=\"token punctuation\">(</span>Z<span class=\"token operator\">&lt;</span>mod<span class=\"token operator\">></span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        Z <span class=\"token operator\">&lt;</span>mod<span class=\"token operator\">></span> s<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>b<span class=\"token punctuation\">;</span>b<span class=\"token operator\">>>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">=</span>a<span class=\"token operator\">*</span>a<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>s<span class=\"token operator\">=</span>s<span class=\"token operator\">*</span>a<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      \n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> mod<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init_inverse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>Z<span class=\"token operator\">&lt;</span>mod<span class=\"token operator\">></span> <span class=\"token operator\">*</span>inv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        inv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>inv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>inv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>mod<span class=\"token operator\">-</span>mod<span class=\"token operator\">/</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>inv<span class=\"token punctuation\">[</span>mod<span class=\"token operator\">%</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> mod<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init_factorial</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>Z<span class=\"token operator\">&lt;</span>mod<span class=\"token operator\">></span> <span class=\"token operator\">*</span>fac<span class=\"token punctuation\">,</span>Z<span class=\"token operator\">&lt;</span>mod<span class=\"token operator\">></span> <span class=\"token operator\">*</span>ifac<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        fac<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token function\">init_inverse</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>ifac<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>fac<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>fac<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">,</span>ifac<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ifac<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>ifac<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">namespace</span> io<span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> mod<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>modint<span class=\"token double-colon punctuation\">::</span>Z<span class=\"token operator\">&lt;</span>mod<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> mod<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>modint<span class=\"token double-colon punctuation\">::</span>Z<span class=\"token operator\">&lt;</span>mod<span class=\"token operator\">></span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">namespace</span> math<span class=\"token punctuation\">{</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MEM_MATH</span></span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>max<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>min<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> T <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>T x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> x<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">?</span><span class=\"token operator\">-</span>x<span class=\"token operator\">:</span>x<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> T <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>T n<span class=\"token punctuation\">,</span>T m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> m<span class=\"token operator\">?</span><span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span>n<span class=\"token operator\">%</span>m<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> T <span class=\"token function\">lcm</span><span class=\"token punctuation\">(</span>T n<span class=\"token punctuation\">,</span>T m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> n<span class=\"token operator\">/</span><span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>m<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      \n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> stdval<span class=\"token double-colon punctuation\">::</span>u64 p<span class=\"token operator\">></span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">FastDiv</span><span class=\"token punctuation\">{</span>\n        stdval<span class=\"token double-colon punctuation\">::</span>u64 t<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">inline</span> <span class=\"token function\">FastDiv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span>stdval<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">u64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token function\">mul_inv</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>stdval<span class=\"token double-colon punctuation\">::</span>u64 n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> n<span class=\"token operator\">*</span>i<span class=\"token operator\">&lt;=</span>t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>stdval<span class=\"token double-colon punctuation\">::</span>i64 n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> stdval<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">u64</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">?</span><span class=\"token operator\">-</span>n<span class=\"token operator\">:</span>n<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>i<span class=\"token operator\">&lt;=</span>t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">inline</span> stdval<span class=\"token double-colon punctuation\">::</span>u64 <span class=\"token function\">mul_inv</span><span class=\"token punctuation\">(</span>stdval<span class=\"token double-colon punctuation\">::</span>u64 n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          stdval<span class=\"token double-colon punctuation\">::</span>u64 x<span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>x<span class=\"token operator\">*=</span><span class=\"token number\">2</span><span class=\"token operator\">-</span>n<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MEM_INT128</span></span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> stdval<span class=\"token double-colon punctuation\">::</span>u64 b<span class=\"token operator\">></span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">FastMod</span><span class=\"token punctuation\">{</span>\n        stdval<span class=\"token double-colon punctuation\">::</span>u64 m<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">inline</span> <span class=\"token function\">FastMod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">m</span><span class=\"token punctuation\">(</span>stdval<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">u64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>stdval<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">u128</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">inline</span> stdval<span class=\"token double-colon punctuation\">::</span>u64 <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>stdval<span class=\"token double-colon punctuation\">::</span>u64 a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          stdval<span class=\"token double-colon punctuation\">::</span>u64 q<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>stdval<span class=\"token double-colon punctuation\">::</span>u64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>stdval<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">u128</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">>></span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          stdval<span class=\"token double-colon punctuation\">::</span>u64 r<span class=\"token operator\">=</span>a<span class=\"token operator\">-</span>q<span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> r<span class=\"token operator\">>=</span>b<span class=\"token operator\">?</span>r<span class=\"token operator\">-</span>b<span class=\"token operator\">:</span>r<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">namespace</span> container<span class=\"token punctuation\">{</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MEM_CONTAINER</span></span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>tuple<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>set<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>unordered_set<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>map<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token punctuation\">;</span>\n      \n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>tie<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>make_pair<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>make_tuple<span class=\"token punctuation\">;</span>\n      \n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">vector</span><span class=\"token operator\">:</span><span class=\"token base-clause\">std<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">vector</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>vector<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">vector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token function\">vector</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>plain<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>plain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>rhs<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>rhs<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Function</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>Function func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>it<span class=\"token operator\">:</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">inline</span> vector <span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">></span>r<span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">&lt;</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token function\">vector</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>l<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> rsp<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>l<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> rsp<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>rsp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>set<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">auto</span> it<span class=\"token operator\">=</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T e<span class=\"token operator\">:</span>src<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>it<span class=\"token operator\">++</span><span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Function</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> vector<span class=\"token operator\">&lt;</span>R<span class=\"token operator\">></span> <span class=\"token function\">_map</span><span class=\"token punctuation\">(</span>Function func<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n          vector <span class=\"token operator\">&lt;</span>R<span class=\"token operator\">></span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>size_t i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">R</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> vector<span class=\"token operator\">&lt;</span>R<span class=\"token operator\">></span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>R <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token generic-function\"><span class=\"token function\">_map</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>R<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">R</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> vector<span class=\"token operator\">&lt;</span>R<span class=\"token operator\">></span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token function\">R</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>func<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token generic-function\"><span class=\"token function\">_map</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>R<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      \n      <span class=\"token keyword\">struct</span> <span class=\"token class-name\">string</span><span class=\"token operator\">:</span><span class=\"token base-clause\">std<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">string</span></span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>plain<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>plain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> string <span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>vet<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n        \n        vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>dim<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>src<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>tar<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>dim<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>tar<span class=\"token punctuation\">,</span>dim<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          vector <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> rsp<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pos<span class=\"token operator\">=</span><span class=\"token function\">strtok</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span>tar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>pos<span class=\"token punctuation\">;</span>pos<span class=\"token operator\">=</span><span class=\"token function\">strtok</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span>tar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            rsp<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> src<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tar<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> rsp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">inline</span> string <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>fm<span class=\"token punctuation\">,</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span><span class=\"token function\">snprintf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>fm<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buf<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>len<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">snprintf</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span>len<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>fm<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          string <span class=\"token function\">str</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buf<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">inline</span> string <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>fm<span class=\"token punctuation\">,</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span>fm<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">__to_string</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span>                 </span><span class=\"token punctuation\">\\</span>\n      <span class=\"token expression\"><span class=\"token keyword\">inline</span> string <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> </span><span class=\"token punctuation\">\\</span>\n        <span class=\"token expression\"><span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          </span><span class=\"token punctuation\">\\</span>\n      <span class=\"token expression\"><span class=\"token punctuation\">}</span></span></span>\n      <span class=\"token function\">__float_mapper</span><span class=\"token punctuation\">(</span>__to_string<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">__integer_mapper</span><span class=\"token punctuation\">(</span>__to_string<span class=\"token punctuation\">)</span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">__to_string</span></span>\n      \n      <span class=\"token keyword\">inline</span> string <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">inline</span> string <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">inline</span> string <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      \n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> mod<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> string <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> mem<span class=\"token double-colon punctuation\">::</span>modint<span class=\"token double-colon punctuation\">::</span>Z<span class=\"token operator\">&lt;</span>mod<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      \n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> string <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>ctn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token string\">\"[\"</span><span class=\"token operator\">+</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>ctn<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> string <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> set<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>ctn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        string result<span class=\"token operator\">=</span><span class=\"token string\">\"{\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> flag<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>it<span class=\"token operator\">:</span>ctn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>result<span class=\"token operator\">+=</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">;</span>\n          flag<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n          result<span class=\"token operator\">+=</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token operator\">+</span><span class=\"token string\">\"}\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T2</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> string <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> map<span class=\"token operator\">&lt;</span>T1<span class=\"token punctuation\">,</span>T2<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>ctn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        string result<span class=\"token operator\">=</span><span class=\"token string\">\"{\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> flag<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>it<span class=\"token operator\">:</span>ctn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>result<span class=\"token operator\">+=</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">;</span>\n          flag<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n          result<span class=\"token operator\">+=</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token operator\">+</span><span class=\"token string\">\"}\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      \n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> string string<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>vet<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>vet<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        string res<span class=\"token operator\">=</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>vet<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>size_t i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>vet<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          res<span class=\"token operator\">+=</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n          res<span class=\"token operator\">+=</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>vet<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      \n      <span class=\"token keyword\">inline</span> string <span class=\"token keyword\">operator</span> <span class=\"token string\">\"\"</span> <span class=\"token function\">_s</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">inline</span> string <span class=\"token keyword\">operator</span> <span class=\"token string\">\"\"</span> <span class=\"token function\">_s</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span>size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">inline</span> string <span class=\"token keyword\">operator</span> <span class=\"token string\">\"\"</span> <span class=\"token function\">_s</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">inline</span> string <span class=\"token keyword\">operator</span> <span class=\"token string\">\"\"</span> <span class=\"token function\">_s</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">namespace</span> io<span class=\"token punctuation\">{</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MEM_IO</span></span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MEM_FASTIO</span></span>\n      <span class=\"token keyword\">namespace</span> fastio<span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> BUFFER<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> ibuf<span class=\"token punctuation\">[</span>BUFFER<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>iS<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>iT<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>iS<span class=\"token operator\">==</span>iT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            iT<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>iS<span class=\"token operator\">=</span>ibuf<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">fread</span><span class=\"token punctuation\">(</span>ibuf<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>BUFFER<span class=\"token punctuation\">,</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> iS<span class=\"token operator\">==</span>iT<span class=\"token operator\">?</span><span class=\"token constant\">EOF</span><span class=\"token operator\">:</span><span class=\"token operator\">*</span>iS<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>iS<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">char</span> obuf<span class=\"token punctuation\">[</span>BUFFER<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>oS<span class=\"token operator\">=</span>obuf<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>oT<span class=\"token operator\">=</span>oS<span class=\"token operator\">+</span>BUFFER<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>obuf<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>oS<span class=\"token operator\">-</span>obuf<span class=\"token punctuation\">,</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          oS<span class=\"token operator\">=</span>obuf<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">putc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">*</span>oS<span class=\"token operator\">++</span><span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>oS<span class=\"token operator\">==</span>oT<span class=\"token punctuation\">)</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Flusher</span><span class=\"token punctuation\">{</span><span class=\"token operator\">~</span><span class=\"token function\">Flusher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>flusher<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">using</span> fastio<span class=\"token double-colon punctuation\">::</span>getc<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> fastio<span class=\"token double-colon punctuation\">::</span>putc<span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n      <span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">putc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n      \n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readDigit</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        x<span class=\"token operator\">=</span><span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>x<span class=\"token operator\">=</span><span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">readDigit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">readDigit</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readAlpha</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        x<span class=\"token operator\">=</span><span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isalpha</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>x<span class=\"token operator\">=</span><span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">readAlpha</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">readAlpha</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">__read</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span>                             </span><span class=\"token punctuation\">\\</span>\n        <span class=\"token expression\"><span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>                  </span><span class=\"token punctuation\">\\</span>\n          <span class=\"token expression\">x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">bool</span> f<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span><span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           </span><span class=\"token punctuation\">\\</span>\n          <span class=\"token expression\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>f<span class=\"token operator\">^=</span>c<span class=\"token operator\">==</span></span><span class=\"token char\">'-'</span><span class=\"token expression\"><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </span><span class=\"token punctuation\">\\</span>\n          <span class=\"token expression\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>x<span class=\"token operator\">=</span>x<span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token operator\">+</span>c<span class=\"token operator\">-</span></span><span class=\"token char\">'0'</span><span class=\"token expression\"><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </span><span class=\"token punctuation\">\\</span>\n          <span class=\"token expression\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>x<span class=\"token operator\">=</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span>                              </span><span class=\"token punctuation\">\\</span>\n        <span class=\"token expression\"><span class=\"token punctuation\">}</span></span></span>\n      <span class=\"token function\">__integer_mapper</span><span class=\"token punctuation\">(</span>__read<span class=\"token punctuation\">)</span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">__read</span></span>\n      \n      <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>x<span class=\"token operator\">=</span><span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span><span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>c<span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">!</span><span class=\"token function\">isspace</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>s<span class=\"token operator\">++</span><span class=\"token operator\">=</span>c<span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">*</span>s<span class=\"token operator\">++</span><span class=\"token operator\">=</span><span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>container<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span><span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>c<span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">!</span><span class=\"token function\">isspace</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>s<span class=\"token operator\">+=</span>c<span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      \n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">=</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> T <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        T x<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span>Args <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">__print</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span>           </span><span class=\"token punctuation\">\\</span>\n        <span class=\"token expression\"><span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>T x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>  </span><span class=\"token punctuation\">\\</span>\n          <span class=\"token expression\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token function\">putc</span><span class=\"token punctuation\">(</span></span><span class=\"token char\">'-'</span><span class=\"token expression\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>x<span class=\"token operator\">=</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span> </span><span class=\"token punctuation\">\\</span>\n          <span class=\"token expression\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">></span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    </span><span class=\"token punctuation\">\\</span>\n          <span class=\"token expression\"><span class=\"token function\">putc</span><span class=\"token punctuation\">(</span></span><span class=\"token char\">'0'</span><span class=\"token expression\"><span class=\"token operator\">+</span>x<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        </span><span class=\"token punctuation\">\\</span>\n        <span class=\"token expression\"><span class=\"token punctuation\">}</span></span></span>\n      <span class=\"token function\">__integer_mapper</span><span class=\"token punctuation\">(</span>__print<span class=\"token punctuation\">)</span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">__print</span></span>\n      \n      <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token function\">putc</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token function\">putc</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> container<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token function\">putc</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      \n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">putc</span><span class=\"token punctuation\">(</span><span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      \n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printfm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>formatter<span class=\"token punctuation\">,</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>container<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>formatter<span class=\"token punctuation\">,</span>arguments<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printfm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> container<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>formatter<span class=\"token punctuation\">,</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>container<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>formatter<span class=\"token punctuation\">,</span>arguments<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">namespace</span> logger<span class=\"token punctuation\">{</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MEM_LOGGER</span></span>\n      <span class=\"token keyword\">enum</span> <span class=\"token class-name\">ConsoleColor</span><span class=\"token punctuation\">{</span>\n        NOPE<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>BLACK<span class=\"token punctuation\">,</span>RED<span class=\"token punctuation\">,</span>GREEN<span class=\"token punctuation\">,</span>YELLOW<span class=\"token punctuation\">,</span>BLUE<span class=\"token punctuation\">,</span>PURPLE<span class=\"token punctuation\">,</span>DEEPBLUE\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> ConsoleColor color<span class=\"token operator\">=</span>NOPE<span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>formatter<span class=\"token punctuation\">,</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\033[%dm\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token operator\">+</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span>formatter<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\033[0m\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span>formatter<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> ConsoleColor color<span class=\"token operator\">=</span>NOPE<span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logln</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>formatter<span class=\"token punctuation\">,</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\033[%dm\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token operator\">+</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span>formatter<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\033[0m\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span>formatter<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span>container<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">logs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">logs</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logsln</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">logs</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">__integer_mapper</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">__float_mapper</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">__string_mapper</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">__string_join_mapper</span></span>\n    \n    <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> io<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> math<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> utils<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> modint<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> random<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> stdval<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> logger<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> container<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// namespace mem</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> mem<span class=\"token double-colon punctuation\">::</span>io<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> mem<span class=\"token double-colon punctuation\">::</span>math<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> mem<span class=\"token double-colon punctuation\">::</span>utils<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N<span class=\"token operator\">=</span><span class=\"token number\">3e5</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>sqn<span class=\"token operator\">=</span><span class=\"token number\">502</span><span class=\"token punctuation\">,</span>S<span class=\"token operator\">=</span>sqn<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>bln<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">atom</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">inline</span> atom <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> atom <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> atom <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>l<span class=\"token operator\">==</span>a<span class=\"token punctuation\">.</span>c<span class=\"token operator\">&amp;&amp;</span>b<span class=\"token punctuation\">.</span>l<span class=\"token operator\">==</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">.</span>l<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>r<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>c<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>s<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>s<span class=\"token operator\">+</span>a<span class=\"token punctuation\">.</span>c<span class=\"token operator\">*</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>l<span class=\"token operator\">==</span>a<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">.</span>l<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>c<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>s<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>s<span class=\"token operator\">+</span>a<span class=\"token punctuation\">.</span>c<span class=\"token operator\">*</span>b<span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>l<span class=\"token operator\">==</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>r<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>c<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>s<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>s<span class=\"token operator\">+</span>a<span class=\"token punctuation\">.</span>r<span class=\"token operator\">*</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>c<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>s<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>s<span class=\"token operator\">+</span>a<span class=\"token punctuation\">.</span>r<span class=\"token operator\">*</span>b<span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> atom <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  atom res<span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>r<span class=\"token operator\">-</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>l<span class=\"token operator\">&lt;</span>res<span class=\"token punctuation\">.</span>c<span class=\"token operator\">&amp;&amp;</span>a<span class=\"token punctuation\">[</span>l<span class=\"token operator\">+</span>res<span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>x<span class=\"token punctuation\">)</span>res<span class=\"token punctuation\">.</span>l<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>r<span class=\"token operator\">&lt;</span>res<span class=\"token punctuation\">.</span>c<span class=\"token operator\">&amp;&amp;</span>a<span class=\"token punctuation\">[</span>r<span class=\"token operator\">-</span>res<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>x<span class=\"token punctuation\">)</span>res<span class=\"token punctuation\">.</span>r<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> pre<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>l<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>x<span class=\"token punctuation\">)</span>res<span class=\"token punctuation\">.</span>s<span class=\"token operator\">+=</span><span class=\"token operator\">++</span>pre<span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> pre<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> atom c<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> anc<span class=\"token punctuation\">[</span>S<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>siz<span class=\"token punctuation\">[</span>S<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>tag<span class=\"token punctuation\">[</span>S<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> anc<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>x<span class=\"token operator\">?</span>x<span class=\"token operator\">:</span>anc<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>anc<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">=</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>s<span class=\"token operator\">+=</span>siz<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>siz<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>siz<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>siz<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  anc<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>b<span class=\"token punctuation\">,</span>siz<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>siz<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">block</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">[</span>S<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">[</span>S<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  atom pre<span class=\"token punctuation\">[</span>S<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">loc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>val<span class=\"token operator\">+</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>val<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    n<span class=\"token operator\">=</span>r<span class=\"token operator\">-</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    pre<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    pre<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>n<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>c<span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>val<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>t<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>t<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">modify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      val<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>k<span class=\"token operator\">+</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token operator\">&amp;&amp;</span>val<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>val<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">&amp;&amp;</span>val<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>val<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>anc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">,</span>siz<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>tag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>s<span class=\"token operator\">=</span>i<span class=\"token operator\">?</span>pre<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>s<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      tag<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;&amp;</span>tag<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;&amp;</span>tag<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>s<span class=\"token punctuation\">[</span>N<span class=\"token operator\">/</span>sqn<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">memset0 </span></span>\n  <span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.in\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.out\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n  <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>bln<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>sqn<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>s<span class=\"token punctuation\">[</span>bln<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>s<span class=\"token punctuation\">[</span>bln<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>bln<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> o<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span>\n      s<span class=\"token punctuation\">[</span>bln<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">modify</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span>s<span class=\"token punctuation\">[</span>bln<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      s<span class=\"token punctuation\">[</span>bln<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      atom ans<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bln<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>bln<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        ans<span class=\"token operator\">=</span><span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        ans<span class=\"token operator\">=</span><span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>bln<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>bln<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>bln<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>ans<span class=\"token operator\">=</span>ans<span class=\"token operator\">+</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pre<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">loc</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        ans<span class=\"token operator\">=</span>ans<span class=\"token operator\">+</span><span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>bln<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">,</span><span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"clocks: %.4lf\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>CLOCKS_PER_SEC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>分散层叠版本</h3>\n<p>时间复杂度：<span class=\"math math-inline\"><span class=\"katex\"><span class=\"katex-mathml\"><math xmlns=\"http://www.w3.org/1998/Math/MathML\"><semantics><mrow><mi>O</mi><mo stretchy=\"false\">(</mo><mi>n</mi><msqrt><mi>n</mi></msqrt><mo stretchy=\"false\">)</mo></mrow><annotation encoding=\"application/x-tex\">O(n \\sqrt n)</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1.0503em;vertical-align:-0.25em;\"></span><span class=\"mord mathnormal\" style=\"margin-right:0.02778em;\">O</span><span class=\"mopen\">(</span><span class=\"mord mathnormal\">n</span><span class=\"mord sqrt\"><span class=\"vlist-t vlist-t2\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8003em;\"><span class=\"svg-align\" style=\"top:-3em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"mord mathnormal\" style=\"padding-left:0.833em;\">n</span></span><span style=\"top:-2.7603em;\"><span class=\"pstrut\" style=\"height:3em;\"></span><span class=\"hide-tail\" style=\"min-width:0.853em;height:1.08em;\"><svg xmlns=\"http://www.w3.org/2000/svg\" width=\"400em\" height=\"1.08em\" viewBox=\"0 0 400000 1080\" preserveAspectRatio=\"xMinYMin slice\"><path d=\"M95,702\nc-2.7,0,-7.17,-2.7,-13.5,-8c-5.8,-5.3,-9.5,-10,-9.5,-14\nc0,-2,0.3,-3.3,1,-4c1.3,-2.7,23.83,-20.7,67.5,-54\nc44.2,-33.3,65.8,-50.3,66.5,-51c1.3,-1.3,3,-2,5,-2c4.7,0,8.7,3.3,12,10\ns173,378,173,378c0.7,0,35.3,-71,104,-213c68.7,-142,137.5,-285,206.5,-429\nc69,-144,104.5,-217.7,106.5,-221\nl0 -0\nc5.3,-9.3,12,-14,20,-14\nH400000v40H845.2724\ns-225.272,467,-225.272,467s-235,486,-235,486c-2.7,4.7,-9,7,-19,7\nc-6,0,-10,-1,-12,-3s-194,-422,-194,-422s-65,47,-65,47z\nM834 80h400000v40h-400000z\"></path></svg></span></span></span><span class=\"vlist-s\">​</span></span><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.2397em;\"><span></span></span></span></span></span><span class=\"mclose\">)</span></span></span></span></span></p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">pragma</span> <span class=\"token expression\">GCC <span class=\"token function\">target</span><span class=\"token punctuation\">(</span></span><span class=\"token string\">\"sse,sse2,sse3,ssse3,sse4,sse4.1,sse4.2,popcnt,abm,mmx,avx,avx2,fma,tune=native\"</span><span class=\"token expression\"><span class=\"token punctuation\">)</span> </span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;bits/stdc++.h></span></span>\n\n<span class=\"token keyword\">namespace</span> mem<span class=\"token punctuation\">{</span> <span class=\"token comment\">//v2.1.2 => size: 14.19KiB</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEM_IO</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEM_MATH</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEM_UTILS</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEM_MODINT</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEM_RANDOM</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEM_STDVAL</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEM_LOGGER</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEM_CONTAINER</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">memset0</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEM_FASTIO</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">__SIZEOF_INT128__</span></span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">MEM_INT128</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">__integer_mapper</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span>       </span><span class=\"token punctuation\">\\</span>\n        <span class=\"token expression\"><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>                      </span><span class=\"token punctuation\">\\</span>\n        <span class=\"token expression\"><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>             </span><span class=\"token punctuation\">\\</span>\n        <span class=\"token expression\"><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>            </span><span class=\"token punctuation\">\\</span>\n        <span class=\"token expression\"><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span></span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">__float_mapper</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span>         </span><span class=\"token punctuation\">\\</span>\n        <span class=\"token expression\"><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">)</span>                    </span><span class=\"token punctuation\">\\</span>\n        <span class=\"token expression\"><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>                   </span><span class=\"token punctuation\">\\</span>\n        <span class=\"token expression\"><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span></span></span>\n    \n    <span class=\"token keyword\">namespace</span> stdval<span class=\"token punctuation\">{</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MEM_STDVAL</span></span>\n      <span class=\"token keyword\">using</span> i32<span class=\"token operator\">=</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> i64<span class=\"token operator\">=</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> u32<span class=\"token operator\">=</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> u64<span class=\"token operator\">=</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> f32<span class=\"token operator\">=</span><span class=\"token keyword\">float</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> f64<span class=\"token operator\">=</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> f96<span class=\"token operator\">=</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MEM_INT128</span></span>\n      <span class=\"token keyword\">using</span> i128<span class=\"token operator\">=</span>__int128_t<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> u128<span class=\"token operator\">=</span>__uint128_t<span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">namespace</span> utils<span class=\"token punctuation\">{</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MEM_UTILS</span></span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>tie<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cerr<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>swap<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>sort<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>unique<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>reverse<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>shuffle<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>function<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>make_pair<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>make_tuple<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>accumulate<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>lower_bound<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>upper_bound<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>max_element<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>min_element<span class=\"token punctuation\">;</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">namespace</span> random<span class=\"token punctuation\">{</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MEM_RANDOM</span></span>\n      <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> LuckyNumber<span class=\"token operator\">=</span><span class=\"token number\">20040726</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// Kanbe Kotori's Birthday</span>\n      std<span class=\"token double-colon punctuation\">::</span>mt19937 <span class=\"token function\">rng</span><span class=\"token punctuation\">(</span>LuckyNumber<span class=\"token operator\">^</span>std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span>steady_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">time_since_epoch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      std<span class=\"token double-colon punctuation\">::</span>mt19937_64 <span class=\"token function\">rng64</span><span class=\"token punctuation\">(</span>LuckyNumber<span class=\"token operator\">^</span>std<span class=\"token double-colon punctuation\">::</span>chrono<span class=\"token double-colon punctuation\">::</span>steady_clock<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">now</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">time_since_epoch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">count</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      \n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> T <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span>T l<span class=\"token punctuation\">,</span>T r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">uniform_int_distribution</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>rng<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> T <span class=\"token function\">rand64</span><span class=\"token punctuation\">(</span>T l<span class=\"token punctuation\">,</span>T r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">uniform_int_distribution</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>rng<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">namespace</span> modint<span class=\"token punctuation\">{</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MEM_MODINT</span></span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> mod<span class=\"token operator\">></span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Z</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">inline</span> <span class=\"token function\">Z</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">inline</span> <span class=\"token function\">Z</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>x<span class=\"token operator\">=</span>t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">-=</span><span class=\"token punctuation\">(</span>Z a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-=</span>a<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+=</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">+=</span><span class=\"token punctuation\">(</span>Z a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">+=</span>a<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">>=</span>mod<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-=</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">*=</span><span class=\"token punctuation\">(</span>Z a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>x<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>x<span class=\"token operator\">*</span>a<span class=\"token punctuation\">.</span>x<span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">friend</span> <span class=\"token keyword\">inline</span> Z <span class=\"token keyword\">operator</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>Z a<span class=\"token punctuation\">,</span>Z b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">.</span>x<span class=\"token operator\">*</span>b<span class=\"token punctuation\">.</span>x<span class=\"token operator\">%</span>mod<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">friend</span> <span class=\"token keyword\">inline</span> Z <span class=\"token keyword\">operator</span><span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>Z a<span class=\"token punctuation\">,</span>Z b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>x<span class=\"token operator\">-=</span>b<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>x<span class=\"token operator\">+=</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">friend</span> <span class=\"token keyword\">inline</span> Z <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span>Z a<span class=\"token punctuation\">,</span>Z b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>x<span class=\"token operator\">+=</span>b<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">>=</span>mod<span class=\"token operator\">&amp;&amp;</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>x<span class=\"token operator\">-=</span>mod<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      \n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> mod<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> Z<span class=\"token operator\">&lt;</span>mod<span class=\"token operator\">></span> <span class=\"token function\">finv</span><span class=\"token punctuation\">(</span>Z<span class=\"token operator\">&lt;</span>mod<span class=\"token operator\">></span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>x<span class=\"token operator\">&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>mod<span class=\"token operator\">-</span>mod<span class=\"token operator\">/</span>x<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token function\">finv</span><span class=\"token punctuation\">(</span>mod<span class=\"token operator\">%</span>x<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> mod<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> Z<span class=\"token operator\">&lt;</span>mod<span class=\"token operator\">></span> <span class=\"token function\">fpow</span><span class=\"token punctuation\">(</span>Z<span class=\"token operator\">&lt;</span>mod<span class=\"token operator\">></span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        Z <span class=\"token operator\">&lt;</span>mod<span class=\"token operator\">></span> s<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>b<span class=\"token punctuation\">;</span>b<span class=\"token operator\">>>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>a<span class=\"token operator\">=</span>a<span class=\"token operator\">*</span>a<span class=\"token punctuation\">)</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">&amp;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>s<span class=\"token operator\">=</span>s<span class=\"token operator\">*</span>a<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      \n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> mod<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init_inverse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>Z<span class=\"token operator\">&lt;</span>mod<span class=\"token operator\">></span> <span class=\"token operator\">*</span>inv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        inv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>inv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>inv<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>mod<span class=\"token operator\">-</span>mod<span class=\"token operator\">/</span>i<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>inv<span class=\"token punctuation\">[</span>mod<span class=\"token operator\">%</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> mod<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init_factorial</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>Z<span class=\"token operator\">&lt;</span>mod<span class=\"token operator\">></span> <span class=\"token operator\">*</span>fac<span class=\"token punctuation\">,</span>Z<span class=\"token operator\">&lt;</span>mod<span class=\"token operator\">></span> <span class=\"token operator\">*</span>ifac<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        fac<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token function\">init_inverse</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>ifac<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>fac<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>fac<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">,</span>ifac<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>ifac<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>ifac<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">namespace</span> io<span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> mod<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>modint<span class=\"token double-colon punctuation\">::</span>Z<span class=\"token operator\">&lt;</span>mod<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> mod<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>modint<span class=\"token double-colon punctuation\">::</span>Z<span class=\"token operator\">&lt;</span>mod<span class=\"token operator\">></span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">namespace</span> math<span class=\"token punctuation\">{</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MEM_MATH</span></span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>max<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>min<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> T <span class=\"token function\">abs</span><span class=\"token punctuation\">(</span>T x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> x<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">?</span><span class=\"token operator\">-</span>x<span class=\"token operator\">:</span>x<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> T <span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>T n<span class=\"token punctuation\">,</span>T m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> m<span class=\"token operator\">?</span><span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">,</span>n<span class=\"token operator\">%</span>m<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> T <span class=\"token function\">lcm</span><span class=\"token punctuation\">(</span>T n<span class=\"token punctuation\">,</span>T m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> n<span class=\"token operator\">/</span><span class=\"token function\">gcd</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>m<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      \n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> stdval<span class=\"token double-colon punctuation\">::</span>u64 p<span class=\"token operator\">></span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">FastDiv</span><span class=\"token punctuation\">{</span>\n        stdval<span class=\"token double-colon punctuation\">::</span>u64 t<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">inline</span> <span class=\"token function\">FastDiv</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">t</span><span class=\"token punctuation\">(</span>stdval<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">u64</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">i</span><span class=\"token punctuation\">(</span><span class=\"token function\">mul_inv</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>stdval<span class=\"token double-colon punctuation\">::</span>u64 n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> n<span class=\"token operator\">*</span>i<span class=\"token operator\">&lt;=</span>t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">divide</span><span class=\"token punctuation\">(</span>stdval<span class=\"token double-colon punctuation\">::</span>i64 n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> stdval<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">u64</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token operator\">?</span><span class=\"token operator\">-</span>n<span class=\"token operator\">:</span>n<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>i<span class=\"token operator\">&lt;=</span>t<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">inline</span> stdval<span class=\"token double-colon punctuation\">::</span>u64 <span class=\"token function\">mul_inv</span><span class=\"token punctuation\">(</span>stdval<span class=\"token double-colon punctuation\">::</span>u64 n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          stdval<span class=\"token double-colon punctuation\">::</span>u64 x<span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>x<span class=\"token operator\">*=</span><span class=\"token number\">2</span><span class=\"token operator\">-</span>n<span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MEM_INT128</span></span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> stdval<span class=\"token double-colon punctuation\">::</span>u64 b<span class=\"token operator\">></span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">FastMod</span><span class=\"token punctuation\">{</span>\n        stdval<span class=\"token double-colon punctuation\">::</span>u64 m<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">inline</span> <span class=\"token function\">FastMod</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">m</span><span class=\"token punctuation\">(</span>stdval<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">u64</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>stdval<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">u128</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">inline</span> stdval<span class=\"token double-colon punctuation\">::</span>u64 <span class=\"token function\">reduce</span><span class=\"token punctuation\">(</span>stdval<span class=\"token double-colon punctuation\">::</span>u64 a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          stdval<span class=\"token double-colon punctuation\">::</span>u64 q<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>stdval<span class=\"token double-colon punctuation\">::</span>u64<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>stdval<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">u128</span><span class=\"token punctuation\">(</span>m<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>a<span class=\"token punctuation\">)</span><span class=\"token operator\">>></span><span class=\"token number\">64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          stdval<span class=\"token double-colon punctuation\">::</span>u64 r<span class=\"token operator\">=</span>a<span class=\"token operator\">-</span>q<span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> r<span class=\"token operator\">>=</span>b<span class=\"token operator\">?</span>r<span class=\"token operator\">-</span>b<span class=\"token operator\">:</span>r<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">namespace</span> container<span class=\"token punctuation\">{</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MEM_CONTAINER</span></span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>tuple<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>set<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>unordered_set<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>map<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>unordered_map<span class=\"token punctuation\">;</span>\n      \n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>tie<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>make_pair<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>make_tuple<span class=\"token punctuation\">;</span>\n      \n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">vector</span><span class=\"token operator\">:</span><span class=\"token base-clause\">std<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">vector</span><span class=\"token operator\">&lt;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span></span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>vector<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">vector</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token function\">vector</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>plain<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>plain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">concat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector <span class=\"token operator\">&amp;</span>rhs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>rhs<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>rhs<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">inline</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">includes</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">!=</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Function</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">forEach</span><span class=\"token punctuation\">(</span>Function func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>it<span class=\"token operator\">:</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">inline</span> vector <span class=\"token function\">slice</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>l<span class=\"token operator\">></span>r<span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">&lt;</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token function\">vector</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>l<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> rsp<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>l<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> rsp<span class=\"token punctuation\">.</span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>r<span class=\"token operator\">-</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>rsp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">from</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>set<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>src<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">resize</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">auto</span> it<span class=\"token operator\">=</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T e<span class=\"token operator\">:</span>src<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>it<span class=\"token operator\">++</span><span class=\"token operator\">=</span>e<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">R</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">Function</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> vector<span class=\"token operator\">&lt;</span>R<span class=\"token operator\">></span> <span class=\"token function\">_map</span><span class=\"token punctuation\">(</span>Function func<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n          vector <span class=\"token operator\">&lt;</span>R<span class=\"token operator\">></span> <span class=\"token function\">res</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>size_t i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n            res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">func</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">R</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> vector<span class=\"token operator\">&lt;</span>R<span class=\"token operator\">></span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span>R <span class=\"token function\">func</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token generic-function\"><span class=\"token function\">_map</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>R<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">R</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> vector<span class=\"token operator\">&lt;</span>R<span class=\"token operator\">></span> <span class=\"token function\">map</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>function<span class=\"token operator\">&lt;</span><span class=\"token function\">R</span><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>func<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token generic-function\"><span class=\"token function\">_map</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>R<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      \n      <span class=\"token keyword\">struct</span> <span class=\"token class-name\">string</span><span class=\"token operator\">:</span><span class=\"token base-clause\">std<span class=\"token double-colon punctuation\">::</span><span class=\"token class-name\">string</span></span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        <span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>plain<span class=\"token punctuation\">)</span><span class=\"token operator\">:</span>std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>plain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> string <span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>vet<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n        \n        vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>dim<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>src<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>tar<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>dim<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>tar<span class=\"token punctuation\">,</span>dim<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          vector <span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> rsp<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>pos<span class=\"token operator\">=</span><span class=\"token function\">strtok</span><span class=\"token punctuation\">(</span>src<span class=\"token punctuation\">,</span>tar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>pos<span class=\"token punctuation\">;</span>pos<span class=\"token operator\">=</span><span class=\"token function\">strtok</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span>tar<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            rsp<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> src<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> tar<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> rsp<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        \n        <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">inline</span> string <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>fm<span class=\"token punctuation\">,</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span><span class=\"token function\">snprintf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>fm<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buf<span class=\"token operator\">=</span><span class=\"token keyword\">new</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span>len<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">snprintf</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span>len<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>fm<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          string <span class=\"token function\">str</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">delete</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> buf<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">return</span> str<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">inline</span> string <span class=\"token function\">format</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>fm<span class=\"token punctuation\">,</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">return</span> <span class=\"token function\">format</span><span class=\"token punctuation\">(</span>fm<span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">__to_string</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span>                 </span><span class=\"token punctuation\">\\</span>\n      <span class=\"token expression\"><span class=\"token keyword\">inline</span> string <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span> </span><span class=\"token punctuation\">\\</span>\n        <span class=\"token expression\"><span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          </span><span class=\"token punctuation\">\\</span>\n      <span class=\"token expression\"><span class=\"token punctuation\">}</span></span></span>\n      <span class=\"token function\">__float_mapper</span><span class=\"token punctuation\">(</span>__to_string<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">__integer_mapper</span><span class=\"token punctuation\">(</span>__to_string<span class=\"token punctuation\">)</span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">__to_string</span></span>\n      \n      <span class=\"token keyword\">inline</span> string <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">inline</span> string <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">inline</span> string <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      \n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> mod<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> string <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> mem<span class=\"token double-colon punctuation\">::</span>modint<span class=\"token double-colon punctuation\">::</span>Z<span class=\"token operator\">&lt;</span>mod<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      \n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> string <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>ctn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token string\">\"[\"</span><span class=\"token operator\">+</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span>ctn<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\"]\"</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> string <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> set<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>ctn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        string result<span class=\"token operator\">=</span><span class=\"token string\">\"{\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> flag<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>it<span class=\"token operator\">:</span>ctn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>result<span class=\"token operator\">+=</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">;</span>\n          flag<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n          result<span class=\"token operator\">+=</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token operator\">+</span><span class=\"token string\">\"}\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T1</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T2</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> string <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> map<span class=\"token operator\">&lt;</span>T1<span class=\"token punctuation\">,</span>T2<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>ctn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        string result<span class=\"token operator\">=</span><span class=\"token string\">\"{\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">bool</span> flag<span class=\"token operator\">=</span><span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span> <span class=\"token operator\">&amp;</span>it<span class=\"token operator\">:</span>ctn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span>result<span class=\"token operator\">+=</span><span class=\"token string\">\",\"</span><span class=\"token punctuation\">;</span>\n          flag<span class=\"token operator\">=</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n          result<span class=\"token operator\">+=</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token string\">\":\"</span><span class=\"token operator\">+</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> result<span class=\"token operator\">+</span><span class=\"token string\">\"}\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      \n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> string string<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">join</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>vet<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>vet<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">return</span> <span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        string res<span class=\"token operator\">=</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>vet<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>size_t i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>vet<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          res<span class=\"token operator\">+=</span><span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n          res<span class=\"token operator\">+=</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>vet<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      \n      <span class=\"token keyword\">inline</span> string <span class=\"token keyword\">operator</span> <span class=\"token string\">\"\"</span> <span class=\"token function\">_s</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">inline</span> string <span class=\"token keyword\">operator</span> <span class=\"token string\">\"\"</span> <span class=\"token function\">_s</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span>size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">inline</span> string <span class=\"token keyword\">operator</span> <span class=\"token string\">\"\"</span> <span class=\"token function\">_s</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">inline</span> string <span class=\"token keyword\">operator</span> <span class=\"token string\">\"\"</span> <span class=\"token function\">_s</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">namespace</span> io<span class=\"token punctuation\">{</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MEM_IO</span></span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MEM_FASTIO</span></span>\n      <span class=\"token keyword\">namespace</span> fastio<span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> BUFFER<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">18</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">char</span> ibuf<span class=\"token punctuation\">[</span>BUFFER<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>iS<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>iT<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>iS<span class=\"token operator\">==</span>iT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n            iT<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>iS<span class=\"token operator\">=</span>ibuf<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token function\">fread</span><span class=\"token punctuation\">(</span>ibuf<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>BUFFER<span class=\"token punctuation\">,</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> iS<span class=\"token operator\">==</span>iT<span class=\"token operator\">?</span><span class=\"token constant\">EOF</span><span class=\"token operator\">:</span><span class=\"token operator\">*</span>iS<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span>iS<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">char</span> obuf<span class=\"token punctuation\">[</span>BUFFER<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>oS<span class=\"token operator\">=</span>obuf<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>oT<span class=\"token operator\">=</span>oS<span class=\"token operator\">+</span>BUFFER<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fwrite</span><span class=\"token punctuation\">(</span>obuf<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>oS<span class=\"token operator\">-</span>obuf<span class=\"token punctuation\">,</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          oS<span class=\"token operator\">=</span>obuf<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">putc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token operator\">*</span>oS<span class=\"token operator\">++</span><span class=\"token operator\">=</span>x<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>oS<span class=\"token operator\">==</span>oT<span class=\"token punctuation\">)</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Flusher</span><span class=\"token punctuation\">{</span><span class=\"token operator\">~</span><span class=\"token function\">Flusher</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token function\">flush</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span>flusher<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">using</span> fastio<span class=\"token double-colon punctuation\">::</span>getc<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">using</span> fastio<span class=\"token double-colon punctuation\">::</span>putc<span class=\"token punctuation\">;</span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">else</span></span>\n      <span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token function\">getchar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">putc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token function\">putchar</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n      \n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readDigit</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        x<span class=\"token operator\">=</span><span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>x<span class=\"token operator\">=</span><span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">readDigit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">readDigit</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">readAlpha</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        x<span class=\"token operator\">=</span><span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isalpha</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>x<span class=\"token operator\">=</span><span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">readAlpha</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">readAlpha</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">__read</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span>                             </span><span class=\"token punctuation\">\\</span>\n        <span class=\"token expression\"><span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>                  </span><span class=\"token punctuation\">\\</span>\n          <span class=\"token expression\">x<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">bool</span> f<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span><span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           </span><span class=\"token punctuation\">\\</span>\n          <span class=\"token expression\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>f<span class=\"token operator\">^=</span>c<span class=\"token operator\">==</span></span><span class=\"token char\">'-'</span><span class=\"token expression\"><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   </span><span class=\"token punctuation\">\\</span>\n          <span class=\"token expression\"><span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">isdigit</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>x<span class=\"token operator\">=</span>x<span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token operator\">+</span>c<span class=\"token operator\">-</span></span><span class=\"token char\">'0'</span><span class=\"token expression\"><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> </span><span class=\"token punctuation\">\\</span>\n          <span class=\"token expression\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>x<span class=\"token operator\">=</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span>                              </span><span class=\"token punctuation\">\\</span>\n        <span class=\"token expression\"><span class=\"token punctuation\">}</span></span></span>\n      <span class=\"token function\">__integer_mapper</span><span class=\"token punctuation\">(</span>__read<span class=\"token punctuation\">)</span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">__read</span></span>\n      \n      <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>x<span class=\"token operator\">=</span><span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span><span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>c<span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">!</span><span class=\"token function\">isspace</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>s<span class=\"token operator\">++</span><span class=\"token operator\">=</span>c<span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">*</span>s<span class=\"token operator\">++</span><span class=\"token operator\">=</span><span class=\"token char\">'\\0'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>container<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">char</span> c<span class=\"token operator\">=</span><span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        s<span class=\"token operator\">=</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>c<span class=\"token operator\">&amp;&amp;</span><span class=\"token operator\">!</span><span class=\"token function\">isspace</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>s<span class=\"token operator\">+=</span>c<span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token function\">getc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      \n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">=</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> T <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        T x<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>T <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span>Args <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name function\">__print</span><span class=\"token expression\"><span class=\"token punctuation\">(</span>T<span class=\"token punctuation\">)</span>           </span><span class=\"token punctuation\">\\</span>\n        <span class=\"token expression\"><span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>T x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>  </span><span class=\"token punctuation\">\\</span>\n          <span class=\"token expression\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">&lt;</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token function\">putc</span><span class=\"token punctuation\">(</span></span><span class=\"token char\">'-'</span><span class=\"token expression\"><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>x<span class=\"token operator\">=</span><span class=\"token operator\">-</span>x<span class=\"token punctuation\">;</span> </span><span class=\"token punctuation\">\\</span>\n          <span class=\"token expression\"><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">></span><span class=\"token number\">9</span><span class=\"token punctuation\">)</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">/</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    </span><span class=\"token punctuation\">\\</span>\n          <span class=\"token expression\"><span class=\"token function\">putc</span><span class=\"token punctuation\">(</span></span><span class=\"token char\">'0'</span><span class=\"token expression\"><span class=\"token operator\">+</span>x<span class=\"token operator\">%</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        </span><span class=\"token punctuation\">\\</span>\n        <span class=\"token expression\"><span class=\"token punctuation\">}</span></span></span>\n      <span class=\"token function\">__integer_mapper</span><span class=\"token punctuation\">(</span>__print<span class=\"token punctuation\">)</span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">__print</span></span>\n      \n      <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token function\">putc</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> len<span class=\"token operator\">=</span><span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>len<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token function\">putc</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> container<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">length</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token function\">putc</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      \n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">print</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">println</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">putc</span><span class=\"token punctuation\">(</span><span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      \n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printfm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>formatter<span class=\"token punctuation\">,</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>container<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>formatter<span class=\"token punctuation\">,</span>arguments<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printfm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> container<span class=\"token double-colon punctuation\">::</span>string <span class=\"token operator\">&amp;</span>formatter<span class=\"token punctuation\">,</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> arguments<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>container<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>formatter<span class=\"token punctuation\">,</span>arguments<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">namespace</span> logger<span class=\"token punctuation\">{</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">MEM_LOGGER</span></span>\n      <span class=\"token keyword\">enum</span> <span class=\"token class-name\">ConsoleColor</span><span class=\"token punctuation\">{</span>\n        NOPE<span class=\"token operator\">=</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>BLACK<span class=\"token punctuation\">,</span>RED<span class=\"token punctuation\">,</span>GREEN<span class=\"token punctuation\">,</span>YELLOW<span class=\"token punctuation\">,</span>BLUE<span class=\"token punctuation\">,</span>PURPLE<span class=\"token punctuation\">,</span>DEEPBLUE\n      <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> ConsoleColor color<span class=\"token operator\">=</span>NOPE<span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>formatter<span class=\"token punctuation\">,</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\033[%dm\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token operator\">+</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span>formatter<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\033[0m\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span>formatter<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">const</span> ConsoleColor color<span class=\"token operator\">=</span>NOPE<span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logln</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>formatter<span class=\"token punctuation\">,</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">~</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\033[%dm\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">30</span><span class=\"token operator\">+</span>color<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span>formatter<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\033[0m\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span>formatter<span class=\"token punctuation\">,</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span>container<span class=\"token double-colon punctuation\">::</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">c_str</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">logs</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">logs</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">template</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> Args<span class=\"token operator\">></span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">logsln</span><span class=\"token punctuation\">(</span>Args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">logs</span><span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">__integer_mapper</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">__float_mapper</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">__string_mapper</span></span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">undef</span> <span class=\"token expression\">__string_join_mapper</span></span>\n    \n    <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> io<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> math<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> utils<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> modint<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> random<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> stdval<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> logger<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> container<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token comment\">// namespace mem</span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> mem<span class=\"token double-colon punctuation\">::</span>io<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> mem<span class=\"token double-colon punctuation\">::</span>math<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> mem<span class=\"token double-colon punctuation\">::</span>utils<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> mem<span class=\"token double-colon punctuation\">::</span>logger<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> N<span class=\"token operator\">=</span><span class=\"token number\">3e5</span><span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span>sqn<span class=\"token operator\">=</span><span class=\"token number\">600</span><span class=\"token punctuation\">,</span>S<span class=\"token operator\">=</span>sqn<span class=\"token operator\">+</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">,</span>bn<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>bln<span class=\"token punctuation\">[</span>N<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">atom</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">inline</span> atom <span class=\"token keyword\">operator</span><span class=\"token operator\">+</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> atom <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> atom <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>l<span class=\"token operator\">==</span>a<span class=\"token punctuation\">.</span>c<span class=\"token operator\">&amp;&amp;</span>b<span class=\"token punctuation\">.</span>l<span class=\"token operator\">==</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">.</span>l<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>r<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>c<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>s<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>s<span class=\"token operator\">+</span>a<span class=\"token punctuation\">.</span>c<span class=\"token operator\">*</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>l<span class=\"token operator\">==</span>a<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">.</span>l<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>c<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>s<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>s<span class=\"token operator\">+</span>a<span class=\"token punctuation\">.</span>c<span class=\"token operator\">*</span>b<span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">.</span>l<span class=\"token operator\">==</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>r<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>c<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>s<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>s<span class=\"token operator\">+</span>a<span class=\"token punctuation\">.</span>r<span class=\"token operator\">*</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>c<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>c<span class=\"token punctuation\">,</span>a<span class=\"token punctuation\">.</span>s<span class=\"token operator\">+</span>b<span class=\"token punctuation\">.</span>s<span class=\"token operator\">+</span>a<span class=\"token punctuation\">.</span>r<span class=\"token operator\">*</span>b<span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> atom <span class=\"token function\">calc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  atom res<span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>r<span class=\"token operator\">-</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>l<span class=\"token operator\">&lt;</span>res<span class=\"token punctuation\">.</span>c<span class=\"token operator\">&amp;&amp;</span>a<span class=\"token punctuation\">[</span>l<span class=\"token operator\">+</span>res<span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>x<span class=\"token punctuation\">)</span>res<span class=\"token punctuation\">.</span>l<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>r<span class=\"token operator\">&lt;</span>res<span class=\"token punctuation\">.</span>c<span class=\"token operator\">&amp;&amp;</span>a<span class=\"token punctuation\">[</span>r<span class=\"token operator\">-</span>res<span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>x<span class=\"token punctuation\">)</span>res<span class=\"token punctuation\">.</span>r<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> pre<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>l<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>x<span class=\"token punctuation\">)</span>res<span class=\"token punctuation\">.</span>s<span class=\"token operator\">+=</span><span class=\"token operator\">++</span>pre<span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> pre<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> res<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">const</span> atom c<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">{</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> anc<span class=\"token punctuation\">[</span>S<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>siz<span class=\"token punctuation\">[</span>S<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>tag<span class=\"token punctuation\">[</span>S<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> anc<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>x<span class=\"token operator\">?</span>x<span class=\"token operator\">:</span>anc<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>anc<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token operator\">&amp;</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  a<span class=\"token operator\">=</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>b<span class=\"token operator\">=</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>s<span class=\"token operator\">+=</span>siz<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token operator\">*</span>siz<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>siz<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>siz<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  anc<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>b<span class=\"token punctuation\">,</span>siz<span class=\"token punctuation\">[</span>b<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>siz<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">block</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">[</span>S<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">[</span>S<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  atom pre<span class=\"token punctuation\">[</span>S<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">loc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">return</span> <span class=\"token function\">upper_bound</span><span class=\"token punctuation\">(</span>val<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>val<span class=\"token operator\">+</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span>val<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    n<span class=\"token operator\">=</span>r<span class=\"token operator\">-</span>l<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    pre<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    pre<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>n<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>n<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>c<span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>std<span class=\"token double-colon punctuation\">::</span>pair<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> <span class=\"token function\">t</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>t<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">{</span>a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>t<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>val<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>t<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>first<span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>t<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">modify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      val<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">[</span>k<span class=\"token operator\">+</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">></span><span class=\"token number\">1</span><span class=\"token operator\">&amp;&amp;</span>val<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>val<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token operator\">&amp;&amp;</span>val<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">></span>val<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token operator\">=</span><span class=\"token function\">min</span><span class=\"token punctuation\">(</span>pre<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">,</span>n<span class=\"token operator\">-</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>anc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token punctuation\">,</span>siz<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>tag<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>s<span class=\"token operator\">=</span>i<span class=\"token operator\">?</span>pre<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>s<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      tag<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&amp;&amp;</span>tag<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">&amp;&amp;</span>tag<span class=\"token punctuation\">[</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>pre<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>s<span class=\"token punctuation\">[</span>N<span class=\"token operator\">/</span>sqn<span class=\"token operator\">+</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> bas<span class=\"token punctuation\">,</span>_mem<span class=\"token punctuation\">[</span>N<span class=\"token operator\">*</span><span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>_p<span class=\"token operator\">=</span>_mem<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">FC</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>arr<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>l<span class=\"token punctuation\">,</span><span class=\"token operator\">*</span>r<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">source</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>arr<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>val<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>n<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">land</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token keyword\">this</span><span class=\"token operator\">-></span>n<span class=\"token operator\">=</span>n<span class=\"token punctuation\">,</span>arr<span class=\"token operator\">=</span>_p<span class=\"token punctuation\">,</span>_p<span class=\"token operator\">+=</span>n<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span>l<span class=\"token operator\">=</span>_p<span class=\"token punctuation\">,</span>_p<span class=\"token operator\">+=</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token operator\">=</span>_p<span class=\"token punctuation\">,</span>_p<span class=\"token operator\">+=</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>arr<span class=\"token punctuation\">[</span>n<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">1e9</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> FC <span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> FC <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PushI</span> <span class=\"token expression\"><span class=\"token punctuation\">{</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>c<span class=\"token punctuation\">)</span>arr<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>a<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span> c<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span></span></span>\n    <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">PushJ</span> <span class=\"token expression\"><span class=\"token punctuation\">{</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>c<span class=\"token punctuation\">)</span>arr<span class=\"token punctuation\">[</span><span class=\"token operator\">++</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>b<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>j<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">else</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span> c<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">}</span></span></span>\n    <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>j<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>c<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>n<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>a<span class=\"token punctuation\">.</span>n<span class=\"token operator\">&amp;&amp;</span>j<span class=\"token operator\">&lt;=</span>b<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;</span>b<span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>PushI <span class=\"token keyword\">else</span> PushJ<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">&lt;=</span>a<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span>PushI<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>j<span class=\"token operator\">&lt;=</span>b<span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span>PushJ<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">inline</span> <span class=\"token keyword\">void</span> <span class=\"token function\">out</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n=%d\\n\"</span><span class=\"token punctuation\">,</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token generic-function\"><span class=\"token function\">log</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>RED<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%c\"</span><span class=\"token punctuation\">,</span>arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">\" \\n\"</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">==</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token generic-function\"><span class=\"token function\">log</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>BLUE<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%c\"</span><span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">\" \\n\"</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">==</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token generic-function\"><span class=\"token function\">log</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>GREEN<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d%c\"</span><span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token string\">\" \\n\"</span><span class=\"token punctuation\">[</span>i<span class=\"token operator\">==</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>tr<span class=\"token punctuation\">[</span>S<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> res<span class=\"token punctuation\">[</span>S<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> use<span class=\"token punctuation\">[</span>S<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">locate</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> l<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">Loc</span> <span class=\"token expression\">res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>tr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>x<span class=\"token operator\">?</span><span class=\"token number\">2</span><span class=\"token operator\">:</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+=</span>tr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>arr<span class=\"token punctuation\">[</span>res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">&lt;=</span>x</span></span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>bn<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>use<span class=\"token punctuation\">[</span>bas<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>l<span class=\"token operator\">&lt;=</span>i<span class=\"token operator\">&amp;&amp;</span>i<span class=\"token operator\">&lt;=</span>r<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>bas<span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>use<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>use<span class=\"token punctuation\">[</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">||</span>use<span class=\"token punctuation\">[</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">|</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  res<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>bas<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>use<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    Loc<span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">[</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>tr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">[</span>res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    res<span class=\"token punctuation\">[</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">|</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>tr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">[</span>res<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>l<span class=\"token operator\">+</span>bas<span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>r<span class=\"token operator\">+</span>bas<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>Loc<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// for(int i=l;i&lt;=r;i++)log(\"%d%c\",tr[i+bas].k,\" \\n\"[i==r]);</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifdef</span> <span class=\"token expression\">memset0 </span></span>\n  <span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.in\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"r\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">stdin</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">freopen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"1.out\"</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"w\"</span><span class=\"token punctuation\">,</span><span class=\"token constant\">stdout</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span>\n  <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>m<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>bln<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>sqn<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  bn<span class=\"token operator\">=</span>bln<span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>s<span class=\"token punctuation\">[</span>bln<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>n<span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>s<span class=\"token punctuation\">[</span>bln<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token operator\">=</span>i<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>bn<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token generic-function\"><span class=\"token function\">log</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>RED<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token string\">\"block=%d\\n\"</span><span class=\"token punctuation\">,</span>bn<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>bas<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>bas<span class=\"token operator\">&lt;=</span>bn<span class=\"token punctuation\">;</span>bas<span class=\"token operator\">&lt;&lt;=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">--</span>bas<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>bn<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>tr<span class=\"token punctuation\">[</span>bas<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">land</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>bas<span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>tr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">land</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>n<span class=\"token operator\">+</span>tr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">|</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>n<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>></span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>bn<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>tr<span class=\"token punctuation\">[</span>bas<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>bas<span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>tr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>tr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>tr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">|</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// for(int i=1;i&lt;=bas+n;i++)tr[i].out();</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> o<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">,</span>i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>m<span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">==</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      a<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token operator\">=</span>y<span class=\"token punctuation\">;</span>\n      s<span class=\"token punctuation\">[</span>bln<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">modify</span><span class=\"token punctuation\">(</span>x<span class=\"token operator\">-</span>s<span class=\"token punctuation\">[</span>bln<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      s<span class=\"token punctuation\">[</span>bln<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">build</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      tr<span class=\"token punctuation\">[</span>bas<span class=\"token operator\">+</span>bln<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">source</span><span class=\"token punctuation\">(</span>bln<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token punctuation\">(</span>bas<span class=\"token operator\">+</span>bln<span class=\"token punctuation\">[</span>x<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token operator\">>></span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">>>=</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>tr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>tr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>tr<span class=\"token punctuation\">[</span>i<span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">1</span><span class=\"token operator\">|</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      atom ans<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bln<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">==</span>bln<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        ans<span class=\"token operator\">=</span><span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span><span class=\"token keyword\">else</span><span class=\"token punctuation\">{</span>\n        ans<span class=\"token operator\">=</span><span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>l<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>bln<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>bln<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token operator\">&lt;=</span>bln<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token function\">locate</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span>bln<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>bln<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>bln<span class=\"token punctuation\">[</span>l<span class=\"token punctuation\">]</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">&lt;=</span>bln<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>ans<span class=\"token operator\">=</span>ans<span class=\"token operator\">+</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pre<span class=\"token punctuation\">[</span>res<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>bas<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        ans<span class=\"token operator\">=</span>ans<span class=\"token operator\">+</span><span class=\"token function\">calc</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>bln<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>l<span class=\"token punctuation\">,</span>r<span class=\"token punctuation\">,</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">print</span><span class=\"token punctuation\">(</span>ans<span class=\"token punctuation\">.</span>s<span class=\"token punctuation\">,</span><span class=\"token char\">'\\n'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// if(i%10000==0)fprintf(stderr,\"clocks: %.4lf\\n\",clock()/(double)CLOCKS_PER_SEC);</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span><span class=\"token string\">\"clocks: %.4lf\\n\"</span><span class=\"token punctuation\">,</span><span class=\"token function\">clock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span>CLOCKS_PER_SEC<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"「CometOJ Round #7 F」最简单的题","date":"10/10/2020","description":null},"fields":{"cover":{"childImageSharp":{"gatsbyImageData":{"layout":"constrained","backgroundColor":"#080808","images":{"fallback":{"src":"/static/67d74e09e23e390525e1f9eb36de1f87/71d4d/25.webp","srcSet":"/static/67d74e09e23e390525e1f9eb36de1f87/c0bcc/25.webp 320w,\n/static/67d74e09e23e390525e1f9eb36de1f87/17574/25.webp 640w,\n/static/67d74e09e23e390525e1f9eb36de1f87/71d4d/25.webp 1280w","sizes":"(min-width: 1280px) 1280px, 100vw"},"sources":[]},"width":1280,"height":720}}},"hasCover":true,"category":"[{\"name\":\"算法竞赛\",\"to\":\"/oi/\"},{\"name\":\"题解\",\"to\":\"/oi/solution/\"}]"}},"previous":{"fields":{"slug":"/oi/solution/uoj120/"},"frontmatter":{"title":"「UR #8」宿命多项式"}},"next":{"fields":{"slug":"/oi/solution/loj3397/"},"frontmatter":{"title":"「集训队作业2020」春天，在积雪下结一成形，抽枝发芽"}}},"pageContext":{"id":"f5617264-33aa-538c-8934-82f4aa12c0e0","previousPostId":"22e8f7d7-cbe6-5f39-ac9e-813c3f91d270","nextPostId":"b1b755e1-d06f-5dca-ace1-ea92af4c49a9"}},"staticQueryHashes":["2841359383"],"slicesMap":{}}